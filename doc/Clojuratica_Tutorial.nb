(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    481762,       9778]
NotebookOptionsPosition[    461266,       9213]
NotebookOutlinePosition[    463918,       9282]
CellTagsIndexPosition[    463739,       9275]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "Clojuratica",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsnXecG9W59yf1zZuCd9W2S1M0TX17L951X/fesY0NxiYQik2HBAiEBEgg
hE5IB5JALgRCEgiE3sHG4G7v2l57dyXNGWmrpNHMeZ+jXW6S+96bS7O3zR/f
z4ymSSONvvrNM+eMmA3nLdzwBYqiHv4cRW0GvgjjGGMTExMTExMTExMTExMT
ExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMT
ExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMT
ExMTExMTExMTExMTExMTExMTExMTExMTExMTExOTCcivnazJx+DnToZ6yeWh
evhaCrGEmlOOCs97nCmnPmBFag9wyA1wIrUTeNUlUAorUYooUFEJkEUKeQgy
hWQPhbw+CkleWMZLIabe5J9QgTBTY93NBP7PB0yAOtW8D+xk/Bl2naLnHGn/
mJh+Nv38//s5zMI8dx2F+GZgsgnQA+/FQa66dUtuTt6GHDu1McdxytgErHfY
qWV2G7UUWAvjm07B8460f0xMP5t+/q9+9oGf3VQXU0qpNLiJbjQBeugmah9T
eeksm9XXZM2mWqyWU8oUYOowU07Rc460f0xMP5t+/u/8zFNHXSIVpavB0U0j
7sbRQJxu+lobU/X2Yru9eqbNSs222cY9I+0fE9PPpp//Oz8L1BFYttMVpBRX
A1A/4Ym5Gie3MZV4qd0+rxX8PBf8Nd4Zaf+YmH42/fzf+5nk5+OMRCGmikLO
BqB+QhOnG29oY8qJn9fNslupOXbbuGek/WNi+tn087/xM6yPxDIKQYZGdP2E
Js40Pn6QKSF+3j7XZqHmQ4Ye74y0f0xMP5t+/l/yszcEGbp2KEe6JixfibH1
ew4wIbzSZr9+gdVCLbJaxz0j7R8T08+mnz+Cn6WKoQw98p4cIRrKEVenHWQC
eL0t5zZSf55ns417Rto/JqafTT9/BD/7Sv+RoScidMPVEXcVPsAE8Xp7zv2k
/jzXbhv3jLR/TEw/m37+CH72g5/5akopbKCUovoJB2IaH+riy/E+kp/tOQ/P
slmouZk2HOObkfaPieln088fJT+XwLAm084sWjTh+BL4+e0OdyneA37eYHc8
vsiSRS2zZI97Rto/JqafTT9/RD/7ID8LNVSUrp9o8DGuobfdHcJ7mSDeZM99
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
3QpwM/F0qc1qPFDkwiorZ7xMOJKpP0tDjmYyfsaHWPH9p2l35S/HtJ9XUWrx
TAqVzjg5lMyYjUpna4q3BnfxoTQ81mE6+Lg2rTASQj5SY54Fj2ekUQDcXDzT
gH3VI6y3X/E3ayg0XYvJs1Jvuyr6X3L7UnG5LtMmLy5W66/R3vRxuVJX5SpN
8VThDj60Q+GrvgxQJ5sYX00dcVdQPy9kqccYfqz6eT64+cgGyMmrbafh062T
8FZS13Bk4QvsVuOPNE+y8w1m3Xl0+Bm8RAVtFqp64vmZarBZr6jJ+NmCq2wW
Y4bdpn/ACjgKHj4CHIMcfYLUN2C8fdjXZF6nW4q/zAnXPgnfx9H5/yn/3s9R
aQUVLp5BxSrmUKh8NjDns6Ns9udRaesLMMRhIZTu9jXqatks8PNM0m8wHWVE
BXkbITPPNpB/FvgZvF08y1B9TeBufwzx1X1qYHr6BD8t9TeXt79dqjJicj1p
C62rYp3+MvGzpxr8XK3H5BrcJoTI/+KsUsl7I1SfNFQgCjzLeDP32HhijPn5
4iE3X3ROdnbsDMjJa+2T8Om2SRge4y32bLzJnoV/kl+E32LlMLiZHuk6wmhl
JPwcsg3l6BriLJhWP0GAfXU02K17qsDPGU9bLcaPi1z6oNtjkLozyc5kGM5c
KyRtOjLTDPAtVgUZv80Ktz9J819/cQz6+Q2xkuryz6RU/2wq5vv0xH1zMqjB
uTNR+VyslszE3W6/ppTMhPxM/Ax5OTRFVxgxqvga0ig0F9zcqqEgTC9pxVGx
MdVF+8JRuqQ3Jrek32dqUm9ywWSP3GQgqQF83KhH+br0Cy6P1inX6KoEyLVG
p1SGD3PBn6pSA+x//UmjF97zPfDe/wctUD8Bj/5xjPl5m8V23jmQk88AD6+D
rLwO/Lw10z8wG58F49vsNvxXWjDeZWSzL8q/YST9XDXs6CbI0o3Dtelxj82y
qTrjZyueDOd3kKmNv9Jcuo+TjW5SdwYUViRDo4sd8nT3Pzm6jRf3vMYK9S/T
Y8fPMXkV9Sh4Zqe7gYrD4/10NbWPrvhU7KXLqd3OUqqLbX5YLV6IUXCK3ikU
a0rZXA3ytI5KIC8Xz9AVVo4qnoYUCs1PIf9sHYXmGLHgbKONLR2A85NexAQS
iKlNPOPyJw+J1UZcbNKR1AQ+npzudNek/0bLWhhyNMnSSKzN9ANvd5e+HxXr
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
1HG6If2oS0508rW4y1V2VTdk4E9CGHLzMWAHG6KeKaqh7hllfr56yM9lVzty
/3JDDsnFufhKW45BvDvEkKcvHnbzTbmFGNbF1+flZ3LzDbn5+LvAzwpcb+5l
5S/tgn0y+QfvAe/DZ9xB+8DHwWEvj0U/WzJ9DJts2eOGRlu2d4otO7EqKxvP
tVq1RRarPtluwS3kP39ycnBEDhkxXsQRXjSiAnhZFPSha4Ripp4B/iVtPEhb
POLvhCJ4E8gnalE336vwwRTyBUnWBhd5wdHeQSR5Vo46P9NLhusdq4Yg4x7S
vmMNvJ4VlOpbKZ+QmnbuF6vBs6eTviO9irukHwVWpVFoQxqVbEqi4o2wrwt1
8LOCPGvA1ev0mLig7xBXMRD2L9fVwGpd9czqPcLK7d3ykpTqXwVuXp1G/lWp
mNyqvcmI4TZXUyruXprc55rd+yQdTMTE1pTKzTS62cn9T9ByR5d7WlJlpuqI
narFxRmp/a4a7akiX7KHn4yjruqfd7uqqE/CXrqEegl8+gLrpZ6F/Dza/AyO
vZTUkmEeqVcYkKeNq4drFqSevN1mw5fY7Mb3cvOM2wtcmZxMII6+Drglvwhf
B35+kRbOOcjJ1D5OMgH2AnuAQ/CedMPnhcDH0X9x81j0M+kLTtyWBcNxwZfB
xzsWWS14Gbh5QbY1OcNqNUh7u2lWi/EjJ4P7PD6sCLwBjtajAvhZGna0+KGj
IUtDnlZk0odF7st42MfrkJlhubI08vjTyCdrKODHyOeHdXxPI8nrDbP8WPCz
Hfy886hQl94vTe+LBdeR7NuP+PIB5F0IuflMyNCbB1HwTMjMy3WFrYwgYdGA
6lmndblb1A/ctUnVvxrONdakkTy39wgtRzvlJZrqOx38DB4HP6vygtQHjKd7
t6t8MOxc2PuSswbtZhu1uDAH/DzLOMI09v3BKXdFuelpxEzTFPeMVI8wK7XD
VZt6kylN93LNGNEt+7pdc76KXNXUR0UFOsHPb9Mh6mX4fr7I+kabnycDz14P
rv0RcawjXwcfG6SOfK0jP1NX3gZuhtxs3JCTp99XSBs35xfiD+sb14OTyXo3
wuN7Clzv7GU8X9kHr3uvCfXBMMfgc4owgf9083jwcyZDAy2wjebxgN364Bzw
8Srw8kKLNTnTZktPcdjwLKsVT7FZ8S7JZ/SDe0kdI0ocTdpCk8yccTQ42CdD
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
sOI/HyvBb+Hjvkv1l+kV6M8uaf/fXTN62tg13cfcSzUF9l91L04+Xljdt9c9
Y0Dh5vZFwN9h19zUK64pg+/DNtqcdakjzkXbPnBNpfZk3FxMvfO/+PkJRsz4
+QmGz3qM4Vc8yYh3f0AH//QiLf3qZUbsfsol4x1sMP0IzSeIGyFH6++wPu1B
F5cGZ6YfGMrQ+kuMoP3SxaQh+2rgWo0s+9BwnYP0L4HMS64V9t5bSKdugux8
U36h/nunoD/o4g3Ix2R7KeJjyMsGjOu/dnEYMjR5rBNH/wWy8+9hGjzn4/Ac
1F3jmNsB2GdqN5zH9A3XM/4T088fy88rwM+nW2zUdQXOzPLF5DWMICUA+a/y
tfC6l8HrWfpPLLBZl9xW4MIbcnPxRkeODlk6Pctmx6ustv5rbDl951jtadI+
eoPNoc+z2PSbcgpSSPAMhN1eRfWVkX4neqYdHWlDJwRTHayn5xgrHUF8bQzJ
9RhJ1TpyV5G6RBzxFVGgR3FXHUXCjC4UBB+HFmhImqEhYe4Acs/pB0f3IKm1
H3kXp5BviYb8y3RFXBxG3k0I+TcaamBdspufEo8KS3tVz9pElF/dFpa2hNWS
80nNWFNLzk12itNPKPKKrhP8QrW7eFtCrcnUFHrUmu8mOuS1qCN04fHY1Du0
7uJ1anvJdjXWcGsK1d+YQP71SJl8cwzNuDeBpt3d3115frjNd0Ys7tu+80hg
c3d42p2aMvWupDL9fjVSce7+g/KiQ5H5P9WVeQ/0hQNnKgdD3+yJNf2o7yA/
9/jh6qt71ZZ70qjpJ/3xxpsjO7gGZW/1Fcn4tPsGw8WXxN7jF6NY6bX6X7gp
vQ+zzf2x8usTSvmV/eHApfp7wgr8W3o67im5BCsV38GvuTdqO+lFPfvcLe2P
FTWr3Z4NfYq0IaVIq/qOu1cmni5q6Q+7Fye62XlIEZb2H2DWDvy1sG7gcNGM
1FH3yt7X6abwS7Rw/h7ad+ULjO9Xr9P+08HPX3qR9VJ/K6oh9+f/MvhZeJqV
Wv/CClc+RwcvuDufOetRhkMv0j5jL1OM/0KL+E8Mj99jPMmnXGLyYZc7CZlW
A2fqO1h/8lEXn/qpM1PTSIKbUy/TovYbJ5u+28lo95K2zk4mDaTI9UFSN/5J
Ia1DXk7eWehKkOxM2tn92smlfwNev7eITj8EbgaXG7AOBkcbsE0Dno/4WSd+
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
uhfN1Uu4Y0LShM0zUW//2VBbRqCpDs410+wHrrxjrrH2vhmkOWSKlwf+bKy8
bYKXH5hnqtoP+IxtE/yzsTrVgsxDmMulAssVWoS5WIUwligR1jrg074IQvXp
R6wCtHzL9Ro2fT2fZ7sLRlxj5QhrxxhiFTqN2IRJEPtYKeJ+SSFYclU3ahM6
OmkZ1CdYeEmLLLgqhlc8lCPe8RLBijh42vkEAjgtZi+5z51em8rm+6Vx2AEZ
HN66FI54VQp3ZNktbofPNf4k4OFweJ5yfEumaGRbFvfL/hLFx2XXplsDHk59
iSyUTK5P7f+yp0D6MbYUsLdEPr4mqXd8Q8po86q74+37ioTd+4pFnyKLxANL
4tktkUWirv2lSOeqeyPNMcWy9oCM8cZNSZy2QxWqlgOl/Ja9hePvfO7zO8D/
wOCaJHZnVJHoM+B7rfMhwdOAeOnHyGLJp/BCdfOS87xP9ifgYa94ybDndem3
Ldm6r8tvoYW2YWi3fwY6tiEdHV6fjr6zP4K+87qJ9i+PQ7+4XEWFyxPReufD
6s8eV+WDHgmiL+53JS+dTogLrA/An91vSUeWx/G7nS9OXTPzGXlvHf3tDWuf
/DFzl7rD9pDgESNi+jFjJ1LLCFK9t9qvfGe5X1RG3YI8om1lj1qGTbaT1yNx
Jq5IA8FHUk5YJM/BL5C8I/pwKgnzpwvxizVZFm4awG3FK+JSebK5oyINbytu
ITqL6og2/GwCXZGFp6tBOV2RjSfLkvEkdSIeUqQQIGElgTKRYE4YjbeABFgd
RjOZoXoN+P0CoilfQHRdCZGGjTsnfUliCGuw64AkmqaTwhA3kGhYHxVpD2Bx
A5k5Uwn4XEGizTSRmNoXJMB1cB8wGq0i0beC/XB/TwHvBfcSZAyyxMFEFuCk
FcgPPv8Z+ZwM+JwBlvHmhNnrtwmA1bf/jZ9/i2y6amyGbjUwQHcDRoeA7DO2
0F03IWrW/6SvvGZI0FRb0NURPxlpjuubKnfNMdUmWVBUvvNMZKf1zeS3TAmy
4L9gDm2u2fOzqeaEgamyl+IokDB91YiVr2Z2zlf6UgXC3KiFKb58AWubCLHe
qkOsAzVc5mYx1+4AX+ASy0dYYX2I7V4R4ngAQVx/EQi87in5S64rR1mBvcii
K0pk8U0Vf9l9EX9NikywJlUw7XFZOL7kukK4Jk3J9kniTGzJZI9sz1KOB6RN
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
GT6y+BoP8U0WcpdcH+VY7S+HveO72VsyZePBuZqetXfZQ06/1E1sSOd/2VMg
69lbJG8LyeH3B+dMNfomTtbvyJY1x5Rx3kcWDrzbXdj9PLxguGZzJrc+plzQ
EFWMvIkpQ54cr5aVb0rvaogtlzaAx1/HlA01nqrmPT1YIazdXTRSGZzb8/pg
Gff1qRo52K//VXjh56qj1aK0iOKJxtO1gtygvIla4NbN5x5xXxyrEiYG5o5U
hxeO1EWXTTZeeCwsDyvkFoUVCj+creW+Olguqd6S1fVqc9bjN4cqJO3Hq6Q1
W9Lg4nUPFB3RZWjf1lx0nLFH2+d6RPQlolDZH1aorXc/rklZfAGtDC9G60Jz
0XTA32qvh+hjv0w0D+TJ8gQ0bUUimgPYXLQ6Cf3F+jCaszmDW7c+g1u6Mol7
lBXbc3/hA/jmwgRl4dK4iXSXK00JC+PE8Qtvy/OW3ObHO12drnG4CD93PsdP
dYyZvMWMkN213I1Uzf9FUul4UnKfGi4utYmVtDv/KoqjboXjSBulz6g7pdmk
TeJsvO9YBd5bHGlM0lqD790Bq9cAWWVogqaa2ykqCTaiFDxFU090UzZDLrL3
RBsJ+G3KnkAsdQ1kiz6CLLmlRPK3ZpKTrIXsrAKs1r4jsVTNkLX6EcTC2neI
qwjUwRrA8EqICveSPSWtFMeZFxSadoRkK/9EttE2ADaDc0v7gszQfIUW6dpI
tisxXwX+/Yflze/O3ERm4bg2HrhuuiOulWj5g88/+Pz/4fP38QmvGBNx4T+b
zSbifzOhP5nirhhQsrPwZPSkoRG6T28uGqM/bzYHAKMPAz6DY0dPGBmjO8C5
ugdkByjrHjViaO5YLBBvmUMR3TV2FB+cx1Kd0rdTx8y1kt81JkkGGUtFIsst
Wtg6SILYhMhgu0gF4nxcCNxZjLhfFsPu5+WIdxyCrEmZ4nne7IWXx01z1iSP
DW/P4veG5Sqb5p9+N7T24WTvrnxp5/5iWWNkkaA1KJvduSl17O2OXB5gqhCw
kl2/txh5tzPvbdXWrK7nseXI88OVotf7S+CXhypFRVuze5/sKxW8Aj79MqKw
982J6sHqI1XTWaEFY8+Ccnve7S0eafjlkbzhRDVcH5zXkBdZOpoRWTLx4dwj
pCq2Ai7YVTTSfuHJ+KNj1eLEHQXfSkPyRl8eqZxuuvAEKdtTDMdtzuG1nKll
10SVIK8iCkdylsV11R+pkH04ViV9tC1NUrgmXvspqgTtX5mIfvI+L3m1MHrq
S0SxrDe0SPtmwV5Vhu+1mUcRxejrdSlotuOFmYp1aWjJtmw0e2MmWrDsPnpn
dSqauSkbLfW5h561OY6+3JjJT1meLE1fmcj9bcH1r9eXJIrveyUrspfc778+
/95EgXcyUrHoPu++7alvxQ6/Dt+3PqR85n1jMnfhefiq1X5plstJ7pP5VwR3
LfcpsuxihI0eVwQJrHDhXYofL4/kz88irOen4H2Fd0wX8DcYmqGOoMzkgHkz
YLM9+M5PmjJ01UQnaRaeKX1MdFHXkZyUL4hW4qeQtbQaYqieQDbqx0R7TQvk
MP6WZD/ZTfIA6yw1T0gsTTvJEvDbUloD/PoV0U6CzYlVRKRNfiF78loodrqX
FJqug2ylGiE5qoGjasHvXwdcWv2B7KjrJbkq35EZdtj58UcFc2ZwDLhhhisO
tvTAie2W4T7THH7w+Qef/4d8xpZYvXSeiSXu8E8EXMS/muAi/2L6v5zdfzH5
pwM/W7x5S3RBb5lazMRgZVgs4JyMAR59UF9vth/LBeBOZ01Mv9dN689Bo8D6
G2ZW2k16DMElYwfBTWNnRbSerTpa30YRPZcy0wzZjoksN8Df5xGMlgvsolTT
VrtFXPfz/Nk5WxffksGLb6i4K+IRzqZ0Hn9FgpC3IVU8sSlt4tvOvMmOndkT
X7zuf+oNy5N/3JUvebe/RPByT9Hk8w1p/KbIIknDvmKken/p1NNDlfLXO3P7
X25KffIitnyo9nDVVO2hCunLA6VI5fbc7tLwIt7zM7WK53uKhl/vKfpUfLhq
NDGkYBB49fSL8IKRV6drJc3nn4hqIotHUrfntuZFV0y0nn/Mrz/3WJwalD/6
7nTtt8LDVZz8/WWjGcF5U5Ux5eOtF5/yq4GHX9+YOfostnykdG/JVNPRSuTG
wgf9z2LKFB9OVYufBmdqinzj0W9+GWjP1ixV29Y4uM5zn7B3d4n484581XPX
3coSv/iZhqA8tGxrNhrneRtN35CG5gbmoimbMtC4FQ/RG35Z6LNtOejzxTfQ
JOdraIZPmuaGT5oyzTdx5PqKpKFLXimyJK8E7pX5t4eyvVOQJt+UoRs2p8Yv
sg6P3rI/J3m44FfZi+VxI7cdzogeOJ/gVnvcgK9bH5bfs9qnfOF8aizDdu/I
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
LeViV2a5g5LtDb1sN3hMWMN17HW3Ce5+zD/f3wj+Xx98ZfI/Fp+tp8jYllNG
OIIpUhzZ/8tMHssV/puKL/6+ly+Cayyu4TLBNUj5tpjTNgYpxwb/3eyQjOuI
SydSxnPFvPZASp7n+Bu2tew8IdB+FnqDShSIWR1okAmC9XJ+yISCH6pRCeaB
lB+ufslxH+7ihYyphPHjSnGictRy8ajKaslon2Xy2Gtx4ngXL7z3A8Ojp0ew
YOJ38aLx27zY4bPMgIEznAVjd22qxrs99qiHnDb3/u5cO/rU48DERde9oycc
do2d8Tmg+clhh7bNqc7Q4XVIv8etZnS57TJlsSBbdcBpw0Szby2cxHxuplCx
+7IwfwlotmDBdZpo8l7gr1QHuE51gssUZ7hHcYI67NBHzRzgJwtnOGXuhJnt
CTepwdCOubycHgJlzHDYbpMEe/xz4WRkCVzJ3wHXVjfAla1tcLfhFLz78Q56
feUB+vL4Lby9+wQuHDkLt05dhmudF+H83h9Q5+pzaNvS02T14jPYk0+Q2clH
yGVLf4BC7Mb5GedhVdmv5MpVD8llFXdQXtF1lFd6B7JKfoWCFc9QzurnKLX4
MRRW/Q7lm57Byo2/wY59H2HnwRew48Bz2N30HGoPvoKtB1+jTXtfwrq616hw
/WPIr3oC+euek+mVDyCr8h7krb4Dyzc+w+9zD+WtvAa5FZehaNUlyF91BeUs
+xHlLzsLxcvOQXHBt7C99CyUFZ1Eqwu/I1flNEJR6g4oWbAZ9uU3o7VLdqKy
yOWoILgQFQbkoFLvNNS0cAu5xicLFdtEomzLUCgQBUEmyx1Vsr3RIfdsVMny
J0tNrcmsmTxIm8mB1OnGZ30RqJrhB/GmYuzMDLzNAtKM/aCnm8Div/4VVtrG
w7Yl36ODKUdRQ+pRtAc79E58fVuXdAQOLDoKW+LaUYfvfnQy/BDaHtsMu+d3
QEfqUajBPr09rgPa49pgP95WPb8T7UjsNHTM75jYtfBI967Fx7oPLj0+fHLx
0Y+nlnz75fCSY8oTacfGTi0+OvpzdOu9a/Gt726mHVE/xPlt0WH1k6T2iWu+
O+V3PXcOvo1r6X8d1zLyKrJp9ENU88Tn8AbNFZtS1WVuluyN/fqxQe8D2hGv
OvWI6zbViMMGtcK2StMlLNCdp3urfqV7K14yg8afsfw1L1gBmlecoIk3/NCx
T/yIsdcsN9l1hlXva1qYYpieplWwU/RydqJezknA51089uc4UiGIJVWiOHJY
GGp4wXFSPyTE0mc0iayX7TmuEIYYFJJwzOJQfC4G4wThzMXxRzKBD5IJvZFM
5IVkEk98DjugPgZf+4lmN95P9dDKuL6kzMoP7/P9g82W+HhjjCyejNff2zXQ
JI+t3fExmMV8V8xjF5ASLiBju4JC5AWDmNPPeTZwhyl4f4fgrnxI8LhPGPwp
j4k/8g/LZy5mLU/4/ylSnshaIbAeVIqs4S6LZ7jE5JI9fFuDkmuvl3HtDZNs
5rrguJIyDr7WcrzQKM9n7APLeugKSzzWJwxAKkmYQSYJN8jEkThREzJR5IRc
FGdQCGO1r7neoz38yHGFeOGozHKRSmadpVHYFamVzqsmFK7r1J8FCz4O2RSo
VK7rDWr3LboB++WyB/wk2Y+8BYqH3GxZLyvvy1Pmwpc/SXLkF12qxi761Ml/
8GtU3A4+pL7gWjve7FFvaPQ6qN8f0Iy2eW6d2CHI0dfy8+B7phX8RhcBdgT4
zLCG0xQuHDJnQ6c5H25T7OA+ZvNVCze4a+4OZyhesN3UCX7EbD6NWX3SzAOO
m3rDVeo8OM6dD9UuxbDbbwV0JFTDweRKOFe4FR5uPwp3D52BO+1n4dPNp/D0
2j14/+gFjHz6Ah9fvYMHd+7Bs/u/wfP7T+Hdo1fw6sZLdKH5MhzfcQMtL7iA
li76EbIyfob8/CuwctVvaNUq7Marn0Bq8V3sxQ9h7ZbnqLXtDVy+2I0uXfyA
7t/qguf33sDv999C15NP8P5pF7x+9A7e/vYRL3+Erhef0TvjNrz+4NYruHH1
d/jpwjvUefIlqsYcz9vwDPLWY89e9xsUrHsIRevvQumGu2j5hvuoeN0dKF1z
DRVgRucUHYP15edRZdlP+uK8TrIktxmKMg5AeUY92rr8W7JwwSZUGLcWlUSv
QoWhJWhdzEq0c8kOfZFHKip0S0KFzgkozyYCcvm+aKNbqmGtczLKMDfOv2SF
Ms2sIHOOBNK+3icsnuMAqd8QkDGNCkunmoBxjHfsLBNI+ttfoNppPtq79Ay5
N+042ph8FPZhRlenfotasTc3Jh9GrRFN6LvIJrRl0bewNukoNCUdRtsSD5Pb
49rJI7h+gt0ZdqcdgzrM8tOLjsB5nH0JHbrtCa3jTXFt6jNJHcra+R3aHfMa
JnbMrR05EHDgzZnI1jcnkjvHTuBj/nf27gO4iTVPG71rq77v3ppvd2Z3Zs85
HJJzzhFHbJwjxmAbJxzACWdjMDnnnIwNBmzjnMnpkKPBOeccJCt1S7Ky1O//
vjLMztTWzH517527u1P3uHiqpVZLUNj+6em33241rLshvOd3TfDK/crsO/er
k13R5ayOqDJuR0SZpC+8XNIfdEvwcdVezmujTNasx7UFpn+RgOl5g8dYfZXP
tDsvnbc6Ie83TBU/VfXktWis57MNcqQ84z1ynkmulGeSI+EZZ4n5BmkSvvZm
xVd1a+kn1dXikRUBcrraOgVDw5diqPtQbA0fBUfDS8LW9hAz8D5qv66T9KO6
oaBJzZA3o+mE+7UfcI3W4f4aAISBHzZYOS7tjeOFXfbA97G7hq74vvK4oAsi
DeyAhvd9h1SNsc+28nk1B4qj40hxdO3x0g7vM9splwqOLl7q2iKOti0itFYh
QhPfVkbLFvASm7wK2BqrgNC2A64J7s4Wa2Dc2BZ91TDob1LTPY8tXtGh9s3g
jv+f+0zg1yX0Tf6fx8BUhTA0X0UaWggXjKxgWMdQXrFSXT6ga4b4enZyrq6t
nMTfN1LXEccJ+7ya4mi7IL6Oh5ymY0N7pqpPjOm5IYHJOoprskFBmoYqSJMw
CWEcJiSNNslJY9yNtZ0Xpg1CZTzTBCFpliQmLbPkhE2uhHA4wuc5nWHSDaM7
WVY72YTDSQnX8aKM53RNwFydJ5zyviyasdg3P2J9aLbT6fT8a+OtZIVWGHnH
cif/sfc10ZTXDe5Ll2uCO66Fooo112UlboWKZp8bsoeOZxSV+p7wcaUmNloP
WnCGV5rA1EpLuLVEf/EzpR4vtYCPS+3hxVIHeL/MHvKwzdVLrKFhiR322RUq
lqyBoqVucFcrGC5bbIFn7jugPeQINGVch5LcPHh69Cb0l72EjtpX0P34A/S8
a0Gtrz5B+7svwBqnAXNqftHmvq89MNjSDx3vW6H7fTv0vu+C/g/DqKSgGeXu
+ADJGV8gfVc7JOd8RsdO98Cd8hF49mQQer6MwmjHJNAG6MCeYMHU4ByMdE3C
WM8UTPbPwPTQLIz24dsDszA1NAfzI/MwPTgDIz3Y694JGO2egLHeSez1CAxg
xz+8H0YVDUNw/Hov2nG2H7JPD6PUw1/QkZOdaNeJdpSx/xWk7X4K6Tsfwq59
72TZub8sZGbVoG3Z1ZCJjT6YU4mO7aqnMjadQ9lRp2F75DHYth7bHH+F2h+y
H6W7JqFs9wRIw0ZnWCvPmQmhzntkyLYbeqKtGo6QgntWGv7/T1ycG62Bjmh7
ouQfLSBM+dkr/4zzu2+fkRXyhx9hyz/9LzhtF4/yE+6jk7gzFyXWwc3kenQZ
G3x5Yxk6Fl4BBdFVcAnbfXBTFaqJr4E7ibWAO7aiYnM19SClHk5vqoC9/rfg
slch3Pa6AnttT0KKyR44YXQYyu2vwgHrk7BfPweu60SjQqMc+VOnfPwzdE2a
Z32Ge9Py7EStxZm+rzaXnrWuvf3+fXQl7UPEHe6HDTe4H/wvkR/WHOUOWRyY
mfO6xqBHlLNnQ0rmaQG3OCzvmwtcj5si+uoLojadUPqIRuAUy2Inn2t7Qkza
HuERq/YThOVuPmmyQ8w3zJYRelvlwxqeoq9q+qwhNTPOkLoeZ0BdhzOorsMa
U9OeG1DTmelU12W2q+ssNKnriZtWmksm1L3lpH4w9jYY4S5EEUZrcQKww/7f
fDZUHjf0Ugb3aQ8cN8QxWA0MbTM0paZHjagaKCbVjBU0dWM5U81ExlYzUbBU
TSiWqqkCu6TgrMT7zqqWiKNmhdhq1sDRwPvPWt9sZq9cBZyV1otz67gWLkBa
uMGMiRO0aRmxmlV1strU9P5np5r+osVtv/r8zWdDi79VsglDK+AbrwKagZXi
jaa+vFXbWDGjay2n69rLmHqOCraOEyJ1XBBP1w1b7U7xdH3kM1r2rPdqxnMt
2nbSMT1vRDcOppgmEdjpGNmC2WYhz3yrhG0SIxrX9eXPGMfKmJYZYq71DpHA
bp+C73BYRjqfFXGcT44TZunthP0xEdfpMp/jck00v6ZAOOl9Szi9oVhIc8vn
DXjcFHT5Fom+eOUJHjkeIOssMpnNBtuJAcMDnCLjbKLU8YSo0q1A8DCgWDC+
rkj41CpRlv/TMmhaqQNtK/ShZYUBdKwwhYEVlvDLElMo/skUri+xhAs/WcCF
H4zh9jJHOLXEAcp/tIHqn12gfJn34ty5at0QqFyVCJec4qAxIB1eJ5yAzsNV
8PpCA7zKb4D++g8w8PQr9Lxshc7XzdD7sR1b3ALTvWMw2jkEX998gZGOYXx/
Cno+dEL3u07o/dADs91TqK9pCG7f7IOi4hF4+2wIRlvHYaZ3btHfse5pmBrA
zk9ygDHOhPlJJkyP0GFmdB5mx+YX78+OzwN9koXDwOtpQJ9gwPQYbfH2DN52
Dm83PjQN4/34tQZn0dwwDY31jkNb8xiU1A6ivRdxlz7eA5knOlHGkY+Qcegd
ZO5/A7uPtknTdj6XZO96hHJ23YNt26rg+IFHaPe2KpSdVIBy4q9CTsw52Bdz
Dl3KLEFZ63ajbP8clO2dBplr4nGHDkNXA/cpDq6Oo5Jxl0vX90Kp2s6wVdUG
Ev6gi/arOcmPGAYqIn63Ejb+fim2ecni56+E/cu3Y4Rxv/kN7FkdCzcyHsNF
3IGvxVVTZ8LKqVubKmQno6oUxUl1VE3mXXQusR5u4ZQl1sCpoFvonN8tdMmn
APauPgs7nC/AebvTUGF1AJ13Owtn/a/CteCb0BhUjOrWFeHchifrrsH90EJ4
6nsbnnrdgIee+fDauwA+BRVJOjyuiN7rb2dcN01jXTBIEF/SjRNe09tM5mvG
sB5pbmP0ul7j9EeV8vpDbpP9ATe4Q555gmGXc6IP5tkLTzQ3kIOGaXzWqtMS
lsN5Odv+tJhjf2qBY3uUzzM/iHtLrrRbd6P8iZqF+KuqpYCh7itkawWImVr+
OAFilm6AkKnnL5zX95Pi3kwNaeiLu1RtiVnVwAVCL1JGGobKCaMNOEF4v3Ud
RZislRMmAXLC2B/HT0Ea+1KEsSdi6dmjWU0zhfJzNuY0LGR0XVsFR9mjTZRx
Rt+O+f3ZXI3FfB9TNvseUwcg9O2Bo2aDe7M17stO2GZXoJk4QJ+OWTN2OLZV
TXfF4jgGtrnjV58XbxNa2FQ9/HpGVn/D2OwkDBxgQd9RytaxlrSr6UoH1XRk
fep6ok51fWarhiHzi6YJt13Tmj+v5y4hddzlAm1X6byWFe2zmtZ4m5r+XJO6
IfuDuoXglYa9+K2Wp3TaKJrPM4pj8ww2Loxo+5IvNdwXnmoG8H7RDSP7rHLE
TJdTCq53gZx0OjUzb7Z9dtLhtIztWSig+xVxJ7xvEb3risnJjcXcEd8b/Cbf
m8IPAUXiF8FloifrSxZa1l4lx9ac5zasOcUstdvFrjXP4OWZZPIf+V8Xzdsn
iz7+vAIal2tC5wpDaF9uCK3LjKF5qSl0L7WE3p8toflnK6jB/bnqp1W4R6+B
Z6rrYOcyVzj8kwPUrvSDUo21cEs/CB7ZZ8ARl0Qowz4/3nIUXm3Pg+7z96Cr
5C18rHgJLY3vofdFG7Q/b4KRpj7owj25830bTHSM4u48AD1f+2AALwea+mHw
6xD0fR6AoeYRmB+ko5m+WZjuwR534C6MbZ7qxybjvjw3zsDusoEzR+IlEwga
F9h0fHuGA/M4LBoJnHkS2DhMGjZ8lg1svI4xp3ycDbRpJrCUz8VL+hQT5iax
69ht2igdjfaNw3DXKPS3DULl3SHIONsLyUdasdVfIOd4K9p2tE2csf+dIufg
K8jc8xh273uCjh9/h3JyqiAnowRlJ99AWVuuoOPppehwyg3ICj68ON6R5ZuF
0t0S0bkN+6iz6/ejNJtQlG4VjNKN/SBdxxUlLLNEO9Sc0CWbGCr299oQ+jul
zcsg8rdL/83n8N//AHH/6zeQ65KAziY8UFxNqFWcja2hStIa0Y2UBsWluBrq
TloDnMRuX8Q9+rbnJUWex3nqUnARqo4qp65FlsK5qHIojayE56HFuFOXQt7m
WiiMrobKkFJUG1UBpbhb34muhMqN5dDofxvubyyFh7GV8Abn6+ZKaAq5De/c
L8DjwAvwPOgSfNxwFdo33oChyBLAP7Porfom6oFBjKxRN0zaoBkkv6ceKH+s
7i99rbpB0qyTJJpzviAjPG4jlut1iumcp2A6XJSzV51RkBYnoEM3Dh6stIHX
uCeMaqwHjl4SkEapQBqn4GzFwfeNtwDXMAYWDKJhUstW8VHNVNS/wkfCUA9R
kHrrcTcKoki9IEQarsP9OBARxmuxtQEUYeqnIAxd5EwdCwld3Ugwr2YoYGpZ
STiGaxSkmSciLbyBsPBGhLkynvAtHthhdxw3bLErfB97RovH/0wdgdC1xZ3Z
EghNa+CbO8O8qRPVr2Neh01zaVfT+R9Kf/+YX33+vp1yzFlps6m1CmH8N4yR
7T8wtazPjmoYy4c1DRcmdExlpJ6FjNA2k7G0TBfmNI3nJzSMyC51A1avujF9
XtOKNqRuxh7XtBTOa68W8HQ9CELHncPQdiZGNB3IL+q23DbN1Qt07TVDc1rO
fTT9EB7DeNPCoH7YwjuddexGda/pJ7qhZLdFtoC56uAC2yJ38pV2JO2lSZrw
g91e3lvn4+x3XlfnWiLLOVMbS+ebAm8t/LL2lvR1cKn0QfAd0YPIclZPVNnc
m/UlwrtBdyQPfQqENatyyHyzVP5nozAJbYU23F2qAY+X6WCfjaBzqQl0YJ9b
fjaDd7hD9y1ZBV9wb36+dDW0/mQPrdjo9+rY6BVrYPsKV5SnE4RKjILhoUMy
lPodghuB2+DZlhPwdscN+HC0AoZvvYHR+7gvP2qBrhft0PbLF+h80Qp977ug
8207dH/shjnsL32QBhOdY6jrcw/0Y59H28cXxy7mBhiIPc6GedxzleMXM0Pz
uPOygDlNAEHnAgeH/d1lgsEHPiEADoOHTeYBl70AC/g+j1gAgsUDDpMLXM4C
kGw+sBn4uTgki7+4ndJx5hz+e2bwa8+y0fQ4fh8YnoGJgSmY6JuC9uYhKKrt
g7RTPZB+vFex7WSPNOvoV5Rz7CPknngPR863oINnPqGcnQ2wI7eO2re7UXH2
4GMq79BztDO5ALIjT6LcqBNoV+QJdG7LBVSQcovK9cmmMuwjUZpVCEo38Uep
eu4oU2sNumK/Ge3W84CNuDuHL2YZRPz258XPmVWOcUT+9l8h/B9/C7muWVRN
zjNZQfpdpctQnN4I5xPqqKqUepS/pQblbaqEuzEV6ObafMWVzdWoHG9Tht0+
F1+3OPbxOLIcFeHtbiTUwp3N1dAQUQb3sMt12GDlccSqyAp4sfEOPI+pgOeJ
1fAZ52tsBXzEvbrZ7wZ8jauEL0l10LalCnq2VEN/VAmMup+GFosU+MUuDZod
cmHU8SBMOBwEustx6DfdCmNqycC2Ogk0l7Mw5XACplcdg1mrQ0C33AtDZhnw
WTcI3qy0gFFNPyAM0oFrtgtI8+3YxixsYToQSqMNEoGvvxkRuhHUmLan9Iu6
ruCLmrmgf6WlaETVWDyqaigZUTWRjqmaSSdUzSSzqmYihoalmKVhLWNqmssY
anrYZhMxS8dWQpq4ywlLf0RYBiDCwg/HF8cHBzttjmOGfTb77rOpK3YZ27w4
f3n14jFAjg7uzKoWwNVeBQwzR0Wf4apfmtT1PL+qaavgzqzSqf4nm3/1+c99
Nsc+475raqNCmPwNY7RKZVJD739UrVQv69Q3A6GxPUUa2ssJA0cZqb9axtVb
LeHpOYt5uvj7qOOq4Og5Cz+pmRJfNG1FbAN/MdcQ738ZbZCQxuEUzzhayjfe
LCDMEgUck030YV2XjhHj6Hm+9W4R33avcMHhsJjrdEzIsN/PnrbZzZm03s1k
2xzksF0v82dWn+f12x3hvbfO5VabZTEfWu+cG3A9Nz/qnj/ycPWZ2UrsdpnX
eXF5cJH4YXQFpyu8hHk/vFRwN7hY3Li+RFQZVCJ655goG1qmDeMr9KHuZw34
vMwAOpYZQevPpvB5iQW8XWIJH3BvHvh5NVz62RYKfjCHCny/cdkaeKnpDzd1
/NAx3E9Om29AZ6zDoNxnPyoKPoYexZ2EF1nX4c2Bcvh0/j70ln6AyV/6YeZN
H4y964GOly04bdD3oQ96P/UvHssbbhuGkdYRoCnHkLHTQ9jnyb45YI5zgDbC
QPOjTNyTCUTDfZkxQ2CXecDnCBc9JrGvSmN5+DabFMEUUwRDc2LonhJD15QI
emfE0DMtgv5ZIYyzRMDhiYHHE4KAL4YF5ZInAh4pwHbz8Wt9M5sxx8L9mgFz
E3SYHafD2AD+N3aNo9Yv44ob1VPStNOj8pwzvehI/iAcvtaLLucPonMFvXDw
9Cfq+JmP8pPHX6G8PY9R1Zkm6vD+Rurszlrq3PYKxbm026gk6Tq6s62a2hWy
D2W6bVXs8c6gjvpko+NumdT1wH3UGfcUFPmDAUT8QQuifquKe/Ny7DLuz79d
AtH/+APE/vZHCP/nH+B0yGko2vYErqU1wq2UBnQuphrdTKwDbDNc2VyDalIa
qDsZd9GFtHtQge2uymyEQmx0Ebb4aUodVOF15TjVSbXQGFOJHibVorqEGrgT
Vw1loaVQG1QMd7HVz+OxzUk16GNcBXqKXX629ja8wia/wfmAvW6Oq4DWDYXw
2eEItOJO3RZZDt24i/eFl8MI7t9TIRXQ63kWWvW2QLteLLzTCoTH6p7wUHUN
PFVbDc/VHOCJ6ip4quoAnVrBwDbbC4TVUez4QWBb7AaWyQ5gGWKf9VOBr5cM
dJ1IqlPLU/ZKzUT0XtWAnNJwWmBorRHRdJwEs9oOgikdB/GErp10QneVdE7P
WsTCYWvqSulq+rL5FbZSjpaXlLAIkhNW6yjCEsciUEFY+FOEOXbaDBtt5vOt
P5t5YZMXbca3sc2L5/u5fBvbUJ7rrWmJSFVzINStYFTf+lW9uq5znaqWyjs1
HeyZ7q8+/zWfNZQxUeFoG6tw9Ez+5pnH/y99Gtq/qVfT7B82xPs0xg4U19CB
IvSdKELPWUHorpESum5iQl85p86XWtDzkg1rWwle4/dwhuF6Oc8wREAYhIoI
o0gFYbJZTphvlZHWuTKu1TbauJ5/+5hpsoRre0hG2h1dIBxOkaTTOZK75jKD
FXCLxna7OkF6XiOJdUUSmn+RYGJdsaQ/pFj8KaiA1+Z+ljHpepX9KbiY9cD7
wtANk9TmPNPttCtrTvFfBRVyOzYWc6o3lggbNxZL7kbWSJ66ZEiGlmrD4HJj
+LpUH278pAlvftaDr7g7f11iA++xxU9xmn92hteq7nDsZwe4t9QRqlVdoUbL
C+p1/dBri1jU4LRzcW7zSZ+jcGXDKZQXfgjubs2DV7ur4d3pB9B84zX0P+iE
vvut0P+kHcbeD8BQUx+0vW5HQ19HYap7BiZ7pmGodRTbPAF07PHMMA0mB+kw
P85BjCkO0CfYwJ4jF/syh4EtZmObSTHMzItgcFYCX0bE8LxXDFXNUij7KoM7
X+Vwu0kKxV8kUNoqg9IWKZS3SaG+WwrPhmXwblIKvXQp9loCDK4EBAIxCBZE
/+Y1ia1mM5W9nADGLAtmJmhAm2BRcyNMKW2QLn/1bl5+6MacYs+lQcg+2QRH
zrRBXuEYOnDqM8rd9wRydjbC9qxKuHn8LXXuwGPqeEYJ2hF9HmWGHYbjG49B
3a5GdCb1NpUXny8vi7tEXfHOQScsN6LqoIMod008Cv3RCMJ+0IfQHzUh+A9q
sO5fV0Lo75dD8m+XYbN/hE1/WIp9LUGFuU9QQWIdOryxgipIqqdKs+6jq6l3
UX32PdSw6xFc3/YQSjPuQvW2+6gotZEqiq+h6rHBFXhd6dZ6VBZThZ5vqkB1
2Obi2Ep0ZWMpKg0rQ0/jqtDjhCr0Kq4cv9+Ww9NN5fAmuATeYZM/p9XBF+x7
S1INfIouhc9uV6DX8QI0R5XCl4RqaMNm4302GI7CPgcXwmurZGjSjoBpp2Mw
45cHs+5XgI63p686BcxVp2HGOAkmVngAXXMrkJZngVh1HliWJ4FpdgSYhnuA
pb8DSJ0MYGptQV/VXeW1qlri9yt1RePqq2WEThhFGkTjRCpIowgpaRIu45qF
SbnmoXKuxQZE4n0T0tRTeQ046byqrYDQ9BYRFsHY5vXY5XUK7LMc+4xtxv3Z
HNtsjvuzuY/SZvStN3vg++7fbFaOO+vZII6GOcVRM6b4WsbA1DSGj2p6x55h
iytVNVUaVbVV3i969qvPf8lnjvL5Brg3G1p+O6Zn8LcPiV97wdBKhaZvfueT
8toVWkZyhqEjtWDgjI3G0VuDXfaUEfre2GhfKWGwVsE3CJRN6zgKPmlZCYf1
AqQ8oygJzzhGyDWNl3It0uSk1TY5abdPQdjuIicMI4enLdI5xOrTlMDlioS3
5pqAdM0n2B43uHOBt3hM97xhls/1yZmQYt7o+mJ2Z3AxtymsVPI5tnJheEMx
syWoSPw0tkr8aFMFvSH4Nr08IJ9T53+N+XH1Cdojjytk/urjM+fWHKMVO2dI
6pepwZPletC8whq+4BT9pAeXsQu1P1rAm5/s4PVPjvAU+9yr7o/qtdZCiZob
3NfyRPUGQVBhFgIlVqHomfNOVOl5GJX7HoJXwefgaex1qM8sQrXbS+HNiSfw
5dp76K3tgI7GZhh+1g+DL/tg4ss4jLeOod6mfhjH/Xm6fw4memZgom8WZoYY
MI89pk0wgDNLYpe/jWGQzAXcl4W4JwtBtCCBngkJXH0ugVsfZXDrgwxu42Xp
FzlUtVFQ005BdYcCajoV2GQFNPYo4N6AHB4OKeDpiAJejCng1ZgcOy2Hz1Ny
6GLIgMaXgUAoBbEQe80XAZ+r7Of4vQBbTTB5iDVLUDMjc9TU4AxFG6YrPn4c
QelneyH1ZAccvNqH04u2HX4D2w+9hG17H8H+Q7+gU6feopz0Oygr+QZkb7mK
MjedhkMxF9CtHVXUkY3H0UH/HVSuSzxKs9mItlkEojsBuxSxVhFoo6YLhGs4
wablVpC4xBAyftSFtB/1Iea3P8PG3/wLpOrawzXcma9n3EfXcEqwv3U7H1E3
cx4ql1C35zHc3PYQlac2UMXRFYpLm6oUBZsqqOsRZej8+mJ0LbQUXd9wB/Lc
8uCk23k45HIajnlegptu+Yo7bgXURdercNrhIlywPw8FTueh0e0aNHjfgAqf
61DlUwAVngXQ6J4Hr90uwsf1hdjlGviaXAvt2OeOLTjR2HOPE/DSJA1a7PbC
cMANGAkqgSn/W0D3vglsz1tAut2GWcfz0KLpDU3LnaBJ1RPatHxwh/aBXi1f
GMaZ0vSDSU1feK3mKH2jZszoUTNjzWl4i3jam6RcvXg5aRgnJ4w24YQrCOMw
OWGKYxaqIMxCKNIyFJEWaym2tqmItcJawFH1kBBGgUBYrEc42GZstGUQvh2I
DfbH631xfOD72DOFezNFGK5WEDrWMo6WmZSjYSTlaJvJuYY2iGdqCy26Rl9u
LVe1r8cuv8TGVuHu/KvPf8nn79vp2WA/V2GXbf9TwjWyU+Xp202O6JjBGw1d
aZe2tYKn70aR+p4K0sAHd2p/BdcwUEoarheShsFSnmGYgq3nI+rRsl/4qu0u
GdALlYwbxgrmTFNErFW5CtLxoJy35pyC53xugWaRMdZtHD/+yTxb3OtwXDrt
cVXK9C8U0AOLhNNhpWLG2tvzY4GFRHvITXZ7RCmtObqS9zKqgnwbX80diCil
vwwqktyNqZQ1RFcKqjZVCHFn4n+ML5t9ElnCqowsEeYHXJ2ptogTdCzXQl9W
miPGSnuYxD4P/2yOWpZaw92lNnABd+jzS+zhxjJHlL/CCT3R80fX9dei+/oB
8NgiEhpsU1CF41aoddsBb9flo2t+e6B63V6o2ngAyjYfgsL0I+jc9gNwatde
dPPcKai8lQeVN/PgYU0lvHjwGLW+/wpTuDfP9M8CbWQexnuVc+KUx+g4MD/9
rSvzWHzssnKMWAALpAh3WzFIsKFSsQz4Ajnc75BB4Ts5lH9VQHkzBZVtCCo7
EFR3IqjpQlDXA9DQB3C3H8GDQQRPRhG8GEfwfgpB0xyCVjoFnYzvmVdAL1MB
Yxw5kELZvzkt5IsQfl9ALBoHzc8w0fwUCztNV4z2TUB7ywicKu6H3KvjaNel
LsjBXXr70feQc+glOnmpDe078gJty6mBbellKDvpBrUdG523pwHt2nQOZQXt
hiz/bSjDfSvKWhMH2+0j0G6HJEW8rh8ka7tBvLotxC8zg4QfdCDrDxqQ/q/a
EPFPP0LIb34H20zcoGrHI6p81xN52a7HVP3eJ7JCfL8I9+e8LTXoREQlyo+u
pApjKqmL0VUoP74WqrDnt3FPLkltULoNdVvroS6lFmpTa6EOpzK6EqoiyqjK
TeWoPqYCXiRWw1vl+IbfLaj1vAyF9kfgluMZKMEm1zqchY/OefBu3W14uP4W
PAi8AY8D8uFx4DVo9DgGr8y3Q5v9MejZcBP6N1XCYNgdGFtfBNOBRcBcVwqT
HnnwwTgKPqi5Q4duFPSbZUC3USx06odBh9466Nb2hmGNNbgXGC90rjSkDai6
MOk6UQtcnWQpVzdFTugnygmDLTgxFGEQhQjDCDlhHCEnTSIo0kyZYPm8oYt8
SttYSlfVlTBWmsgZK01lLDXzBY46tlpjlYyjYavgaDooOFqOFEfbSc7RcZYQ
ei5yQs+e4miZy9kahnKOpqGC0LOUc4zs5KSpIxJYugLNzGGhQU077cSSZf/z
/NLlKvfUtH71+a/5/N1mQlc5Nmz3LYb/iTGw34V7M8zr2kp/UTMUDWlayea0
7WQz2o6yaW1n+bSuG463lK4XJCD0I/mk7gahQNeP369lTzarOwqa1N0Eb9W8
WO81/ea+6m0kBs2zhHTr/Xz+qsPktGnmyAud8Knnepu5T4xSeC8tc3nvHQ8T
HW7n5me98tg0j3zmq9UniXvOJ+fvup1gNfpe4lSsv8l5G1dO6wgu7q8LLWaU
RdwR1MZUiBriKkWPUup5H7eUD92LK2dWJ9VLW61C5HNLDFHlEm30fIkuDC4x
hc4lZjhWMLncGXrUPKBU3RPytLzgiJojuqrnBxXWSXDJIgJurYqEZ6574LH3
QSjwSILCgDS0LzAKpXr7oiw/P4j194SEYG9Iig1Am7b4wKZkL5S8dz2K2+EL
8XsDIPVYEFVRfYOa7JpGzBEmYimPAU6wYFY5T25KeayOh20WLI5jLHC/uazs
zGKRDORSBSjkylDAFVHYZQTFTQgq2mAxVe2AfQbsM0At9rl+0WfA3Rng6SjA
6wmAjzMALTSALiZAHxtggIMW08+m8DoKunH6WTJg86XK9wOEnUZcDh9xGCRi
07kK2hRTMTOGO//gJIz0TEBh3RRKPN4DO851QM6JJth7phkdvdSOtu17Cjm7
HsD27XWQmVJEndzdiM7srEeZkachJ/wYyli7C2X5ZqNsj63UkbX7qTTrGBSD
bY7UWQ1hGrYQtdQMIn9QXi9aA5J+rwbB/7wU/P/xX2CnpSc8Pv4Kle19qnhw
4AkqyXlI3cq6T11PrqcuxNUobqY2ooY9T6AUpwp36Ud7H1M4qC73IVRk34fK
lHp4uO0ePM59AHez70EF7r9V8TXoYWYjPMd5m1EPv8RXQ31YGTyMq4J3aXXw
UZn0Oni3pRw++eTDc5dzUGl9BEpMdkKJUTZUGWbBfZ0MeG2WC23BN6EtqR7a
cZfuwtb3RpbBYHg59AQWQLNjLjzTDoKPuuthzmYfcNYUAts+Hwibi8C1PAU8
88OIb3RATuplS4fU7BjTqh7TXJ1ELtd4p4wwylIQhmkKwiAZ76PG4/3VOAVp
GC3jGsdICeNwOcMgQEbTdZHOaphIplT1pHRNK2y5C8UxclSwDWylbAMbIUfX
Us7WMVfgXo39NZazNI0lbE0TIUfNRMJeaSznqJlSHF0LhE3GPdoVxwNxLdyB
NHeFfkPrjsoVakGnlyxTOfPzcpXLy1ao3FP91ee/7LOpCqFpqULq2qqQho4q
pIHDf0HslZ9pVs03CASurj9zUN2ENauuL55VMxTO4EypGQlGVY0EA2qmgmkN
Oxpb075jWN1yclrHR8wzipZyTbZICdNkGdM0kZgxipmZNIxjTBklM0eNttIn
7Q5IBJ7XJDz3axzCq0BI98kXjvhcFXR6XGB0WB/qnHW/TBuLLJO2hN0WvvC/
Snvidp5Z73SBWet8gd7lX9jU6V3wLN/mWO85x/PTl7yvcQqCC0RPUqr52O/J
hs2Vgi6TAPnYEhOYXm4BtT/porafLGHgJxtoXWILTT/bQdcKVxjUXgujxhvh
oVEg9doyEQ05H4TWNfsgz3kzynaKgOMe0XDUKxh2ePjBofWhVGZQgCJz3VrY
GrIWYkP8YFO4N8TG+UJcmhe1dacftfmAJ4Tvc4Hiissw+HEEjbZMUHNd07LZ
gXlgThFAKOdVzPOBwDYLuGLcmcW4v0pAgl2WSmQgkymAUlBAUQgA/1F+TZAA
tz8DlLd887kS+1zVgX3GRtd2Y597ARq/+/zsu8+fZgF3Z4BuFkA/B2CQABjC
rzNEIHwbO43TgY3uYChgjq9AC9+MXpwLwuMsKFh0DlLOy5vGRjOmmDA+MAlX
ygcg5VQPbDvbBscKhtHu081o2+FXkL33Kcre0QgHdz9AV0++QzlJhSgH9+j0
8BNUdsghlB2Yi45HnUZ7AvagGLMNEG26FqINPCFOyxli8Pcm6kd9iP9JB/dn
Lcj6/QrY9rsf4ZiRPRTtfgQ1uY+gOK0RYXOph4eeU5WHnkPN/qdw/8gvUHHg
GdTsxjbveYSeHnqGGvc9gQrscz3OywNP4Je9j6Ex5/7ieSsNmXfhl50P4DXO
m+33oAGbXLKpAl6l18OnzAZ4i5dKo19gZ+96FcCjiDvwPrEKmpKr4Isy+LGm
DQXQoX0YPtmfhSdOx+D96lPQ5n4Ruv3yoH9dPrR7H4NmvSAY1Q2HKZdTMOdf
DDSvWzDnnA9MuwvAsTkNpM1JBdfmmJxhtk8+qu0lGV9hNs9e4TbNUfdisbUD
+BytDTKOdriC0I3C7sbISIMYMcsgUjyj47UwqmFCTKjpCufVDKVsHUfcpYMo
0iIMERYbKcIqVEZYB+NlECKsAvG6AIqw8FMQlj4KwsqbUs5x5qgbUthn3Jed
0eIcOwsvSmkz38IDCEs3eK9tXHJz2cr/8zLuzJeWrvjV5//AZy5ex1Izxc+x
VmHqO6gw9ez/S8LCmdSx02/XMGcPaFkCQ2+1lNRbIyb03MSEroeI0PUUkrpe
eOktYet4CNk6dmPv1Q07WrU9uVyjzWKuSdICYZHOJ212CLh2+/jc1UeZXJez
PJb9wekJ8/TuSYcjDK534QLpc4NBrL3Fng8pJic2lQmHtlTyx9ffHBlfd2uq
La5C+im+SvIqvlrwNKaS/zC2Uvg2rpL1Obp88mlMBXk3soxevrGIdi3g6nRe
YAG7IqSIVrn+FrPZ0Feh9HlyqS30LbOG6p9Moe8ne+j52RnaV7hDi7oXNOkE
QItJGHy0iEIFFhuoJ/axcG91LFS4RcMFtxA47R+F9geF4x64HqWHhKK0qDCU
FBaIl+tRfPRa2BTrB5EJPhCd7YXC09ZAVK4blFVdhpnuWRhrm4Tx9hk03TOl
oI+yKOYkgTg0HiwQIhhhtcA42Q5iAe6vYtyZZd/68p+7/OdfH8cAbnzERrf+
yejqjm8duh536EbcoR8MYp9HAN5gnz9jn9uwzz3Mbz4PEX8yenAxuE9jo3tx
p25bHPuQAwt3aZFQggS8xS6N30OUY+LKMRgemhmdg6mhGVTyYAbtuzGLjt6a
QNvPtKLcU7hLn/qMDp7+iC5cbkEH9j1COWnFkJWQj7JiL6D0jUfR4c2X0Omk
q7B5dQLE2G6COKtQiDX2h1gdN4hWtYEty62wz4aQ+Ht1iP+nn7HPP8BlY0eo
PfwUKvY/h+r9T6mHJ16iuuOvoBb7/PDYC7h7/CXcPYqXh36BhoPPoXT3E7iz
/RGUbXsADTvuQwN2uWHbA1SBbb+Pb7/c9Qhe7bwP73B3fphQCy8yGqAl9x40
Z9/FnbkefY0plX0OvE29Ci9dnGfXklKDmpNq4OvWBviaVAGf156F7lWHscfn
4OOaI/DBZht8NEuCZoM4aNJeD19WBkGrfgr0e56HkZAyGAsphekAbLPXDWC5
5APfOR9xVl+VTlkfkjbrrhd3aTryprTX8Ni6oXymbtAC/t3hMTQcRPNq5iKG
minJ1rBkMTWsBDR1S9GEhgV7RsOcw9J2lpD6axWkUSj2NgonQkGYbpQSZqES
wmyDlLBYLyUs/zhvY9FnRFj6IuW8OY6mKbbZRHmNOvyYD17vjTuzFwgtvWDQ
2G6yZKVmaOGylf/HnRVqKtewyb/6/Nd8NlVhqZqqDKgbqjTh5/yirqPyEj//
vzLKf8NzNc3EelUdoBusAYGRt4w09BUSxoFywniDjDAOFeN9LzFhFCUijTYJ
CMO1I4Patv2t2l7iedNkBc8yW0za5ApI+wMCcvVxknA+yyU9rslJj8vErO2B
6ZnVp9mE302CWF/EoG0sEUxElvH6osq4bZsrGAOhJV/719768iamnHgRX00+
21rHf5hQw7+/tU78IrORfJZUw3qUXCN+llYnfJRRTzYkVs/dT6xi3k29R3/v
liqb/tEYBn62RbNLnaFlmR0U/2iF+pe7Q7eGHzTrBEKrcTh8td4CHc7ZUGYf
Re23cqMq10SiMr8tULxuMxRt2Az50SlwMHYzyoqMQAdT4lB2cgiK3uyHYrf4
QUySP0Sm+EDUDi8IznGAm7cvwdCHCWzzNMwN0XHmgD40h21mIw6dj0jGAno9
dROdG3BDV8Z8oI1Xg22W486MAP0Fl//4JaUAGnBfvvP1T0YrO3R117cO3YA7
9IMBgKfDuD+P4/48860/dzG+jW8Mcr7nu9HD5LflAE6fskuzKGieVyDGghxJ
xTIkFkphgSsELosHAuWcaxqB6OPzMDEwDZfKxuHQTTp17OYEdfL6MBy92IHO
X2hH5y91KnYdeIJyc+vR/j04O6uo47urqYu7q9DWwN0Q55oKW5SfxWIdAVvM
grDPHpCg5wHJ6o6w5UdDiP5nTYj87fJFn/PMXaDuzGu4d/otPLnwFqpPvIKy
A8+hMPsBXNlar7geXy0qiK4kC0KK2UX4Z6bBr2DhiW8e/4HXGVaj16nZRscT
I/Wr9gzdtd/dd992x9Az2x20Dtsj7C7n85wnHpeYzwPyGY8CC5mvgq5zRn0u
TfYGFEwMxFVyx9JqxRMpNbLR1DrF4NZKxbDPIf64w07eiNcpwVD0HVHv1lph
b1KtcDi+WjoVXyMf21QCfToRMLIyHqbND8OU22mY8bkEs/75QF97E5hri4Dh
WaBos8oSftXx5/dqunEnjcJ5pMV2EdfqiJxcdUJGWh+RExZ7FYTFDmxtuoww
SZQSBqEUQ11PwFBbRSM0A/ik3iaKNNxMEUaxCsJok5QwicTbhckJk1CcEDn2
WUZYbJATluvR4jFBy3W4R6/9brMxttlUytFeIyVNlF3aG3jm3sA294AXWiYN
+ctWrji1ZJlK4TJVldIV6r/6/Fd9NlXhaFqqsHFn7tMxW8yAjjmO2X95JnUt
/6lHy2jwpbqhsEfbTsg28BbxjQKwyxvwezjeHzONUhBmsXLCPEFGmqXIFswS
2JP6/jOt2r7EhFmynGW3V852PCJjO5+VEm5X+KRnAZ/rf1vCDSoSMV0vsCbd
L/B6vC4Sbd6XOZ8Drix8Ci4Uvw4tEr6PK2cOhN1pbQkpZjxaf5tRi5dlobfp
RWG3Z8rjq9hP0mppD1JqGXX49/Xu1hrJg4x64cOUWuGrzPusp6vCBB9+0INO
3J+/LHFEn1Y4oXp1J6pBzRU90/SB9/rB0GEZB59sE+Cx0xZ47pkBV93j4LZn
OKpal4CKNibDtfB4uBCTDBeT09CexE1oV3wIOpQeCVlpwSg+3R9i0r0gLN0d
1qXZw7Xbh6DvzQgMfBqHkXblNTLowJ7hAHuKhTgzHMRmctDDsVPoVK8rujjk
g66OeaPLk+7wgLMbuIrpv47z968x7OutT38a5/jjOHTt9w79oB/gCfb5Jfb5
wxRA8xzgXgzQ+8cxju8ZIv+K0WwEX2hymOApkEgkgQXetznTAlK4eF6Lcjx6
fGACBrom4Hz5LMo62w87z7ZB1pF3sPfoe3T5Wp/i5IUv6OzZD3D+1Gt0bt99
qvj0G2pn+m0U47sLtnhlQ5xLIkTjDh1tEQwJZsGQahIIiWoOsHmpJTbaAGL+
WQ12/8tSuGy+Bt3afV9YklHLLkmsZVYk1hGV8bXEnY0ljLvrCiffxpRMNaXX
zrdm1s50ba0eG0msmBnOrJ3vy66d791axe6OuM3pjy9aGE0p4w5uvTPXFlE4
2el+fPSNQ+7QI5uc0UfWO+aeGaexe3TSyBG7E8SXkJtke2QJqy2qjN0eU8rr
Dcsj+l0O0Ead9tEGIu/werfWCfsTq8SD8VWigeQ6QffmMlHHunOKLvscGDVM
gH6LZBgwioAh7Y0wpBEOU1oRaE4/Rj5vkrjQZRjNbtHxJejmCTye0ykx6XJd
QThdkRFO50WE/SkxYXtEStgcEJNWe2Rc81zENc4GjraPiK1qOcNR813gaIfL
CcN4GWG0BXehOClhHI1NjqQIk3Ds70b8e7cR/97hpUUoIsywyybeiGPoTHF0
rSiOhoGCpWkoZWtaCjgaVlL8mgpC3QZmNW3JBlXdnReXLvuHPGyw8jjgzeX/
vX1u/b7df77Pf7TZSjnWi+OswvtvFi4OX89lL1vXAbo1TYUfNSzEw9puIo5B
oJhjGCzlmEQqOGabFRzzJBlhmS4nbXYqeKv2LXBMEsb6dUJGOzXDiT7dLYJu
o60L3abZC72We3h99kcZEy7nZllrrtJZngXMQdcLRIvzecYLu8Njj+yOMe46
XSAe+l4nv0SW0Xo2FPW9XFfEbFxXzCr2K5g/43pm6LTj2aHKDbenGyLvdF3f
UDRyzP3qzLn1t+bzosvZeRG3ybt6DoonS3RR9VITVLbEFN1f4UqN6QZTbbqB
qMFIOX9uIxRZBKM7NqHQ4JIA9d6pULU2A531jUCFGxLg1qZMuBKXCqdjE9CJ
pGR0LDcZ7ciMRDvTI2B7TihK3bYekneuhfCc1XDoQioMvRtAg59HoO/LCIx3
z8L0CAMYsxzgswQwNz+JivqTqGNdTujCgDdcGfWFvEk/yJ/xg4uzTlDMCAaG
vO8/9BlXaLiHHS7+gn3GHbqq7U/j0HW4Q9/FT3+IO/TzUYC3EwBNM9/GOLqV
HRobPfC9Rw8RfzJ68Hv6cXqx0Z3Y6KZ5CjrmZSAUiEG4IAY+KQDWPAHzs0yY
naABe5ZAHW3jcLiwDzLOdMP2061wLK8PHTjzFe3Y/xRycu9CdlYlytmK9xN2
3kMpW66j5I2nIWXDUUjy3QlJbhmQ7JYO6U7xkGzoB/HqzhC/YhVsVnboP2ij
3T8sh6vGruKbUbdmboQXTON9pJ7Pex9Nv93zkN226z5v8tAjwdiRJ+L+3fdl
A+l1jNEdjVNj+x4IhnbdEw+m14nG0+vEs3vuS+Z23ZNPpNWKOjaVTXfFltNH
M+vEE1l1sunMWvl09G3ZqOcp0ajLXlG/825Jt90OYbNNLu2DSdZkm3Ema9T+
MNkTdkcykNpIjaTWUWNbaxQjW2up3tgSqiPgFPXVJhP1WGXAYMAV6I6rhN7Y
MhjAXXow7DaMBV1H497n5YNawZN09ZhOpt2ZeWZQiYwZeEfO9rkt47gWiDjO
V3mE00UuaX9azF11Qs61PEDRTNLRuH64cFTLmTmvbjDLUrVnsdXsOWwNJw5H
y2WBo+klJbQD5IReEMUxCMb7rspxjY0ywnQd7tUeCo6evZytaaI8Hihn6ZjL
OPqrcMd2xd3cF/drNzlh6kSRBhYwpaHzpHGl5vLLy5arFCxfiT1e+Xfh8zv8
93Wr6393Wgdvr/P/rc9qpt+uo6Fhg222VyF01vx3z29IXdcRvq47MLTtpZ80
DIXDavYixko3clZtDXNS3WNhTMNfPKq5XjxrkChkY4cJ00xy3iB1km6aTmfb
7FyYt90notsfEc05nRBMO59dmHI5Pztldaxl0vX8/HxkqWImukI2GlMh6okp
57ZGl5PvYiuFzxJqeG82V869SKxmP06qFTxIqRc1pjUI61PquXWJtbyapBp2
TWLVXENyNb0+vnK8LKFm7kbEdcYvqiaIXGoHjOUu0LPCAT1Z6UqNqvugIa11
MGgSAR3WsfDSMR5dd4ykLrptgsue0XDBbyscCtyM0n180MGIODizOQVOJ6ag
o8mJ6Mj2eHRoz2bIyQmDzNxQ2LpzHURu84CsU9HQ+aobRr+Mw3DrOEz0TMJ4
/wzMjDKAQ+cDm8WA0v4s2NdqD+f6vNGlEW90ZdwHrk37QP6sD1yn+cPlOSeo
ZMeBFHj/odEj2NnC7x268rvRNd87tHKM437/tzGOl2PfOvTXWYD27+PQf270
nzv950b34HVKoz/RFHh72eI8vwW+CEg2b/EaH4vns8ywkPJ44at3o5B2pg/2
5Q2hIwVDaNvR97Dt4EvYtvsRZOXUwq7ttWh7egVkR1+FnLAzkLXuIKR758Bu
t0w46L0bRdmGo1h9X9is4Qxxy6xR7E/GKOr32pD9L0vgnn+K7MOZD9KWg0+Z
X488pTWd/EXSdvCxcOzEU8HIiaei/n2PpIOZ9azRQ49nJo49FQ8deizpy6gX
TOx7IJo5/Egys/e+bCS+ktccVjI6tK2BmN3RKJvJaZROpVZLJtbmCbv9rgkH
t1bLJjLr5RMZddKRzDpyMKWcN+O2R8gySRGOmO0Ud5rtlXZaH5H2rDkn6w8s
kHf5H5d3GEWhPpu90B5RDC3JddCSWAMdcRXQo5zDgTOwqZIaiCyT9HqfEk5q
bJpkG+2cZlgeEDKdjolY7pcEHI9rYo7LNRnhnCciHS5JmDYnFNPG2bJ2LfeF
Ng2DmXE1/SGGhs0UR28jyTHcIiQMNko4ul4yNv59Y2mYitlqRhKWqjGPrWZD
JzQcBWw1WxlLXV/KUteTcrQtsceeMsIiCHekIAVhGUh9O2/QlyIt/BBHeS0k
XdOWMV3j3yrPA1S6XLDs78fnJyt1VWga1iqz2qtUprStVPo0jP/N16//L73+
Sz5zNG2weU4qhJ7bt+i6/h1kzVlCxwv4eqFyUsdnYVTdWsDSdJOwNX24LE0f
JlNrLTmvs0FA140Qsoy3CJimcZwWg02CWdsDCp7TGSHX6SyXdLm8QHhcF5J+
t8Sc4GIpPewOf8br2tC485nW4eDr9L7YckH75kpBU3wV/+3mSs7ThGryfnIt
+SChhnY3sYZdn1QjqE+tF9/bdk/8OOf+wtPsu/z7mY1kdUY98TCrgfci+x7/
bny+4IOqGWL9bA+0FWsQU8sffdLzRnXqbmhALxg+GK6HNxbh8M4xEd55ZsIT
nxSoDciCvNDtUBazHW5FJcOZuAQ4kpqE9qXGUblbI1F2RhTk7IyBrF0bIWn7
Otici23Z6w+/PHgBg5/G0WDTMAw2j8F4zwzMjinHNr5dt6i8LxPbbAune3zg
bJ8nXBj1gsuTXnB12huuzSiN9oXrdGw0bTU85x/63pT/8pdE8c3moqZ/Nw7d
8b1D937v0MrjhMpx6GmAlu/jHIvHCv83PboPr+vGjynHOt7PUfgxOQiFksVz
WZTX9lCOdyjPC58cngHlNZZuN47CzrwplHO2A7adaEI5h9+Ccs7drv3P4MCB
XyAl8TYkRF+C+NCTsGXdAdjinYMy3TLQdo9cFG4Xg6IsQ1GksTeK1HOhIjSs
IWyFCcT8bhmctPZG7w89Yf6y48HE2/2P+a/S6nkvYirI13GV/Nb4asGTwCsT
jQGX+t+G3SG/xlTwm4JLeJ/WF/GbNpYIWjbcFnSF3GZ9jS6dHMppJKd23pVN
5TRIpiKLhIMbCoVDcaWiiex62Ux2g2Iyp1EwklrFHlp7gdfrcUbcH3JNMhJV
IBsNvSibWHdKOh5wUjpjmyama8VIhh2PoO7wYmhObYCm9Hr4vLUW+1wNHdjo
1i2V0BxxS/pu9V5+q2kib9hyKzHnfoyYdD68QDfPZNN1NzHmNIJIplYgwTGK
ZTEN4oW9+sGCXi1XxojWavqsQSCHNI5f4JqkS0mLXClhmYudzca+ZlJ4fxQv
t+LEKgjzMClhvkHC0XMQsVX1+ewVqxYIAx/Jt3MGN+KEUN/GoBfncCDSwh+R
lv7AMHIAhp5FIaFn9uO4nqlKPbY27+/M56fffcbdUIWL3SS1HFTouNvOaFip
TGhYqPSpG/1br1bm/85YyDefzbDPFthnUxW2Ku7OOo4qHD0XnNV/N2Hprv7d
rObqE/0adtIOTRs5YeBH8Qw3KAjDULyPFUWRJpslpGmigDRP5ZPW2/ik7XYu
zSqZ3m8cNdVlnsZmu5zn81wu05XnCxJeN/jzAbeIqQ1FxEh4KWsgsPDrqMeV
t70hRZy3ocXk040lnPvhd+jVEaVjpZHl9IbEGtaD6IqeypA7zZe9Cnsv+Bb2
HQu4Nn429DbtRlwlpy65Zr4qtY64mlBH1PrvFw4stwIW7s6zqh5oWi0AzemH
wH1DX1Sn7wedFjHQZJ8Ab9akwlPPdLjrlwr3g7PhVuQOOL0xCQo3pcLVzVvR
ha3J6HhmArU7JxZlpG+A5Iz1kLUvFBJ2+kPoNgfILz4DvR/GoefLMIx3jlOj
XVMwgbszbZwFbBoPqvv2we4WOzje5Q6net3h7JA7nB/1gEsTnnAF+5w3861D
F9D84AbdDy7TV0O/5OF/2KH7GdjnzwBlLd979J/N5Wjo+dahHw8BvBgFePfv
xjl6WN+N/vMOTfzJ54HvRnfhx9pYCN7RKJjlKxbn/4kFEhDwBMBhkrB4Lss0
Aw0O0lFu3ihKPdUF2061QPbRj7D7+Ec4drYV0rMbITHhNiTFFUBSxAVI3HAM
Ev12QZLvbkh3347S7RJQhlUUyjIJRFkGnihHyw5yVK1Q7L+oQ4baKnFxbOnI
g7QGzqc9Dxe+7n4g+JjVuNCW1Uj07X3IaM2tn/qSWslpT6lZGNp5TzCUc1fY
n1oral9byG3xvjL/zu/c8GfXM5wWx9OC7lUneeNrrvDbvfKFXfFVkoltjfLp
3Huy0cwadr/vxblOr0u8gfCb0uGUWtl4Rr1sLLVONpLRqBjF3bojPF/RZ7sf
jZkeRD1WR6HZ9hR0ulyFHt9C6A+5A81RJfDS56zsy6p97E7rvZxul6O8kfVX
ybGoMu5wVIV4MqxMQgsskjHd8xRMpzMitv2xBbpu5PysWsAITSeCTppv53Ft
jktJm1OIsD0hIeyOiIlV+2WE9S4FYZWDO3CGAtssJcwSJYRpnJgw3ywhDH0E
bE2TWY72ahZhtF5MWEbi7cKwyyGIsMI2W61b9Jm0CqI4ln5A07MEpoFdJsdk
9T+QeuYqf+8+z2OfOToOiz4TGnYqXE2HxZDqdiqz6lYqI3jbfnVjlS51g++v
q/Mf5sui5TrYZ0vss50KoWmvwtK0U2Fp2f9dhq25KmBU01TyUt1ooU3bnj+p
7y/hG4XJecbKY8oxMsIU/yyZp3AJqyw2YbdHwHU8TPLsto0MGYe1t1lsnZ5y
PMGkrT7PnHW/JBz3vSbu881faPe7zvsSfofTE1E6NLL25ugHz+vkc88b5D2f
G6w7ntdmi1zzRyrXFXEexFbSGkJLe274XG/N9y74dMrj4uBBr4vdRwIK+y6G
lgzkR9xpy4utmvus7S6n/WwD9OWuMLvCB6Y0g2BINxRGTCJRhfFa6pHlRqpt
dTJ8wF3uiU82qg/MgYrgTCiPwT4n5cCVLSnocmIKOpYYj/amxMH2rGjYtj0C
UrLWofgsX4jKdoMLBfug510fDGKbe1tGlJ9ngqYGZmBqSHnNZgLqu4/D9s92
cLDNGY51u8KJflc4PeIK58bc4eK4J1yewh166nuHpvlin/0hn+4JRcwg4FEz
f9VnBfo2l2OxQ38f5/ij0XXY6MbvxwqfYqNfKcc5Jv80zqE0evF4IftPRg/+
u7l3/fh2D17fidOMjX47qwAmT7J4vqHS6AWuYHHeHUnnIpJOwqeWGeX5hbDz
8hDKPddF7TvbrcjY8wKSsuohOaUSkhOKICk6DxJDT0Nq6FmUEngEtrplwf/F
3nvAxLWla5uMNKPRSDPSr9FIM7e7jxPYJhlsYxtsgm2wwTY4knMsKpCjjXP2
OQ4cZ8DGBJNzzjnnnHMuiqrauyKZWt+sAnyO+3T3nX/uvd33v62D9GkX7F0F
VaKeeva7vrU2VZOCKIfNJK5KF5GLnB647z6B/HaoS6z/2x7w3Ke5Wv+8eLb3
5wp238/lROuzIk7Ho8K5keAyZt9PxZPd9/LHe2/nzI2/KCamXhYTA7ezOJ20
xOkBevL0+OP86dnH+ZzJ6+niPqcY8ZDhW/6Q0Vt+p/7PgibdV/za06+4jWeC
x3r1Xk60XQ4TDXinb8wEZqxPe6euj3ukro+6RK0Nm7xZaT77eL1a+z7UWERC
g2sCNJqHQL3BK2g/9Qo61e/DiGIgtKrd22jUeszrvhLC63CMX2qnpvC7XBLZ
vXYx4gHzqNUxk8gV5pWoZZ5R1CJbP5w/c/wpf26X8RQh68TiKQcskxqvJOSJ
YFzP18jjT5bJY3fXSbWgNd6hgFXeQe9Vnor7Ck/az6Fku8FRuLLOldcXEbLK
C9xdh9jEHr01UkF6vSKTDVIFe/MhzGc1EyCPGkt4x0wkxOELmM3HFjgKmk6k
6hkZQvWkDE/+4D8Nn0nMZ2LPFk83C/OZj0vKaXKnhgyxC/N61xav+3aryPTJ
HtyqPd9K9ZcakK5ptFdPhtyr/89Qp/n7z0kE8ucXx/YenyzedXC2Ve4Ub0rJ
RMxXcRCTKq5i8rCHiDjqTxAaN0WE1qMNQv/DhkA/dJGt+XhhSC1oYeLwA+ao
6r3hEfXHzGHtV0TXqTdkm34o0W4cye4yjxxttfnKrXOOF5W7Ji7m01MWM2gp
wmRqChFPSyFjGamcRK90MtM/c7HQL0tY6JchzvPPEmUHZAkSAvOmKox/5Pb8
UQlq/qSBGn44JWneZQDtey9Dl6IpNKvYQpWGM4rXtpUknbSTJJ+holQjT0gz
DkDxljcg3MEPwjGfH7sy4CmdAo88XSDIww68PCzB1dMYnL0vIQvqKeQcZAhV
hZUw0DAB/S2j0muVoNHeCTQ9PAcL4wTUDqaBb9VxuN6gBXfbT8HDnlPwZPAU
/DiM+TyiB6/GzsIbzOi3mNHvt3PokLlth2bqQNtizL/q0A2YuZ9qsUM3b+Uc
3xi9OVbYtZVzSBldKO23w4yulfZzYEZ3fJdF/xmjie88Gm/78PfdeH875nPt
vAR6uOuwtrK+ub4SyRUAZ34riyaYPOl60vA2fhb5vRzdePh6fM33WZuEcr0A
aP45QPNKAaprJLg5f0bezpESL6s3iH7pHqLq+yGqDh1RjlpLaKrXJK779SWB
Cvrovrw+YvxRFdzkT6zUvygea3lZsVB9N59seVjAH3xRKup/UrhU753Gb76d
Ozr8soQ58LSQ2309k9fjncKfvJcrmn+cvzJ3N1sw4Jc22uEcN9ZNT5obu5fL
Gb+Xyx2/lUUM0mN57aYh7BGdH7v6tF+Mdpx8vtBzJljYb/xpqc8yVDx4NVjY
feruYuP5F+sVLnHQ4pMJLV5p0OSZCo3eGdDklwXVbklQe+kddKs8Wuo/94nV
bR0r6HBNWmqjJi51UBMX21wSlnsc45dH7eOXhsy/LA4YPBWPnPBd6FWyW+iT
u0Sy9tsLOXvtxBxZUwFX7hKTkDefIJVpLFLFV4hriXfAZ4mjSFth7rdYndtn
tMaUPbE2t/vA4qysCpu7V41D7NdaIfZrrxNyGqvE7qOrxM5juDTWuLu1l4j9
55ek11NhK+sCc9/RXq6yrhqpit+zqroy2J//6fksLWI3ZvM2n3m7tngtvU3s
0cL30cX8OvvPXv8HsU9/kpS/CAKla2K+0rWVKXn95fLdJ0ST8qZLhIL1Enu/
7SJrv7OIuY/OmpF1HmYqebG4xx4QC8efsOdPvxLzDT+t8i+GL3GuRQhmTCM5
w5bRwm772KV6x7ilUvs4ssLy63SZXRyrwCmBzKSmLGV4pC+leWcsp3pniJM9
03hR9FROlHsaM94nU5zqm8HP9E4n0nwzRSl3ikU9epSVhT9ooIn951C93AVJ
rtyZjY+7tdCHfWdQtMqVjdTj9hvlZ7wk+efcJVGX3CSPL1DQ/SsU9NLKE71x
9oYndnS4S6WCD90RlxV4uVkCze0aOLpdBAu6AZh6noao2I+or24U9TePQH/b
GAx1TWBvnoX5cS70DrXDneqz4F97HIKateF2uxY86NGBx/0n4Slm9PNhPXg5
+r1DYz5vMtpwM+cImTeAz2wjYG10/k0+s8UA0Y1btcno7Z67xG1Gp3YDZH7L
ojGjK8cB6rez6L9gNPc7h8Y1QG45dC/xa85ROSuBYXJ9s6dja61S6ZqnQpgZ
n0djA1OSiupRidfzXuSPy+dZG3g/qAfvO5XI7Xo+YvikIx+v1A0PxzAkdWjK
lQfgeu46UE57AEXDASgHzcBZ0RB8lC/AfQUDFCx3DJ7vVV+LcE0gSvyzBfku
Cbwcm1iyzDGeX2kdzY4//74998qX2UrbWFGLfZygyTZWOHQ9c3HmYd7S9N2c
1U7HOFa7f/r47MNcEeth3sr8nayVWb/U5VGTT4udl8OWhtySVqf98fc+KZwB
eiyrz/TtwrCCW//4fv/OjkshnFqPNGgIzIZmvwxo80mHZu90qPNKhRp6PBRd
+wgFGveh6uTPy+0mkQtDF0JmRlUfcBbUnjI5Om+nZ/VD+ePmkfxOy1BRuVag
sHyvCX9Q8eoM65jHHPvkwyVC/90qVy9kldR+s0gceyzkKrnMc+TODRGy2n2E
rP4CsfOckLlLd2kI83hil7yItUt5iSt3XEzIXxTylPD56QFbCaliIyEPWiHy
oBkiD5lgb76E/Vl3lVDSEJFyBzaIHUrA3a+dSB4y/G/kAfx+xe68xed/fn/+
xudv/kzs0tji9bfbO6VbbRnuHh0ZrtwZGQ7m2T9jcfeevU3uvwCk4lUxT8mR
L1Si8bnypvzBPeeEHEWrJe4Bp0XuQfoiV813kXP0BslWv7tAaj3jsDQfsYaP
3yP6Tj4TcS6FrRJm0asTVtGLg7Zf+Z32sWSDU5ywhJq0kkVNFma7JLFzXBJZ
abZx7ESzrzPRJtFTn8y/zoRYxTI/2cXPxtnH90U7xne8c4xnhjglssPtYuff
OSZz0nR9xcQfzgK56yyw5S7C1P4raPCAKWo7Yofqj1lvpGtYbVTp0KBB3x1V
XPRGOSa+KM7WH3129EevKJ7ojqsbukV1gfsejuDnYQWeHpgf7lfAxEkX9K2O
gucDO+ip7oPumgEkvV6rlM3DvRMwMTwLxDQPvrZdB/dKNbherw1BTZqYz5pw
t1sLHvbpwJMB7NBDvzr0Zg79zaG/5RzMi/Bq9jjk8oL+VYfO7tnqh5byWZpF
x/2G0WmY0Vl9ALmY0aUj21k0ZnTrt77ov9LT8S3vGNh2aGnO0YGPaZpHUDe3
DsLF1a01lQTLSLrmHXOajaZG5iTjfZOSJ59HEOVxD3g+agKvu7XgfbMMfPzz
4FZgIXJ1S5BQHEKAYvkKqMZPwMXwJjjr+SAnTRegabogt8MWiL5PH5x2aYLr
/60IKWds1hrf14l6Q+uWG38qXex8ViQaCi4TdL4onau9kclu8c/gD97LEw3d
yV3s8clYbLkSIWwz/CxsNgwZbzIIGR22ixUN0pOWRjyTFwecY8V91ISlUc/k
5ZmgrFXWzaw1vBWNBqZzB61D+N3nXohaDF4Juy6Hr5RdjYLcyxFQbBYNZQ5x
UE5JxOdWoZBw9jVk6r+FqsthGw2URHG9T4ao1jdjuc4tebnNJYbdbx81PWIR
sTB2+tX8xIHbzAG1W7yhk/cEU5de8WfNwsXTZl9XWMZRYuJiuJjUC1kitd6u
kOrP18mjT1d5avdWeQf81wnZy2vsH44I2D+cFBKyF1b4+6xXSXnHZVJROl/F
RUIq2eOy2ZCuk0SqWK6SBy3WyMNma6SaKX4c83Xe4UvA3nugjbtTSYuncv5/
IdUuypAHzvzO51/4fHyLz5v71PF9T8hw9khZfUqGK3taho3derNk/+sXR1ZX
lbtXb5K7z0BC7LPgs+SMRzt2nZ5jKlmtig5R1/mHPdfJYwFr5PFba6TO4zVS
T3q9n49L5LlPXL7+R+ao9k8zvdrPFkYN3/ImzCLFA5bR4nazKLLBOHKm7HLE
aK5ZFLPQNmYs3zy6Pe1qZEfKxYiWqDMh9R/1P7Z+vBLR/tYiZuiDdVxviFl0
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
R5WuSahG6sw3sqEOM7rAPXU51jqGnWQSMZJsFjWWZvl1tsYxbqHZOmai3jx6
us4qhqx3SRA2eKQI6rzTiRaf9IUOr7SFdmo8v8k8TFSt+4BXq+5DDCpRuZzd
VA5f9dYs/9Q7grgYuUoaRayT+p/WydNv10ntV+uk5rM18sTDRVLj7iJ5LGiV
POwrIQ96SkhVN4TfXxvcPYf43N0qJH6/LZEHbJZJVVsgVc2XyYNmVPKwxf9E
ql37nc//4f4s5bO2DFdWU2Ye71/YrYMfX1eGh4vYfVqGu/vU/9BF7NJJJrCr
svebidn7TKbZcoaDC7KXpuf3XZtgypuM1ey9NNus6CgYOOwnmtJ4IuadfMfn
nAnlTxt+Fg5d/bLYbRq50mYWtdRs9VXc6poo7nJNnG8zj+ysMImczHdK4CW5
JBFfnJO4752Tue9cU4l3tFTWG9fU3je28VXBVnGdHxhpkyH01JkQ75yJbIv3
7MZ/UYWyH46iIlltKJA7vd6mYL42f9gOTRyxgZETzjCg5w5dF3yg5VIAVJgE
oQzLm5J3Vt6ScFs3SbSzB3ornY/CwJxg2CFPhgVQGFfA0kUfnbfQQBZuZ6E4
uwi6agagq3EQetuHN/PW0b5JGB4ahXd1TuBbpgF+lZrgWa0OHjVHwL3+MHjg
8mo6Ar4tRyFwO+e4240duncrh342dBpebDP65zF9eDPxzaG3xgpDsEe/ntWG
kZXSv8pn6XLRWdiPP1dv5dBR23z+JYveZvTm3JXtno7sPoDCwV+zaGnOIc2i
u6VZ9LZHD3D+ks9Sh5au99/MRNC5sA6ry6sgEiwByRHAwhxX2msHU8OzkFsy
jaiPh5D3sx7kfq8JPG7XIrpfAXj6FeLXNUVCxe7savkGqMbPgWb0AFHP+CGX
Ey7I96gt8jligSj7DYDyp2MQes1/sTK4cbQAf/bW3MzhNj8q5DUHZLHbb2Sx
Z0OrRcyIOmLiQ9X08LMi7ujdXNGgT5qg+0aWePRRwfKce4p4wfaraNwhdqk6
IGsj934hpF3Pha/u6SjWOxPl3s6H+kdF0PCwEOpu50I5PQUV28Wh9KsRKMs8
Yj3OOnouzCxmLNYyZjydkjSb55kurPbPXK4PyhLU+GfyqrBLN5pHz+DPg5GB
axHzLcafmfWmYeONhm9ZVVr3yJojAWTHUX9i7MRNPlPvqYip9yPB0Xo8SRy+
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
PgAulSpArVEFt/pD4NVwZLvfTh1uSh1aOu+79yQ86d+a9/18e/1RqUO/Hv/G
6PPwdlofwuYuAm9j6q/yeQhz9GMZ5nP1NqN/69Hb/dHSrCN+m9FSj87AHp3b
t8Xo6jGARmkWjRndydxyaCmje7/PO9hb81m6FhC0zEmALVqXXlMWBHzpuqN8
4MyRMDfBQq2tU4jxdAiod7uAfqsZ6IHVQMV8ptBTwZOWCn5uOcjZLhw5G78A
mtEjcDe4BYxTXoh61B65qRgjmsJ59HT/JfRU/sJ62v1EVl9iz/xwQvv04Jd6
dufjIlHbjaylxqdFa1UhdVAWWg/F72sh88dySLpbBKn3i6DgSTEquZGznu+X
Kan6sQR1htRA38dq6HheCs1PilD5vQJJUUAmynOKhyzzaMFbh8ShF/aJ4x8w
kyNxJdBT+3J9M0eLArKIMv8MUQEtmZNtH8cpwVXvkbrQcD1LUH8jZ7XaP3O1
wjN5qZwWJ6xyiuLXWIcSzebvWeNaLyfYx15OL5wMXpi99J4/Y/JJyDb+LCQu
fhaS5z4RvDOhJE/nzSJ5/Bl+v1xfJBQc+Vw5Cxaxz3aWlKdySAW6EG+FmM/L
7P3XJPNyujM8RUsNUslOhlSy/e8vqVurnv2dz/8gPmdhl07dtUcmZ6f0tTkm
w8U+LeUlH7NatPe8jBiXaPP237X+Z/7e8/Wk/FUglVwFc/stuzv2nB6fU7Jc
Yqm4rPLUvNfFGkHr/BN3lkntR2JS5zmfc/Ith6kXypw+FzbNvPi5n33+U8fE
+Y/DBbov2PmXPooKraKXM2xjl5McEpbiXJLECa7Joix6Cq+UmjSVYx/XGWoT
3/vKNmHwuVl0xxPHpMH8c3d5K39UB9ZeXczmw5LOnTqob7cu6pYzhDYlY9Si
Zivp0HTd6DrlvtGq57mec9Zt+auu7UbtJS9UZRKACuyuozRKAIqm+cA7hgd6
4kFFN72ckBvDAtk4Yne21UMXzE8gSw99SEiMg6aybmiq6oYOzOf+tkHoxf48
2DOOWXgLaDlqQC9QB5eCw+BUqAL2RcpgV6wEdqVKYF+uDE7lB4AizaKlOUfD
YfBpOgoBrcc2Hfp2J3bobu1NRj/rl+bQf55zvJ04B+8mz8PLcU3IYPv+zTFC
wQpmMOZxWCXmc81vGF33nUd/x+hvWXQm9uj8foDSYczo8S1Gb2bR3zH6G5+/
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
bo5z4lwuJWk6k5LILaCn8EtdkwRltnHcOqcEfpN3GrcpIJPf7JshanVPWemm
J630U+JXRh1iV6dsvq6xr3xe4p1+wyY1fx4nNF+xmBoPxeMq7ovTSs6iOXlr
EXOfsYgld0HM3qMr5O7RmSHldMbIfZc4pIIzkPK2vZjN/9cmn//NJeW0Oa5r
MnxFfZkxeSWZhB27ZN5i9n78nc9/Nz5Lbxfj51CGKwffLsLHRezYI5O4Q06m
aqeiTNdOVZnZHWoywh/w78Zc/feX+uaWt+P4LZ6sAZD7L22Q8qYbpKLtBu+A
6zrvkPcicTSI4Kr5T00rOXT2KTqNDB304Y2r3RVOnQgWzeiGLg1eDF/uMIlc
arGIFjdbfxU22ccK6u1jyXybWF6yZcxc/LWIls9n3xdHXwkfjTKNmkpwTGBl
eKSJYjyzhO9dksRVasaSiR3HsC/rgQD/DYSsvmRA9qykePep9Wo5PTSoeA37
sz3MqLuiMR13NHjaE3rO+kGr4Q1oMrsLFXa3IAHz+bGVx8Yte5rkgTMd3XJy
Qd4uNhK6q5nEmXIFWdgZoMuWJ9FZ08Mo6AUNmkraoRnzuQXzubW+Fzpb+mCw
cxSKGxPAPfsEULA/O+YcAtucA2CF+WyZpwCW+bgKFDYZ/c2hnSu2HJqOHVo6
Vrg5r7D121ihdI1o7c2e6M2xws1+jq3xwifD6jAoLvlX2Sz9GsVe+64Y4FPF
NqO/8fl7j97OpL9ue7S0NzqxDSClYyvnyNvOOWrGthy6bXY7i/6e0ducbpeu
Z7eA+Sz158WVzT5oNubz7MQCTA7NwfvYSXC5N4q8HvYjacZB8a8Cqkch0KlZ
2J/jEM06HKim74B2+TnyuxSMGOceI4qmG3I75gBeB83BU8EI6Lt04IvSGejD
HzjteSPQif/Q5sgmKHtZgSrfVENXQhvqSWpHjaF169XvajZq3lSikoeFqDQw
S1Il3T4plhTeLZD21qGm6xkS/HNIpaWsf3RNGXtBS5t6x0jnRLmlL8Qz0vrC
aKkTr2mpM1/d0+cS6SnMDHrKQm1gFrv5bh6n7nauoOp6lrAWc7jOP5NX75fB
q6cn81qtv461OMQONVASOQ3uKYIWt2RRh2u8qMcxRjRoHSGcMPsinL0Sxudc
+rTIPnFbzFZwZs/L23GZivb8eWVH/oKijYCtYC7iyJuK8LkoQew34ZL7TJZI
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
wmcqsgwt3bfi/0oTAuulfQ5d2VnRsj7Hmw2Q9HYzJHTow3fdFjC7yJMdUock
YpnTYrQM6eN+8O2AMQhEv75XpXUI4HIFtvn5mtG1n+Xolz9bO1xbN5TNdDT/
aHRex6rRZdL9hdI94H0ArwZW97BI1w6lvY/qXoSz9Wp/Q7qHUEhI+8/Y5wke
MMe4UPGSC95HByHoSDf4xbWDX2Q9+IdUQ0hAORzG13C/IghwSwZ/nJ8DzM+D
/+6jELAtFoKNgyHS0BeidR0hiLoHguS3QNiXOhD8RxqkBF1Ab3M+it/cb5I0
3qhDz84/R9XnalD9tVeo5UqtpPlyrajmTDV6eaQCvbr4HF5cqoXXZ6sk9Vdf
cl9deUlUnaqeeXryKbfm4nP+kzM1s09OPVt4il/37HS1tLcxXRhWyCqOLOKU
HXoy/eTQk9nKQ08Wa+NL5xsOlfKa4ktY1W4ZAxWOqbJzOV6F4CwdksdvCMkX
tAblCrDPkz0B2axB78zpMauHvEHjSwO9Jt8O95mcZI4aH2WPbDrCntp4lMUz
PMYlDI8KCf3EJULDc5mg7RASSrtmCKr1PJ9qDnzKnleEkuX/hkvuf1QJcE0r
WcnNKtnITVEs5F7gXJb5jYbc/W8osvwsteU3n/9WPtPlmmT/Dspyr/A1G/8b
j+CPPY5fniCryjEphtjoDXI8hY0/KdnXTzb6z0ySxlWOvLaIu05vib9++wqh
YCoSUKzEAsWDIp6K5xJfw2OGqeJCTCi5LrNU/EVMjXAxS++QiL3xtIi15coy
w+T76cn9d3smdtx817fnzkyb+YOFF5YPF57YJC/mOaYt5blnzj8PzhO+9M3m
VLqmM29Zpw0nbz7Z3U8xnp9X0AYhxRiYiptRPUlT3Ld+n4hQ2C8RKpvCjLIN
CGkOiKC5SNjq7hKmpjea0A2CsY2R0LclEtVsjUC526PRZWM3Sc7eEEmJTTS6
bxeKztkFoKOOvnDcxx+OB/jD0SAviApyFHt57l92cNyJLO23wB4rQ3CL2g+F
OXk4O7+V+dyM83Nz3Vt4U/8W3rdgnyt8wCVLDdwKtGX52S4f+1y46rNNEba5
eM1nnKMdytcyNDba/Zm0z4Ez9AsN2RlKwfU6snmO6BZ9iGvDGRobHdmuDqXj
p0EakUUiEYhxSX0eX+iAM30b4Vz/Bhiab/hVn0e5AN+VAdx6ttbnqP0xS//C
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
WdDkPJN8UoQb6+XhhlJ5pOGmMojcdAoh9z1ijVm+0w2541OMOUELSX7EElIU
u4pkTV1BLs1cQo7PRodOTiffxk03LoqJNS6OjSIpMSFk+qQAiIseDxFhPiQg
wMMYGu4JoVEeEBztDgHRbhCd7g2/Hf4ZKu6UQOU99OhbRVBwEzl8txhdugQK
7xSRfEwRsplhdUE2Bnld8oDx6iIoyUfXLiiGX68vgTln/SDmpCMyWgzBh/gk
6DcuCTnGh5DjmJN8tv4RdkoIYacFuM2H8AwhOrYQopHZMeflMOeqN/x4fxJc
Kt0D5Y8L4A1Tp3j+EV7WNsDzugbcboB63H757A28fvYOXjx9Aw1176D+8Wt4
/ugN2z6tqIfH5fVQX/OKPKt8CY+LnkJdxTOoKXzM9kmpzK+CUvw+UFv9lNSU
VUNRbiHk3MqC66cz4eahi3Bt1ykoRn8+vfoQnEvbCqfj18GRoMVwwHs25Hgu
gP2K6bCTGwXHuLFwjTsFrvCi4Ef+JFhqFwDbbDzgJ+4Y2OsQC2tGhsN31o7I
UhHsGsqOEejM1lzYb8OBPAcFWWuh0G+wHDXwo9VI/XfmtujSLJ/13+K1v9bc
anDVcMvBnSNs9b/aSrrnfW2vW/j1V4bFw4YZkof/E+weySEdkul6SpysVykX
dWncV6vQibso9/U6ym3lQLvzis52t7WdtPcPvbT3eqZfBk25rKA1yGLadR6l
9Vrbr3Jd0tciS2/QOs1T0crZBko6pY92mtVHu85nxnOjL8/opiSJyNQgHc0f
100LfDpoSUAvLY800vIwAy1has5j9bTQHzkd0K+VeA9qpV6GdoGjro3n2KmV
eiDPXdGxXQymOKNPOxqY+dJpubeRcR1KKjn5v8Kf//747GXWyfXhd/B9f3nH
c3t+BxnGcPkU8vjEKC4cxRzDZDBstjf58xXMDQdTPSMbmYiuTJDJJNOebzxo
O4pstRlJNiCPV1hawBzzYZAybBiZP9ycoC8jly3werUi65HNqy2sjAyXj9nY
QSGe+ylTH8HkojsX81i+szXnWmTkc+4Qn4fmnGP9GV8r01/5d3/+vc8z26dO
aHJmpq+Gim+qUTMM/2PcisBUf/59/Ar1+zwcEglb36CkUpOL84ec2dFU52D7
2sndkLfIZhnyV4L+LGX4PIaZvx9/h5yo+U5EI0ZeS4LweCg+LwIZHonnjAGV
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
rd/ymfRljqEPh/SSbXQL2Ir5Sj6jklzeh3979Th2Yz8iW9KTDL9NvF2Hebwd
83kznXRnpsGn67BX/yMHUkZZBbV0C7TFMk7bzknRbDAJ0BXSxETWKquV9Qyn
mbNsr5WzZo7qDy1d1V9Y+WO++s9O2PqNTdv5P50VxS1PC2P10/xozFPsynZh
uhleADFm47E4achzBC9NcH3mxqy956a5JIe9tJN81/kJG/HMtK27eprnvjIt
dCfr6fD73bXTQk/ttCP2ZkdnNCV00JGcnrZ3Jgx8tsfPlCJ7hD0ZOzVfN8kT
rExwBSu4xXzm68h6KczDSyRf/zPweQazec7G70/zXD9v/H+87xeux9ynmMvk
GL8e0o3x/Xkj0wRWM1lQgSOPTod4zOEwzN5QHGGYw5EmdIgxpUMsbuNwJOBI
MnnD5zQm5jNmcxZms4T2JnJw5GMmKygUKDI2hlIKFbZi3p+xsIbbZM20FRfO
4evuBPaEPhytbHNoMmMb7hF73sZu7Ou7WWbaPSbs5SYzS+0+M3PdFpaJfjOT
hTYwmKiKQkUqCgVV4raaSkO1VIZ+NZWuxqFdRzMhdjDNiTZTa90g20572kKk
HeU4aj6y8VDf57ioz1vaz5zhCKauW7mo71l5qO9yvNT3OD7qmxyP2XMc8e99
FtbfY+943WLitryJbr+0juYwtZHuurDTxF97gB2pHeRJFs+LChceuq6buee+
5elhUen4Tttc9TaeXLOTl7dSbyuZPiXKHf/eUTb7hX3C0g88D/0LzOcZgQPM
CVxgQeQHs3xfNMV11kwLI/DzXTTMOMTDJGb0S3Ec8dQ+mvhNFIl+F4ahXwRB
6FfnOPSLp4z4yUcOPwQUwnfBZfB1RAX6PKIIfRAsQQ9jStCHqWvQ/cy16E72
OrguXwenJCVEd2qBfqBQBZ3FJbC/UInqC/PR5pxMVJoWj8qk8aCUxEB2OvbO
5CCIj/cFsvYuPskbouM9IDTOjcx3IOzSKCzTBeXWxqKGQxvRyKkzcOfMXXiE
ffbhRcxSzNn7OG6dvwt3MIfJ9vqZ23Dh6BW4cuoWXMXbo6dv4BZzGjv36PAd
uDF8G64eH4UbZ8na4/sGHt89Tx7DvMbbN0/dgXvnHsK9kUdw5+wjGD42DNsb
qyC5IhDCCp0hTO4KMUU+kFDiD6nlAZBSGACpxcGQVRwBeeVxUFAaD9Wr00BR
kQzKilQox2zeWCKDbUUy2K3Igj2FuWhNvpRokeehDnkp2pIpI3bFxaGe+GTU
FZUMHeFpsCEoFvX4R0Ofdwz0uIXBUecQuO4cBvV2zrrDQh/9aYE/3LLzhyMc
H2iycMXXsACOcoRw1FIIA5Y8+MjKFRpZdoZ+G5LL7f8I/LoJX/OD+Fn1IoeH
Ocskr3OSz4h06HoW6UdmhiCdmHRkst9nE4MFlVQabCTX/KYzYC2dzHvQoPZt
VJPPqNT3oIDBQavZYZpmi3h1CztKvc8seKGW5TZTS3dcrKDyiVKKNVpNs9WM
Wrosf2Xjpf3Vxmtpkuv1etE2ZHaBF7w8beu/MsX1nh+39Zx4xXWees1zfzkj
DF2cFgRjx/XTT/H81dN8b820yIOYFLjqJm3xNcxz1U3bOaunRS7qKZGLIa8x
JXTWkmwm+wAn7UTaKYFYOy12JAx8trd/E2Iy/8wnJniChSm+aGnaXqAnX5Pr
MWPH7piy41P+NfmMXdnW32ieF0CZ5PpkPeF63vvSxpkga5O78DWyA7OvFvOy
BLuxFP9tExg0iGJQIBwzNpJOgVgc8XjfG1emYwbTsCPTQIL3Sei0JRmDNp7L
oP2cT6d9qaDT7hfSqCOlVOpAOY3eso1lsrPexGz1egarJp9CrUuiUbdnMKj7
JUx6m4xO7c2mrhqSUVadzaYaX8ZxG7v1h3Ia5XMlg/JTMZ3yrJRGGS+lUmZx
zGxkMLXdZhzoIfN02O1bWDiY5tDKsoBDJhzoNbVCfWY2RJ+pjeagifnyXpaZ
ptXUQn/Ggqu7yRFqH3ActJcthPpeti2x38Sa2Mm00m1hWC5vplss72TaENuY
PLSTycPvFc6esnB4fZHj8OQex+XFB1a+S7ctAzX3OZHL9ywjX9/hRMxcs4pR
j1hELZyzjJse5WcvHbFJ026ziFlcx45c2sZJRHttstSNNpmvuvnyp2edap7f
8qmfbXPZNLtZWDW+Q7x6ea+4Wn3PVbn81D1j/u8O0bpxoQ8s2oph0c4HJnk+
8ILrBc9tPdAvXFfiV54H8Yzvh54LAuG5Yzw8dUlFv7lLiL9558JffHLgS28Z
+sxfhj4NykCfBOUSn8ao0EeJ1fAotQ7dylwDoxlV6ESCnBiRlqOzyioYLFSh
TmURalAUoK1SGWZ0BtqoyASVLBHkGdGQmRgCqYlBkBjnC3FxPhCDOR2NOU3m
pMPiXVFogisEJzpBRJYbZKlCYHV9PnT17oNzx88AmZt+H3vug/OYpcP34CZm
9/VTN+HS4HW4RvL55E24MnQVLp8YxT59C67g/deHrsOlI5dhFLP7OmbxzTP3
4AFm851TD+H+6QeY3fdg5OhFaGxaB0lVYRCe5wHBOfYQkiOG6GIviMrzhtg8
X0jI94fkwkBILwqBTGUoSAsiQK6MBYUCe3NhEhQWp0B1qRRqyiRQK8feLJfA
7vwsaMrPQetlOahRkokOZmajgUwl2hufifaER6HOkBgYCUmFlsAU1OERho55
hMKASxAMOPnBRSd/uO8YBfusHdFxOxc4wXWGOzxXuMf1hm5yrg0TW+zKPOzQ
tjCMGd1rStbOmf8vPpO5jVYcZEv68jCHC/14fx1mbr3Bnc0Qjje5DIYpkGNl
t2BnJlndgc9bg72Z7L9Zg725jvoPPlOhhkb25VChjOznIfvj6eaElOG2ksfw
UO9mh6lPWSev7DHxnd7G8JjYznCeKzHmLqe9Z64tN+ZoNzOsdefMbafvWjq9
+orjOzNl47e0YBuw+ILr9PKZtfjZcxvxk5c817EpYQD2Zl/9tMCbmOa7k2MB
l6fsHLH3ildwi9nsin3YST8lcHwzFkXspJu0s9dMcoXqKZ5QgzmrITlt4LNY
TPYLvuEzmXsW8okpO8HKNN8ec19I9hOiGZFhHNkl/L5V/wp8HsN8nuUHGC3y
Ao3mbf3++7Str+pHG9en5Dg/8tlqI+ZxIYMBaXQaJNIokI7/pjIqBfKw48qx
3yopFKKIStHgv/9SGZU6XU6lPqugUL/AnjpSQ6U21VCoJauNqbFrKVRxnTGV
sZZC+5/rKLT/toZC/S91FKrReirdaCONYdTDtjRqNjU32khnGUmpVCM/Bt0o
yoRhFMWgGeH7gFE2bZVRLnWVUQGVYggFlfInBY3y34oY1P9RwqC+U8agGhfR
KMwKKo16nMNN7DGz7O0ys3jYbWr5vNeUs3DYzErbb2YNA2Y2cJRtg1suHMFB
PjP2YCfBvo2vb1PYSDdBa+km+LnQFK2jm+rW00002KvJuXZXNtHZi/VMzswx
tt0fn9m4/PpXG5/XN618lg+z3Qz5jS4zL3xf8Ne2mgTONbH85o6wQ9WXrKJm
f7LLGv/ENmVuhBOvucaVTN22Sf/1Dk/y8g4/90U7O/ybfpvkXy46qZYOCPI0
2+3y1Jt4+ZM7hcULe8Q1K4NuOycv+x38fbvz5pfrnLcvtThtnbnmoNR+JUrS
fiMIXxm3c0ILPA+Y45P1HTEwLoyEl3wf9MwhBv3imIB+xFz4wiEEPnMKIb71
TEB/8UtB3/iloa8C5ejTiGL4MKYMrkXK0fmoHOJyXIH+cpKSuC6tQRekFeio
rBgdzC5CLQUlqCGnAO3OlcCmnCyolKSicmkylEiwc6ZGQmZSCJDrF6ZlBEFy
egDEJvlAVIIHxKaQ4w09DP2HgTEOECVxgeQSH8BODVv2YT/v2A8n+4/ChcFL
BgZfP34Lbp7A3D2BWX0S+/PRG3BtCLP4+G243HcV8/kuXOvHnMbHrw7egvMD
V+H8kTPQ09ICO3ZUQf66BIgu8YPQbAfwSxNCUJoDRGRjb5a5Q4zCB6IlXhCf
7QfJedid8wIhOScYchRRkC2PgML8OCjOS4CK/ETIz4uCsrwk2KHIhhJpAmyQ
pUC9JBWaszJhe0YWakxJRS2JmMWxyXAqRgp9UaloW0AQ2unpi/Z6BBL7XQJg
yD0QBpx90ICDOxy1d4UPxd7QYe1AHOFiRnOd4LiNGIZthPDQxh7OY3/ebyqE
IQtn6LMQGTy6C1+nG2lm0Gjoz7E0cJpsm8wsoBEHOeduF35N5iv2mPwf7rz9
ba55E5nPIGvu8DMuWUdFrvONfx9QSbIZ+zTJ5qq3fFaRffGMVaCkvQfZDLZ2
nVng61oTv7limqOmlC7WlFGEs/Ust9mTbM+JLrbjeBrdciqcxp5NZ1jMrGNZ
z9WzbDX9bL7uYxvXlRlByMoyz3Nlju+jn7bz1L60dZmdEngtzog8ddNCD2Ja
6Kqb4tmvTPHEasxg3Dqop+3dMFud0bTAHnMas1bsqJ3k22uncEwLRZjfQv2E
nUg3JXDQG/oGxYa5FNAU5vGUkI/fI8CfKdJPC4WIHONrGEtmxz+D+fxf/1n5
fBvzecrWC7tzwP/2ys43DXvylRELuwny/lzNYkERfg7Kp9L0eVSqOp9KXSik
UJ+UU6gfYfYO4diFowYzOL+aQk3CbXCVMcWtlkK1xkHBTP7vuDVajaOGDGOq
0Zq3r9dQaEZ1OP5xfC3m83rM507M5wOmbKMNmM8yzOdAzOdozOcYzOZkHDmY
z3n/Vz4bYT4bYT4bYT4bYT4b4evPCF9/RkOWNkb432qUZ0z5U4Ex9Z1yCsUC
/3tdK6nU8BoqTYajqpZKX4+v3Qp87VYdMDNv2W9q/lMP2xqG2HYwyLYjBthc
zVG2QDvIFumOsYXaExZ89Ye2nupRjtP0aQvR1BG2vbaBJcAeLdDvZIp1O5lO
+i0MJ/02httiM8tjdtQqfPETfvrifW7q0l1uqvoeL2Ppul3m9EVexqsRu4w/
LtlJfrphm/XD5/Ylz26JS5euiysW77muXfjAc/uLu25bxi87182eEte87Hda
87peXDu723HTykH3xvkG1/2TBzzbptv8uif3erW+bnPfsXjGfY3mOwepdtw+
Csb5fmRfCfxk54X+wvcmfhYHw88uiejvXlL4yS8XvvOK03/mFk2875mI7vom
oYcBaegh5vOjxEr0QXIFupFcjo7H5xJnUhTEcE4FnCyugoGSCtSdW4QOZOfC
3oJ82FWUD5uKsmGtIgPKsxKgKCcBFDmxkCONBElmKKQk+UNKRgBmtT/Ep5Jr
sXhCRJIbhOMIiXeGwDgH8I+3h9B0Z4jO9Ybs2jio2pUHu/atg+am3dDe0gi9
hzphsO0wHG7rhK79LXCwoQkONjVA/Y7VsHFbKRSvS4fEslCIyHWHgHgBeEbb
YSbbQ0CG2PC5YZmumMfuEJHqhiKkXm+8GUdSph+kS4MgPTsYUqShkJMfDXJF
LOTnREN1bgrU5CaDMi8eKnPTYGdeNjTi2ITvS7syU6AzIx2aMrJgT2IydCdm
oPboRNQeFgOXw1OgPyIdHfCLRq3u/vpmFx/U6egLJ539YFDsASdEbnBZ6AbH
OA5EK0eEznFd4ZSVPZzk8A1xxZoPd6xEhrHcZG3okBUXhq15cJnMJeLnQJKx
ZC6j5a1Dk3UbJHMvkv2FLFNDDoP06B2sN32Bhlwz7U2dXR0O8v1krno19qxC
BunLmMuG/nYKqHCUYz4XM41BRl8FOfR3QcGyXqnnxI4d5WS+WM/yGc+m8sfy
3xPMla0SaXpY7gsXrAKmmtiOswU0q6WMVezFPIrZTCnVQlNKZRPbTax0/Wxb
zTmO3cotG7H6F76rboLvujTJd1mctXfH7DXMq6EzcFngoiPn2JgWOOsM22Jn
YlokJqaEQh32ZOzNwoVJvmgeMxkfE+FzhTrMaXI/9mWBnmT0tMgQBGYygXlM
TPEFyDAXgx2fnBNnFLPxnX9GPl+xtAu5ZsFvaTflXNjMMLmNvfe0gkKpV1KM
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
5HFbwzpIr3+wETr8m8//eny+Z+tn4PNmpqlRPX69h2Vp1GBiaTRsKX6n2ZQb
ud/UeqTRhAu7WWTw8O/Fjrhu7br4RBg/+40gbfkrYc78tyL5y7/YK5a/FZcu
37XLfnXaIvhvfezAsSOW8USnRYK2zypjfshaOn9BWKi5LipfuGZf/nRErHrZ
51C5csRhzWK3w5q5NueNmi7nzTPH3Xb/1uW+b6zTu23xiHfHVHtAt67Hr+N5
t0frtwdCu6cPRPXNNUT3rtTHdo6vD2x6vSupe36X9PDYnsT66abAkuVbTrGa
H9yT4TuPBPS5Swjxla8EvgxRwqeRJfBxbDk8TqqABzF56FpMLrqXUQV3JLVw
O7sOruVih5YVw+H0XBhRVMLJkgpoz5fDgXwltJQWw87CfNiSI4HdxflQX6uA
navlUFcmheriNNhQJYGasnSoKU+D8uJEKFPGQVlRHCgLokGWEwUZkmBdfLKP
Ji0rGNIygyAlIxBS0/1QSqo/bv0hPTMQEpJ9UXJqAErNDEQZkhDIIHksC4eC
gkiUJwsjyvOjiXx5pLqgIFZXoojXFioSoRQ7/DpFKtqI3V6lzEBV+elod0ku
UZmTQuzPy0HNuTLUlydH9bm5xG6pBJ2Rl6EOaQHam5iETiVL0LG4NHQhNhO1
RyWhE+EpcDooGW74J8MFvxhoc/WFUdcguO7iD+exOx8UuMJ5e3c4L3KBUYEz
XLATw2c8sWGt4xOGOXT5cJ0MzOT9puaGXMZpg0eT89Nw4CbZN2hmZajDMIzb
fju3GFnf2mWog7aEEWsu9LLNYQ2VCmRuY59hXIqZoeZ5O2Y2yWlyzBg5HqAK
c7qUQsH+TMXOjBlNwUFu43Y1duhCfEyCHTqLaQyZ2JnzyHFiNGMDn5NMaZCM
23AGFaJYDFTJFGg3URzUq6k83Q6G3czn3MhfhixcJspXsdUVxua6rXSOdh3N
XFtobErk0s1W1rEs5jabWs7vNuXMbDOxmFTQTBYlFIYum8Ig0hksQsY0Wc6n
MTVyOpNYzzLVN7M5+se2At2s2FG34igm5h2wH4v4ut9tBYuYg3OYzUtkPgOz
Vm/IcYhIf8bs5b1ZH2OCZ5i/H722ESDs0gizFD3DvH6G3/MCx8SbuXV++8lG
6P3Tv/n8n4LPpyxFRvtMOUaNppw/4Ujba2J1sd3M9saHXI+5b+xC0H2bSO01
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
6fCNb4aB0V8ES+GWXxQ8Cs2Fj6OL4HG0Eh4llMHDxDK4HFeAbiQUoPtp5XAl
Cftyapl+JKMcXcyuhV5ZOXEkU44uKmvgbFEtOltUDT2FKtQvL0bniqvQmZIK
GC6tgO5C5eyufMni4YJCYqdUou1QKtCpyko4WlGOGStDp4rL4HSpCp3F0Vsg
X2gtV0w1lOWNHVIVzA8rS1ZGlOWaiyUV6oHiktleiRxdkRTBcG4R2i8tQMOS
YriSVYr6UvJQc0wSjMZJ0ZWodHQtMgP1hCag62EZ8EFoFhoJiEIDnoHovlck
uuMejB65B8IxsSO65O4NHyZk6h/krZ27s+fMkw8H35+5fOjWxMjOixOnV595
fn//zZmr9ddevb/v1tjlNZdf9svPzFzdODp2f/2V6Q/WXlaPSIdWrqUfXfyz
8rT6fs5x4lbaCej3rCF6HbJ1t6JadF3+Tfp9fl0rBwM61VucN0BzUBOcST0K
jUGdsMb5AOz2aocivhyKxTXQFdoFw6HtMOjVCNWCStjktm5+h8u6n6M4sqVi
kWqxOWDPVJf/nvFO903Pu0RFn++1SL2zmZv9rJATt5JpFqhRWcXOrrVJUPfw
pDN15iEzW23ip246Vk5f4eYsDljGLzeyAtRlFPHSbmbg7Bnz2IV6E5elDXQb
3S4mB+0xsYA6zGsl5mQBnQ45b+etVJqwUQ/bdvmkue1Yn6ntYiODrLUz0xUZ
s/S1NLZ+0Jyr62NbaWtZZupcY8ZK7jtUvfQdKsp+h0LkraIh7NJouwlbv4Zp
oi+jY1+mkzxmaUmPzqXT9fi7dAo6TZ9D1niQeQ4cGTjS6TSURaMhzAl9CJ2m
iaHRdCp8LznOsYHHVjz00kaEpm3t0XPM5F9x/BUHdmbiKQ7sz0Cy+Ye363iQ
a919Ta5zxxX+irksxYz+n//m878Wn/eb2hj1mdsZneDYG53iiP9XDFkKMa9F
JkOWomfHLB1hxNJx5Seu/9yEOH9+zKH0j6f2hYs/CguXPxYqp2/ZpC/e4kRN
fc6VzL5wqHo6Ka75fcpj18wrvwO/fyZUvb5iIx17ZF+5+LPjxu9fuuy599yz
+adv3ffO3BaWv/jG68CvP3q2Pv+bT9tvf4k6PPdNUNvfH7ruefZFQNf4w9jD
fzufOvBqOHDP1MWAfX8MJvctHEnrXdwXdWDuUNCO8Y60Tm1vRod6f1zzykWX
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
wzDxY5wvt5C4TvjC8pDomfk+bo3ZXlGV2UFRqslmfg41ntnmeIlbZnteWmZz
RVhsfWHuKiF8JN/qnKjZI1VY75XKz3S+Ibhtsn2mxO02t8TngbTY/6Eoxfmi
4J79sZnHfncl6QF3pQ89z3IynA/P3lt1V3XJ+wwoMnUH7y09wDszBzAI+/Q7
h2DwxnEtGHQMQnvsvJV9butA/4ptaItTsKrBdY2qc8VmtCtoB2gP3Qc61+5F
833ClU99N6naQnaD5pAdoCkkCa0P3YVmr4lHa9fEog2LnytuSAJPwpIWj01U
lm7ZKUwNjxKWh8UrysITFJURO9GqyN3ojbXh8uKQCFXNxlh5VkwcO3tLnLhm
Y6KkeutOUfrWaE5NWJS0IWybtD5ki6gqJA5NCdoOHgbFob+uCEMLfDagLSu3
fO/2TV7hoNF7reqxh6883cZdVeKyQlVi763qsPYHzyy90G4zd7QX2lxPpYLG
bfvFKRdy37en1843368Ze3g4+13NuRJ+y7XqhcIrtZMt1+rmWn+t5VSfqBzL
P1r9reN8w1zX2frZ4l2lrIzo/KmmI1X8nhPVvKZDlfzK2HxG1tqM2ZKYfGF9
UqGkaXuBsCsig/vK/iwj1+IINzvgobLML1XV7HdflWmzU5VnsRdcsjkHfb4P
bjrdAZdsL4NbTtBhwhbQaH8B3LM5D3aRdoGztANgr0k8uGWzj3vcZFPbdYuj
cw9dL/KrPa4xrtO2szbr+8sOGYaKmh1PfYrB+XI26XooDhmu5qRTt02V0BI5
lUZx8w/0vN5mGbgMp+hY9VzTcZ2LX07jx/9MEUctNVbGLjVRpem5zTfg3MeS
lxHYiUuN0CsapvKHWmbyEgNLbjtiPVOmT2adW46V7lqmrTylpa84oK2r2K6m
o9y8VEu08Sd12SaYyL+oKw6q6ah+08EqMwwI8uOauvLgZeqyjX9Rk8ct01Du
0dBe/D7ZXh1d2XFdfdkZPQP5fi0dRRjszhvVNQTQCVGimrpycf+7iMXPDb/7
rLF4XCPwgVmhpY4GqC9HV2osVwarL1eEqC9XrtRUR70X99nWVFucowb26j9/
tzpaRwfcMEC+X6/0G5H6fX5jMW//MLkbpotIAh3fry1NWuzSikkCpXAGT8b/
e/kMAPiR/8b8t/h86bvNCOauviH0mfKvphAmF0vGXNJG/p98HL27DLFCS3HW
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
0RqN5fLV6mqo76LVi2ZDm1dqLs5JL86FwK4N153hmCPs27YwdI1Fr5eDUC1t
cE4fBzrwJNipyeAFTAPRBNQQTL5fU6yRYIIuzlGPEshvocfhMz98/pvnX/p8
Vgv6DLtzngEV8wxvhWnGW2Ka/jvSCNOJt8p+Q3QGrQh95oouVlSFWIAmxIHd
izgzRvB+wjHiGtEE3nOyEWv2oR4XgDYhq/itsEsP4FbzP+A3CYaxqz/U4FeN
dBnHCnuMoiRvjbbxpswPfRkxiptoN9rM6DXbzflETf70ipzM+GR+ijtJP/jt
mUniXD1597cW018mW51vi9pMDzLzaIeFZQ43+QUejyTZtr+I021OCR973kUf
et8Bt9wvyy97XuWfWZs62+ayRf6ZRAafTD3AZwt/8MlypWrEZg064rAeDFh5
oT1WvmDIdRN467EVvHGFTjutV71wDEW7HELRV87rwAvnUFWdy0Z5g3u06rlP
Iuj1jldVecSo2n22gd6AJJgdoHtlvKrFL1pQvGIDp9MnUtHuuU7SGriFXxQU
xWpZFSttCdjKfOC+crxtVbS8OyhW0hUcI+1ZuUVS5b2ekem9WvjCI0TR5BIG
UqDDLxbnWpzCwGvXMDTXxkfVbOsNXtkGoP3m3qDZwhXk053BoKkH+oHiDNqN
YT/auJtfc7t64dHRnJmGlBpG5fUqVvZR6HNqE6PuQtVkxfHSb20XamUNFxum
Hu4vH+673sLpPFvPKDtcNZqRXPau83TNRPeZOkHtnrKFRxE5o3lJRazeY1Wc
1mNV/LKk4uma+AJuaujTmbLYAl7LnlJ2y/bC8eaoPEbl6rujj+j7P5SEZfDL
12ZwXwQ9ZA+7XuF0uF0Vn0f8lNdtzoFctweqQp8Hskrvu6DXMwU0mR4E8bpe
4BfKTvDI9Di4QdkFUi33g7sWO8E9JETw2eLslwxyMutX4kbGIWTlwnF8AOss
EsC7R1wjuaXvM30K5y+4arRW+tQwUtxHSZ5tIm2b2r/cTBa3xFiZqu0ozdF1
HE/+mcJL/MlQmfgTXpG0BK86oUaSFhjYiV8SHcFVbQT2Yjy4q2mGXtQkpx5T
NzDd87O2/Y6l2ti4JRr/GPWTJiZ2iRZm+1JtGC1M9BINzN5lOpjr2gRM9M/L
MVEwEUvUMBuhz1HLlmNOw7+po+ramNilavBr1TDQZ0y4lgYG+oxZp6GOCVdT
xwQvW4Y5qa2D2QkDTcZAnzHQZwx0+fvtlTDQ3X9ap6W5bJeODmGrlqZVrJam
xx09bOh5fWxMsKbGQU/N5VkrNJdP+mguR90XbYYmL+Z3p9WBtdZyYApvU/4Y
26qtAzIMCN/nqQdgp65dPD83fvEchMagHXbp9wSycgxPLpvEk5CpHz7/zX2u
hz4f0dTG/AptTjcwwtThaZgaPBVT/T+QSjwlBQY8I1Cm2wjWgi9GvowZ4qrx
SeIq4VejddIRYojiE2I10oGjvxpEPL+MEALmpohh/BnjaMGCUTz3LS5w8BnO
b+yr4aaFMeIW3rTpPhbH7uzcG+IWThsSMjZK3j48Qj3w6aX1r9Jx5xvMZpNt
0030w9xm2+tz5Xa3RCVWv4izTKI4LY4PRPVO9/hFzimi+/S93EyXm9Jc9zvg
vucd+R3HC5ybfrfZl4Ieim96/iKoobmKh2nO4BvdG4ya+6GfrYPAZ9tgMGDu
ir6xCUA/OG8A7103gvd2oYu3lQP2a9D+xXX7INBpt0pe6xAm6/eMBS+9E9Dn
HnGqStdotMcjGvT7JoDnfjDe21QdKyK5pZ7ruH2e4Yout9WCyhVh87Urtoh7
/GMlPQGxwieuK6faVmyWPV8ZJXkeGCXr942QtbitZeSuCFuodg6Rl9qvBXm2
QeggfG14ZR8C3jmsBeUWbmi2hSN4b+ED3ph5ok1mjmg9Hd4mO4JhCzfQFHmc
l/1rycf6lLrp24lpC6UXK1hNv9UJsk4UfWm6Wc/oud3IyNmbP9x6smqu90oz
L/1g1YeaM/Vz3WfrmTXJZSOZJ+rnyvaXj/f8UjfftK9sPmdD5vO0bflzHQfL
eV0HK3hNMGUbMz/mbsyaLI4p4DUlFYladhYLW2LzOD3hGfP1Hpc/5wU/EDRv
zGRVBz8RvQ1+yBhxOrHQZhzDP2MUi2a63pMWuN0T5TunyCq876Al5G2gwiQJ
pJGTQabpYZBpfhCkUhJACjkWnMYHoY+NIxht1me4pZYnuYW0XfNXiWtZhw08
ueexvsIc/KrZX3Ts3xzQdZXu0bZTXMT6ydroOxeeETdzH2t7io+rk6WlWBt2
iYH1pzNqZuLEn3CKHT9hVTuX6IOkpbpjj7XpxYfV9G9H/6Tza+xP2i6nNUz+
4ZwWHpP8szYmCXqcuPR3m2P+8DnhD5/3q+libvxP+Lz6D593/Fd89oUJ09LE
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
zXF5A37VTDd+87f7up6ccuJa/pBJvKTPMELWi98g60fClGl6NuMP8N5j05Tt
gs/4cHYnwX86w8BRXo24K1oQT3EG1k5ZjjOXXNEzWcjDWYlzcHSQi6MNn9ch
/qdFn+E65l9L3mIQ6vc5jx/9+X/c5/M/fP4TfSb96XlmSNq/eK6VBgJZ0U6k
oF1EmrKTSJN2EKnQZrqqHCFJ4PYx34bQ5AMEc0kP3kzxAm+lhB0abcNbC+8a
IOwmxA6Oecn6kBXKAcRP+hxZochFSOJyrJ20B1kp6/i+D16ItAWu52Fthd3I
OnEXIVzRSFwPe7kPrw4bOPPcOJaZjV8tuq7rzqigxLMmzE59LSZGvblHSZI8
oh2UPbM8NV9M3fflgdkJzkXTQ5IKx0v8W6aHuCepB1mXbc5MvqF6ifgkKvTZ
FsYOsKlwSbICs0TotrEZYBGtUKaRDTpBpIFZgiW02R12bDfAIrtBnz3h/9sW
nYQdm0nzgT0bhuopX6A48yYpYQuT9OiFGWMfHtPMTzRACmJ+NLThM2neknn4
mByql7LXkA4aiFTANbEFDBO7xccCY4ZmoAUhATGeDNrdkxQ3dlZ+uRud/+1S
fPH80235zIz4wrHqw1XTT+KL5m/uKOXeiCuaLo7Ofde0t2z8/o6yucur0gay
k8tFBbtL+fnb8ofubcicLt5bzindUz6XszW7py4qe6hzbykL+syu3VE8mbc5
aw72ZHFnVO5od1LhfOeeUmbp6juvenYUTj5PKuIMbssVjGx6OvUisWCqLfQe
+01MtmhoWw7rQ0yu+JvPPcbI2rSvw8H3Jt4F/CZaCM8ULgQ/5nFXpUs+Ox5b
GLE4OMR2vz42aJ7AmHI8LuQ6nxZwHI4K2RYHFKl6jqw8w/Vjo+anxc2GmxYq
kSDOIHGj9AWyTtqNhCjeElYJdmkQGen6vvxBQrj8g0kkpxkfwH9sYC2uwNnJ
2hFXaTHORvnYwFh4Ws+IW4QzBU+wJh+OaWEXff6/Fo1ONVicz/gv8wjmMcw9
fSLmqo4J5hfo8+4fPv/w+W+UNiL5T007TAuRfCUNiweNRBLszmQVNFrWbkhR
dhGpqko8SfkER+A14cnCfqIpNJUu6cabKfthj+7HW8lycIbMchwd9mgXWR/e
Tf4K7yntx3vKK/FmsmIsXfIC8ZJDs+X9SICiEOskr8ZZMNvxzuNtuDWSIqwH
/6G+DbsYCeDOkhK/wtuMW3purEKTrfxnVockoxYnvmVT4iW51J3SItP9/F7r
M6yntL3z9+j7hDct9ksH3G7M3TA9IDxP2Tl9g3boU7PpLi7LiAI4ZlbQZxto
swWYJ5ABAzrJpkCvjczBHN4UHcVTUTbZCWXRXAGL6grYZGfosxvaR3RQzZMd
AJvmAVg0T/g9i/PI9rOfDH0nmZYbmdOkoM/T9HDWiJGfkGHiKGGSnLlMmpeE
S3ZG30Pz6/EkwDW2AizYm7mGFmAIev3eAAGfzYOVBUlFc5e3l06nxRYsXIwp
nMuMzpurSyp6l7a3nJEeVzh3J7GEdy+hiNW6o+hT5d6ysXtJpTM3Vz7qTI8t
EFbuKeXX7Cubvrs240thYrGgcl85t3x70WhzRGZrS0L+VMPeMmlrcimzLDpn
vjI2RzSwNXesLyZvrPtghaw5OnO2LPDq54HkYu67LdnTX1emTrzYXjD9MiR1
tn/NXdGX2DzRaFQ2d8LnLmvY5y7vc0we86PPldmPvtcknDVpIo5/qnDG+YKo
mxLDYgQ9FjA9r/A/mMZxpuz2i3j2h0VCq32KWmSlcLe6MfOrxQHJGG2PvMNo
M7cZWTnbjwuS9CPBitf4IEWevjlnmxqB349bJW5DVojeIKuFvdhVknx9B2GW
AY1fiTNXtMDtKh1rJLqlbwLSsCaV/9nmf55HBsaY/yJYY+jX78t7+kaYfct0
oc0/fP7h879/avDGf2rq4O8lG0vYfVsXC2CPhiHLodeKRgIJLUWMlfB3LilC
jMSdRKqknUiVdhPp8m6CqaoFoSsb8WT2Y32CaABvA612lL7EO0vbEDtBFWIq
bcIbip7B96qv8R7ylsVzeGDNJVlYinAYcf3Uh9i9zMPacx4amHGycCvEg/Rd
gs+kKMYjfWdOqdEmQQU1Vt5itovbT02czSJFycppibzFa2c9Nz/OzKLuZv5G
3i4rsD3K7Xa9OHmeksC/SoxozbI+w6h1us9oJgVKBKbQY1MrdJ5IRueIFNij
F7u0PXTYAkwRqeicsTnKoTpChxfjAjgkB7Bg7Ii+INiomGQ7wIFus2G4VDcw
SLQdGzZymueaBnIYtJDRj8bhzEmSp5RDc5MwyY48FtVJxCHZgklDGmiE70GY
JuaADV8PeMam4D2OCN7SvUDOlkxu6cHqqYvRBXMFCYWsGzGF7OJN2S8rdhS/
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
JXENuInZj2oiF1E9uIHbmWtYGnsFy+Da8NzISUQfOgg5fglLZ65g/flL6ED+
JlYY2aEyh/er8/iL6NDIMaQkegoZEbyFFvt2qPLZH9Bh/GF0JPSySd4a/Yya
KnwUU6Udx1XqJgg70eI7x/GRNzcR4+iP1EXew/FvR2sTFrk+105u/VQ3o/1I
9hf+E6mf04t0U5lWgoxROrkOnSCBrlo0dGKLPIfPLNVrTJDHcLkFOrQloatO
TcO4DPGxTtweoyG7abjca0yTHqLQq7WpLG3MDFJkapi2yT0nQ+kWMjlKW9Mh
n9NECv5On94Cvdwk3cAN0gXcEGvBNNJPiaO4reO2+8qnV7WUTd/p2f7SnuCm
SRUde8dtoY4uPBhYNWpbW9mkyrYNr+wL7Ri5rfrC/D3Oinn7HRUzqpx7JlZ6
qubuDf04q+rpidm72qomVHQeeHWv88T8fXU7h6xrOTm9InL1tX1u6NXeM/P2
+o6M30LdWbAvfHPWTsftl6s6b83b27kv7/PWK5M3g6dzqmB2RtsnlNHtY7Y9
u1+4oqV6ejnTMK0i3DyxDHROKIu4+q9wtGd/8/Q++dojz5A1DF2yKQAK14V8
gzdQTdY5dfXaqS31+sm+U1iJx5P+cZTO/FgAae9xvrT3o27btGijrtBVqylq
+6qPPnhMXchFyGnRdmJs+KG6RKhWFUFOp1GVSqP3ibp/+L46K7BOYQyXK43M
FTSRO4PGczfQ+MhFzCZeIYyeVQo0fBA1+FYrUMU/4/M/Mfog5Mi/NUdx8je7
EP1v3n1B8dyhe/jcw+e/bvajur9odqPafldwA2glLLG7hEk4R5DSaY0hdocw
8U9wU/g4pmXuYST7FDdHbmMW4Rom158tkM3xvOzSlzAjcwezc5ex5NglLJW9
jiWz5zCrf1mcOngOTeauYpnCZSxHuI4WRC9iqcwetT16CStk5OuUHkaKmFvo
8PBFJCt0ABnEHUWLwweRYdHH5AzXNd14ZyVaKuwkRnJb1AUNOxUFd+7iE+98
pSxwf06MCu+Kf5N5mvZF61LdZM9SwwzqbNbnwcO293zvaaYGH2oTBI/Z3M1n
q5xEyWeJl+q1RqkJclR+3sVmc3zXOhr6tUsbH3Mh1phXFy/54LI2TZL0DJPH
FdOi0JOjlD4x4rMNjNyHfG42JER81jQWGO0xSm+U/HpT13XCquHvr0G10nXM
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
t/rqx5f52yeVRx7kfU21lKwKOweva26aWhHunFzOdQxf77lof/Opt2RjEBSu
9bjTv+kEI7bw/mHrqUcJ81ob8pZy/oJVLMhfHgVJCx0g49Ogf+Dq6GPzJOqO
bR4VylrEgtT3WejKEY9uWCulG10TiP+T84l+UOtJTRHjj58nAPtLQco2laWN
Y4V6zM7WYvl+Gp7zNKKp7Ka+aq5enSwCRRLX1tsqOnrbhNZ+JmHBCy+4dvYz
hD2KbNGpyhEOKIzBD/qpuDq1lW9RJzCPEVv0LmoWzqF6cYUSlS6h5KSe+kZP
fs3504u9F+1Q4fK8N/ERTjLLFSrhB0wbOw15thfViKuViLADevVF3MA3EMbo
BVTnX9pPwcBtxPVKFDIU90G3Dsv1ZydhhyzWMh/36RfegWro4zgpnMJMwjnc
yrRhaexhRBOtRHTMaSyJPYomiT+gCfwzPNV3HDVDx7aJP6JJkNHp7E0slzuh
TghXqTPCu5AcdpMyS7iuLfEehYxfpUiPbVOmujarc1vqNZOZ84pBHYv6Zno+
7ZcnnDPMCVzSz275QDmAWYIWswd1MzvWqVLDHYQeejL0ZhPkLAn5DH3XDTnd
gBskD2QvbemudwC5H88MfVpPxh4TsnNDNhv0cLlBDhewWJkn+gS+UauXHHD9
vS5GG6TrCCHVZ79HNQzb7rtesI56UrzRfW/QWvZpxhJXw9CNLVcnbA/fG77F
8XBMWeDKkDXgwbC14QfTKtwXx5WBJxO2+56O3eauGb/d/6R0fce9Qd8+fjxz
ZxC6NfNk6CZfS8kmj2PstmDtpO2BhhmVHdft796pH7LS2TF6m8c5voztHLwG
3M9Y5GjPXv7UOXF7GIzeygRGl3HnrLPqavK+8vkLNwa96d8+pYo2hOkhGyNt
6e80XzDP9Pvyl/EgZ6ngtb78DCS+4aALVgq+zA8iJzWlVK39zaA/+R0eJL4l
UIbRHgof3AiS3o364l/1XyHs9bcMQ0Nh2yzGa54Q8pIjmXY8kbmhNHOd+GAW
oPmQzVZuS1+Ufwjd2NvPLrT3tohUX1vsu15xvg97xdFuZYLQFmePuVUp3Bml
jV0Sh7CP1CamGbGxDxAz9wTuM1UqQoL72js9/tyTX2ve69P7H49guppbhFG6
TpDiHUzPfRunEvegWnmeNwfZDH1WK1zTGMWbhFFsJIzh84gu/GnvftG1KhQy
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
karKV1fFd7xDrZ2dNONuISKfs6UOJVPuobXFHKnb3S03lLvVKcW80mgXlNqB
TrkecndUMUfryn20rqugjy/2qaPtbm1qsZ9NhHwe6+T1hmLePKTUqzbxdbL5
hezT9mCS6K9o1uJ83Wi+EzK6P9vkbtSs0nrNKvenoXZmWZ43Mm5Oz7gFyOd2
sSeFWu5Qbmfgd5DPusjoLHzvMZ27E/J+u1cKjWxzY8lvXVMdtx8fXrPxINTL
4p6g6Cf6EDzCa/dAHoX8Hqdfmgl7cPnwnkGRx4uG75Eu9rKZiHPE3culuD07
UOPAZ9rg3Fhq94yK8MBZwejeKyOxPe+q1s5WysTeY6eDZgY7SKaYV+sHe0m2
2EEaS3065LMMuaJk4LXMrh45W+qj2d15bXS+oI1yRO3drU2BfB7rFMwmyKTG
vXnzCJ4zmla20sx+tXf+47gjljrwMVmduTFdX9glcjrb4K7SWHGDajnbmchg
i+c1oKfdHsrcDQpzeyCbCwZkt5aG1y3eD4/baYYvkbUr/L4ehD6JX1THl9wR
l726cL6i8nshc+5JKnz4nME7IZP2672An9Yawu4R9wNFDf3EX+yfFPef7kgo
/KpIjQP1sy36ddyXJMWfVsUHzvq38J7pleG9/xWOD7RQa8dmqOE61HS5S60d
7KTZYq9aX+pSrFIHHVPMi3NH5Kzo91Pso1auS2F7etW67rw2aneB1kOtXe/l
c4GNdgpGvdunTdyet77OC1bjzX6/N5+Hh1N08ipW27w928Rz6TpnFWWlTsjm
gsEgh4epzN1KPPC5JfI5w3OQ3Tn43Q6oo9dQtmG+rEp+XwtCH8dNNYkJc2uS
RdFDwzubO6XwuyCbxdyzyGa/x7cvWEvMu8XchlhDJ9a1iHulooYW8843x1J8
djDq/DgC+SzVOLfE5NIVkerijIPCg2dXRkrXRhOlTmrt3khMu1evK7er2VKv
Vltsp1axA/K5W5tQzItzm+S020tqizk1m+8mZkdOH9WVJ/WlPLzWrdaVe/RJ
UD83uXmjzukzvjZYsCZszrPGEZM3DyRJBL7DLe3LNvCcVeuuVZjjnZ/und/L
eEFlvFNN2xsV0+0W88+Q0V4+w+sFyOg+qKMXKtrFfl8HQv9fN8eSB0Ht/K7Y
DyjWIvxafFcX2SyrJfj+Pmuk180faIb6eTnUzmJOQ9TPYk2LWHco+qheUxV3
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
EEIIIYTQ5+2/AfXo+Eg=
     "], {{0, 425}, {360, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag[
    "Byte", ColorSpace -> "RGB", ImageSize -> Automatic, Interleaving -> True,
      Magnification -> Automatic],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{360, 425},
   PlotRange->{{0, 360}, {0, 425}}]]]
}], "Title",
 CellChangeTimes->{{3.458167998168*^9, 3.458168026014*^9}, {3.458168804585*^9,
    3.458168823646*^9}, 3.458169712314*^9, {3.4581697486210003`*^9, 
   3.458169753225*^9}, {3.4581697840480003`*^9, 3.4581698593120003`*^9}, 
   3.458169994745*^9, {3.458175268823*^9, 3.458175269365*^9}, {
   3.458178240369*^9, 3.4581783292609997`*^9}},
 TextAlignment->Center],

Cell["A Tutorial", "Subtitle",
 CellChangeTimes->{{3.459646073079*^9, 3.459646105575*^9}, {
  3.4598890137901506`*^9, 3.4598890154981503`*^9}},
 TextAlignment->Center],

Cell["", "Subtitle",
 TextAlignment->Center,
 FormatType->"TextForm"],

Cell["\<\
Expand sections of the tutorial by clicking the small arrow to the left of \
the section's title.\
\>", "Department",
 CellChangeTimes->{{3.4598889398391504`*^9, 3.4598889610541506`*^9}, {
  3.4598890262421503`*^9, 3.4598890444701505`*^9}},
 TextAlignment->Center],

Cell["First Steps", "Title",
 CellChangeTimes->{{3.4581806382139997`*^9, 3.458180638869*^9}, {
  3.4596455718599997`*^9, 3.459645573133*^9}}],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.4581686725*^9, 3.458168689042*^9}}],

Cell["\<\
Clojuratica brings together two of today's most exciting tools for \
high-performance, parallel computation.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.4581686461400003`*^9, 3.4581686553459997`*^9}, 
   3.458168689042*^9, {3.458168784826*^9, 3.458168785705*^9}, {
   3.4581688492939997`*^9, 3.458168849425*^9}, 3.458169681035*^9, {
   3.458170236631*^9, 3.4581703056210003`*^9}, 3.458170340387*^9, {
   3.458170753553*^9, 3.458170766745*^9}, {3.458171000094*^9, 
   3.458171021848*^9}, {3.458172252781*^9, 3.458172271783*^9}, {
   3.4581736530559998`*^9, 3.458173670343*^9}}],

Cell[TextData[{
 ButtonBox["Clojure",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://clojuratica.weebly.com/#clojure"], None},
  ButtonNote->"http://clojuratica.weebly.com/#clojure"],
 " is a new, dynamic, functional programming language designed from the \
ground up for concurrency and parallelism. ",
 ButtonBox["Wolfram ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://clojuratica.weebly.com/#mathematica"], None},
  ButtonNote->"http://clojuratica.weebly.com/#mathematica"],
 StyleBox[ButtonBox["Mathematica",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://clojuratica.weebly.com/#mathematica"], None},
  ButtonNote->"http://clojuratica.weebly.com/#mathematica"],
  FontSlant->"Italic"],
 " is arguably the world's most powerful tool for numerical computation, \
symbolic mathematics, optimization, and visualization and is built on top of \
its own splendid functional programming language."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.4581686461400003`*^9, 3.4581686553459997`*^9}, 
   3.458168689042*^9, {3.458168784826*^9, 3.458168785705*^9}, {
   3.4581688492939997`*^9, 3.458168849425*^9}, 3.458169681035*^9, {
   3.458170236631*^9, 3.4581703056210003`*^9}, 3.458170340387*^9, {
   3.458170753553*^9, 3.458170766745*^9}, {3.458171000094*^9, 
   3.458171021848*^9}, {3.458172252781*^9, 3.458172271783*^9}, {
   3.4581736530559998`*^9, 3.45817367134*^9}, {3.458174603233*^9, 
   3.458174603434*^9}, {3.458226815403*^9, 3.45822681645*^9}, {
   3.458227032579*^9, 3.458227057567*^9}, {3.458917146547*^9, 
   3.4589171566940002`*^9}, {3.4596134399639997`*^9, 3.45961349523*^9}, {
   3.459613633153*^9, 3.459613636422*^9}, {3.4598894561481504`*^9, 
   3.4598894658851504`*^9}}],

Cell["By linking the two:", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.4581686461400003`*^9, 3.4581686553459997`*^9}, 
   3.458168689042*^9, {3.458168784826*^9, 3.458168785705*^9}, {
   3.4581688492939997`*^9, 3.458168849425*^9}, 3.458169681035*^9, {
   3.458170236631*^9, 3.4581703056210003`*^9}, 3.458170340387*^9, {
   3.458170753553*^9, 3.458170766745*^9}, {3.458171000094*^9, 
   3.458171021848*^9}, {3.458172252781*^9, 3.458172271783*^9}, 
   3.4581736530559998`*^9, {3.458227899874*^9, 3.4582279102060003`*^9}}],

Cell[TextData[{
 "Clojuratica creates a bidirectional interface enabling the ",
 StyleBox["seamless translation of native data structures",
  FontWeight->"Bold"],
 " between Clojure and ",
 StyleBox["Mathematica.",
  FontSlant->"Italic"],
 " This includes high-precision numbers, matrices, N-dimensional arrays, and \
evaluated or unevaluated ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expressions and formulae. "
}], "Subitem",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.4581686461400003`*^9, 3.4581686553459997`*^9}, 
   3.458168689042*^9, {3.458168784826*^9, 3.458168785705*^9}, {
   3.4581688492939997`*^9, 3.458168849425*^9}, 3.458169681035*^9, {
   3.458170236631*^9, 3.4581703056210003`*^9}, {3.458170459462*^9, 
   3.45817049867*^9}, {3.458170532984*^9, 3.458170538299*^9}, {
   3.4581710326800003`*^9, 3.458171050242*^9}, {3.458227765594*^9, 
   3.458227769*^9}, {3.4582279122200003`*^9, 3.458227919604*^9}, {
   3.458917176793*^9, 3.458917180763*^9}, {3.45961366052*^9, 
   3.4596136605810003`*^9}, {3.459613920477*^9, 3.459613944624*^9}, 
   3.4596140366540003`*^9, {3.4598894763181505`*^9, 3.4598894794331503`*^9}, {
   3.4599068235071135`*^9, 3.4599068236491137`*^9}}],

Cell[TextData[{
 "Clojuratica makes it easy to ",
 StyleBox["evaluate Mathematica expressions from Clojure",
  FontWeight->"Bold"],
 ". Now Clojure programs can take advantage of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s enormous range of numerical and symbolic algorithms and fast matrix \
algebra routines. "
}], "Subitem",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.4581686461400003`*^9, 3.4581686553459997`*^9}, 
   3.458168689042*^9, {3.458168784826*^9, 3.458168785705*^9}, {
   3.4581688492939997`*^9, 3.458168849425*^9}, 3.458169681035*^9, {
   3.458170236631*^9, 3.4581703056210003`*^9}, {3.458170459462*^9, 
   3.45817049867*^9}, {3.458170532984*^9, 3.4581705756470003`*^9}, {
   3.458171069174*^9, 3.458171069307*^9}, {3.458174628127*^9, 
   3.458174630771*^9}, {3.458227115473*^9, 3.458227148276*^9}, {
   3.45822730091*^9, 3.458227301125*^9}, {3.4582274673*^9, 
   3.458227468769*^9}, {3.45891718566*^9, 3.458917210428*^9}, {
   3.45961351096*^9, 3.459613529684*^9}, {3.4596137092460003`*^9, 
   3.459613709597*^9}}],

Cell[TextData[{
 "Clojuratica provides ",
 StyleBox["an elegant syntax for accessing Clojure from Mathematica",
  FontWeight->"Bold"],
 ", making it possible to call the methods of Clojure/Java classes without \
worrying about data-type conversion. Now you can run Clojure programs and \
instantiate Clojure classes seamlessly from ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". All of Clojure's concurrency features are at your fingertips."
}], "Subitem",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.458170576436*^9, 3.458170739815*^9}, {
   3.4581707867720003`*^9, 3.4581707884709997`*^9}, 3.458171243277*^9, {
   3.45817229*^9, 3.458172320189*^9}, {3.458174492049*^9, 
   3.4581744932679996`*^9}, {3.458180254363*^9, 3.45818027526*^9}, {
   3.4582271777539997`*^9, 3.458227184126*^9}, {3.458227280542*^9, 
   3.4582272866949997`*^9}, {3.4582274898129997`*^9, 3.458227516119*^9}, {
   3.4582276368310003`*^9, 3.458227637908*^9}, {3.4596137377060003`*^9, 
   3.459613770934*^9}}],

Cell[TextData[{
 "Clojuratica lets you ",
 StyleBox["call, pass, and store ",
  FontWeight->"Bold"],
 StyleBox["Mathematica",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox[" functions just as though they were first-class functions in \
Clojure",
  FontWeight->"Bold"],
 ". This is high-level functional programming at its finest. You can write a \
function in whichever language is more suited to the task and never think \
again about which platform is evaluating calls to that function."
}], "Subitem",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.4581686461400003`*^9, 3.4581686553459997`*^9}, 
   3.458168689042*^9, {3.458168784826*^9, 3.458168785705*^9}, {
   3.4581688492939997`*^9, 3.458168849425*^9}, 3.458169681035*^9, {
   3.458170236631*^9, 3.4581703056210003`*^9}, {3.458170459462*^9, 
   3.45817049867*^9}, {3.458170532984*^9, 3.4581705756470003`*^9}, {
   3.458171069174*^9, 3.458171069307*^9}, {3.458174628127*^9, 
   3.458174630771*^9}, {3.458227115473*^9, 3.458227148276*^9}, {
   3.45822730091*^9, 3.458227301125*^9}, {3.4582274673*^9, 
   3.458227468769*^9}, {3.45891718566*^9, 3.458917210428*^9}, {
   3.45961351096*^9, 3.459613529684*^9}, {3.4596137092460003`*^9, 
   3.459613712981*^9}, {3.459614052969*^9, 3.4596142144300003`*^9}, {
   3.459614259448*^9, 3.459614281354*^9}, {3.45961525527*^9, 
   3.459615256442*^9}, {3.45961569149*^9, 3.459615698809*^9}, {
   3.4598895152221503`*^9, 3.4598895561891503`*^9}}],

Cell[TextData[{
 "Clojuratica facilitates ",
 StyleBox["the \"Clojurization\" of Mathematica's existing parallel-computing \
capabilities",
  FontWeight->"Bold"],
 ". Clojuratica includes a high-performance, non-blocking concurrency queue \
that sits between Clojure and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". Now it is easy to run a simulation in Clojure with 10,000 independent \
threads asynchronously evaluating processor-intensive expressions in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". The computations will be farmed out adaptively and transparently to \
however many ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernels are available on any number of processor cores, either locally or \
across a cluster, grid, or network. "
}], "Subitem",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.4581686461400003`*^9, 3.4581686553459997`*^9}, 
   3.458168689042*^9, {3.458168784826*^9, 3.458168785705*^9}, {
   3.4581688492939997`*^9, 3.458168849425*^9}, 3.458169681035*^9, {
   3.458170236631*^9, 3.458170263191*^9}, 3.458170327742*^9, {
   3.458170430783*^9, 3.45817043079*^9}, {3.458170510451*^9, 
   3.458170512586*^9}, {3.4581709043710003`*^9, 3.458170925158*^9}, {
   3.4581723666800003`*^9, 3.458172370474*^9}, {3.458174498639*^9, 
   3.4581745243450003`*^9}, {3.4582275693789997`*^9, 3.458227612849*^9}, {
   3.4582279287530003`*^9, 3.458227930843*^9}, {3.4596152856029997`*^9, 
   3.4596154320299997`*^9}, {3.4598895717101507`*^9, 3.4598896336681504`*^9}}],

Cell[TextData[{
 "Clojuratica is open-source and targeted at applications in scientific \
computing, computational economics, finance, and other fields that rely on \
the combination of parallelized simulation and high-performance \
number-crunching. Clojuratica gives the programmer access to Clojure's most \
cutting-edge features \[LongDash] easy concurrency and multithreading, \
immutable persistent data structures, and software transactional memory (",
 ButtonBox["more on Clojure",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://clojuratica.weebly.com/#clojure"], None},
  ButtonNote->"http://clojuratica.weebly.com/#clojure"],
 ") \[LongDash] alongside ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s world-class algorithms for numerics, symbolic mathematics, optimization, \
statistics, visualization, and image-processing (",
 ButtonBox["more on ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://clojuratica.weebly.com/#mathematica"], None},
  ButtonNote->"http://clojuratica.weebly.com/#mathematica"],
 StyleBox[ButtonBox["Mathematica",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://clojuratica.weebly.com/#mathematica"], None},
  ButtonNote->"http://clojuratica.weebly.com/#mathematica"],
  FontSlant->"Italic"],
 ")."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.4581686461400003`*^9, 3.4581686553459997`*^9}, 
   3.458168689042*^9, {3.458168784826*^9, 3.458168785705*^9}, {
   3.4581688492939997`*^9, 3.458168849425*^9}, 3.458169681035*^9, {
   3.458170236631*^9, 3.458170254854*^9}, 3.458170342389*^9, {
   3.4581709563900003`*^9, 3.4581709701800003`*^9}, {3.459613568553*^9, 
   3.45961357069*^9}}],

Cell[TextData[{
 "The canonical pronunciation of ",
 StyleBox["Clojuratica",
  FontSlant->"Italic"],
 " starts with ",
 StyleBox["Clojure",
  FontSlant->"Italic"],
 " and rhymes with ",
 StyleBox["erotica",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.4598669088511505`*^9, 3.4598670463141503`*^9}, {
  3.4598671393701506`*^9, 3.4598671545031505`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Installation", "Section",
 CellChangeTimes->{{3.4581686293380003`*^9, 3.458168630366*^9}}],

Cell[CellGroupData[{

Cell["The Clojure Library", "Subsection",
 CellChangeTimes->{{3.458173608697*^9, 3.458173611244*^9}, {3.458173726865*^9,
   3.4581737298050003`*^9}, {3.4581803705299997`*^9, 
  3.4581803723640003`*^9}, {3.4596889421730003`*^9, 3.4596889426359997`*^9}}],

Cell[TextData[{
 "Clojuratica has two components: the Clojure library and the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package. The Clojure library will function whether or not the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package is installed. The ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package, however, requires that the Clojure library be installed. "
}], "Text",
 CellChangeTimes->{{3.458168053284*^9, 3.458168053535*^9}, {
   3.4581680888640003`*^9, 3.458168256718*^9}, {3.458168309076*^9, 
   3.4581683101800003`*^9}, {3.458168621991*^9, 3.458168640458*^9}, {
   3.4581691517860003`*^9, 3.45816917599*^9}, {3.458169598051*^9, 
   3.4581695998269997`*^9}, 3.458173208635*^9, {3.458173285711*^9, 
   3.458173286304*^9}, {3.458173377236*^9, 3.4581733830620003`*^9}, 
   3.458173433314*^9, {3.458173722237*^9, 3.458173827751*^9}, 
   3.4581743910889997`*^9, {3.458175297134*^9, 3.4581753008789997`*^9}, {
   3.4581803026219997`*^9, 3.4581803564119997`*^9}, {3.458226706486*^9, 
   3.458226720769*^9}, {3.459614391396*^9, 3.4596144369230003`*^9}, {
   3.459614680623*^9, 3.4596146819630003`*^9}, {3.45961486663*^9, 
   3.459614867524*^9}, {3.4598145755208354`*^9, 3.4598145868838353`*^9}, {
   3.4598896842941504`*^9, 3.4598896952821503`*^9}}],

Cell[TextData[{
 "The Clojure library provides access to ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "from Clojure and is contained in the java archive (JAR) file \
clojuratica.jar. "
}], "Text",
 CellChangeTimes->{{3.458168053284*^9, 3.458168053535*^9}, {
   3.4581680888640003`*^9, 3.458168256718*^9}, {3.458168309076*^9, 
   3.4581683101800003`*^9}, {3.458168621991*^9, 3.458168640458*^9}, {
   3.4581691517860003`*^9, 3.45816917599*^9}, {3.458169598051*^9, 
   3.4581695998269997`*^9}, 3.458173208635*^9, {3.458173285711*^9, 
   3.458173286304*^9}, {3.458173377236*^9, 3.4581733830620003`*^9}, 
   3.458173433314*^9, {3.458173722237*^9, 3.458173827751*^9}, 
   3.4581743910889997`*^9, {3.458175297134*^9, 3.4581753008789997`*^9}, {
   3.4581803026219997`*^9, 3.4581803564119997`*^9}, {3.458226706486*^9, 
   3.458226720769*^9}, {3.459614391396*^9, 3.4596144369230003`*^9}, {
   3.459614680623*^9, 3.4596146819630003`*^9}, {3.45961486663*^9, 
   3.459614867524*^9}, {3.4598145755208354`*^9, 3.4598145868838353`*^9}}],

Cell[TextData[{
 "The Clojure library's JAR file must be installed in the system's Java \
classpath for either the Clojure library or the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package to operate. "
}], "Text",
 CellChangeTimes->{{3.458168053284*^9, 3.458168053535*^9}, {
   3.4581680888640003`*^9, 3.458168256718*^9}, {3.458168309076*^9, 
   3.4581683101800003`*^9}, {3.458168621991*^9, 3.458168640458*^9}, {
   3.4581691517860003`*^9, 3.45816917599*^9}, {3.458169598051*^9, 
   3.4581695998269997`*^9}, 3.458173208635*^9, {3.458173285711*^9, 
   3.458173286304*^9}, {3.458173377236*^9, 3.4581733830620003`*^9}, 
   3.458173433314*^9, {3.458173722237*^9, 3.458173827751*^9}, 
   3.4581743910889997`*^9, {3.458175297134*^9, 3.4581753008789997`*^9}, {
   3.4581803026219997`*^9, 3.4581803564119997`*^9}, {3.458226706486*^9, 
   3.458226720769*^9}, {3.459614391396*^9, 3.459614465649*^9}, {
   3.459614813208*^9, 3.459614817476*^9}, {3.459614850494*^9, 
   3.459614882368*^9}, {3.459615495151*^9, 3.459615501777*^9}}],

Cell["\<\
To install the JAR file in your system's classpath, download the file and \
place it in a directory contained in your system's Java classpath. \
Alternatively, place it in an arbitrary location and edit your system's \
classpath appropriately. Typically one edits the classpath by changing a \
system environmental variable. The internet offers countless resources on how \
to access and edit the Java classpath.\
\>", "Text",
 CellChangeTimes->{{3.458168053284*^9, 3.458168053535*^9}, {
   3.4581680888640003`*^9, 3.458168256718*^9}, {3.458168309076*^9, 
   3.4581683101800003`*^9}, {3.458168621991*^9, 3.458168640458*^9}, {
   3.4581691517860003`*^9, 3.45816917599*^9}, {3.458169598051*^9, 
   3.4581695998269997`*^9}, 3.458173208635*^9, {3.458173285711*^9, 
   3.458173286304*^9}, {3.458173377236*^9, 3.4581733830620003`*^9}, 
   3.458173433314*^9, {3.458173722237*^9, 3.458173827751*^9}, 
   3.4581743910889997`*^9, {3.458175297134*^9, 3.4581753008789997`*^9}, {
   3.4581803026219997`*^9, 3.4581803564119997`*^9}, {3.458226706486*^9, 
   3.458226720769*^9}, {3.459614391396*^9, 3.459614564693*^9}, {
   3.4596149028570004`*^9, 3.459614911399*^9}, {3.4596155149110003`*^9, 
   3.459615519875*^9}}],

Cell[TextData[{
 "The ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " J/Link library, JLink.jar, must also be in your system's classpath for \
either the Clojure library or the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package to work.  JLink.jar is typically located in the AddOns/JLink \
subdirectory of the Mathematica installation. Some Mathematica versions will \
by default not install J/Link. If this is the case with yours, you can \
download J/Link for free from the ",
 ButtonBox["Mathematica J/Link web site",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolfram.com/solutions/mathlink/jlink/"], None},
  ButtonNote->"http://www.wolfram.com/solutions/mathlink/jlink/"],
 "."
}], "Text",
 CellChangeTimes->{{3.458168053284*^9, 3.458168053535*^9}, {
   3.4581680888640003`*^9, 3.458168256718*^9}, {3.458168309076*^9, 
   3.4581683101800003`*^9}, {3.458168621991*^9, 3.458168640458*^9}, {
   3.4581691517860003`*^9, 3.45816917599*^9}, {3.458169598051*^9, 
   3.4581695998269997`*^9}, 3.458173208635*^9, {3.458173285711*^9, 
   3.458173286304*^9}, {3.458173377236*^9, 3.4581733830620003`*^9}, 
   3.458173433314*^9, {3.458173722237*^9, 3.4581738372460003`*^9}, {
   3.4596149376099997`*^9, 3.4596149378389997`*^9}, {3.4596155353380003`*^9, 
   3.459615538748*^9}}],

Cell["\<\
Before doing anything else, make sure clojuratica.jar and JLink.jar are in \
the Java classpath.\
\>", "Text",
 CellChangeTimes->{{3.4581732230690002`*^9, 3.458173255697*^9}, {
   3.458173300981*^9, 3.458173374226*^9}, {3.458173408394*^9, 
   3.458173431539*^9}, {3.4581736176029997`*^9, 3.458173619172*^9}, {
   3.458173848843*^9, 3.458173848946*^9}, 3.458226692915*^9, {
   3.4596149507200003`*^9, 3.459614951382*^9}}],

Cell["\<\
Note: Mathematica has its own classloader. It will not be able to locate JAR \
files whose entry in the classpath consists of a directory and a wildcard \
asterisk (C:/Users/username/jar/*), even though Java allows this. You must \
enter the full path to the JAR. \
\>", "SubitemParagraph",
 CellChangeTimes->{{3.458173380528*^9, 3.458173380676*^9}, {
  3.4582266652679996`*^9, 3.458226687384*^9}, {3.458226834091*^9, 
  3.4582268583719997`*^9}, {3.459614577869*^9, 3.459614578561*^9}, {
  3.4598897338861504`*^9, 3.4598897343791504`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "The",
 StyleBox[" Mathematica",
  FontSlant->"Italic"],
 " Package"
}], "Subsection",
 CellChangeTimes->{{3.458173623507*^9, 3.4581736267390003`*^9}, {
  3.458180375013*^9, 3.4581803805220003`*^9}, {3.4596889431800003`*^9, 
  3.4596889433780003`*^9}}],

Cell[TextData[{
 "The ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package provides access to Clojure from ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "and is contained in the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package file Clojuratica.m. "
}], "Text",
 CellChangeTimes->{{3.458173856311*^9, 3.4581738841140003`*^9}, {
  3.4581752914560003`*^9, 3.458175294354*^9}, {3.45961459302*^9, 
  3.459614624152*^9}}],

Cell[TextData[{
 "The ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package requires that the Clojure library be installed. See the previous \
section for details."
}], "Text",
 CellChangeTimes->{{3.458173856311*^9, 3.4581738841140003`*^9}, {
  3.4581752914560003`*^9, 3.458175294354*^9}, {3.45961459302*^9, 
  3.459614645337*^9}, {3.459615595351*^9, 3.459615598053*^9}}],

Cell[TextData[{
 "To install the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package, download the file Clojuratica.m and place it in a directory in \
the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " path. Alternatively, place it in an arbitrary location and edit the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " path appropriately. To view the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " path, evaluate the $Path variable in a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notebook. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s documentation contains resources about editing the path."
}], "Text",
 CellChangeTimes->{{3.4581738858*^9, 3.458173907494*^9}, {3.458173962123*^9, 
  3.458174006808*^9}, {3.458174638885*^9, 3.458174661457*^9}, {
  3.458175322733*^9, 3.4581753400030003`*^9}, {3.4582267345039997`*^9, 
  3.45822675283*^9}, {3.459614975127*^9, 3.459615056974*^9}, {
  3.4596151008780003`*^9, 3.459615145758*^9}, {3.459615605484*^9, 
  3.459615622368*^9}, {3.4598897522851505`*^9, 3.45988977508615*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Clojure Library", "Title",
 CellChangeTimes->{
  3.458168767479*^9, {3.4581740516949997`*^9, 3.4581740546540003`*^9}},
 FormatType->"TextForm"],

Cell[CellGroupData[{

Cell["Getting Started", "Section",
 CellChangeTimes->{{3.459688519238*^9, 3.459688521427*^9}, 
   3.4596885959779997`*^9, 3.459688665209*^9}],

Cell[CellGroupData[{

Cell["Context", "Subsection",
 CellChangeTimes->{{3.458174183818*^9, 3.45817420929*^9}, 
   3.4581744061549997`*^9, {3.4581744392139997`*^9, 3.4581744399370003`*^9}}],

Cell[TextData[{
 "Clojuratica's Clojure library offers easy access to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " from Clojure and facilitates a Clojure-centric programming paradigm. In \
this paradigm, one uses Clojure to write the program's control-flow, making \
calls to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " when necessary. "
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.45817420929*^9}, {
  3.4581744061549997`*^9, 3.4581744076940002`*^9}, {3.458175361873*^9, 
  3.4581754108269997`*^9}, {3.4581754457139997`*^9, 3.458175524506*^9}, {
  3.458175614273*^9, 3.458175654616*^9}, {3.458180414624*^9, 
  3.4581804148970003`*^9}, {3.4596157740769997`*^9, 3.459615774642*^9}}],

Cell["\<\
In the Clojure-centric paradigm, the Clojure code can take the form of Java \
classes compiled using Clojure's gen-class functionality, uncompiled .clj \
files, or a mixture of the two. \
\>", "Text",
 CellChangeTimes->{{3.458175506619*^9, 3.458175587509*^9}, {
  3.4581756587939997`*^9, 3.458175659592*^9}, {3.4581804256540003`*^9, 
  3.45818043546*^9}, {3.458226915028*^9, 3.458226927922*^9}, {
  3.459615807224*^9, 3.459615848208*^9}, {3.4596182965439997`*^9, 
  3.459618320138*^9}, {3.4598897939371505`*^9, 3.4598897942071505`*^9}}],

Cell[TextData[{
 "A ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "-centric paradigm is also possible using Clojuratica's ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package. This paradigm is discussed in the ",
 ButtonBox["second half of the tutorial",
  BaseStyle->"Hyperlink",
  ButtonData->"The Mathematica Package"],
 ". "
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174215519*^9}, {3.458175426307*^9,
   3.4581754431619997`*^9}, {3.458175591683*^9, 3.4581756005480003`*^9}, {
  3.4581756699379997`*^9, 3.458175691401*^9}, {3.458226945207*^9, 
  3.458226963428*^9}, {3.4596157496540003`*^9, 3.459615761054*^9}, {
  3.45988983840215*^9, 3.4598898384031506`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Basic Setup", "Subsection",
 CellChangeTimes->{{3.458174183818*^9, 3.458174221542*^9}},
 FormatType->"TextForm"],

Cell["Getting underway, let's use the Clojuratica package.", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174229078*^9}, {3.458175725091*^9,
   3.4581757252799997`*^9}}],

Cell["\<\
=> (use 'clojuratica.clojuratica)
nil\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.45817423759*^9}}],

Cell[TextData[{
 "\nClojuratica needs to have access to a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernel running locally or remotely. The simplest way to provide this \
access is to launch a local kernel from within Java. The procedure will vary \
slightly by platform and is dictated by the ",
 StyleBox["Mathematica J/Link",
  FontSlant->"Italic"],
 " package. On Windows, the following commands are appropriate. See the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " ",
 StyleBox["J/Link",
  FontSlant->"Italic"],
 " user guide for more details. Note that these commands have nothing to do \
with Clojuratica per se. They are general to any Java program that accesses ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174241543*^9}, 3.458176309995*^9}],

Cell["\<\
=> (import '[com.wolfram.jlink MathLinkFactory])
nil

=> (def kernel-link (MathLinkFactory/createKernelLink 
                      (str \"-linkmode launch -linkname \"
                           \"'c:/program files/wolfram research/\"
                           \"mathematica/7.0/mathkernel.exe'\")))
#'user/kernel-link

=> (.discardAnswer kernel-link)   ;discard the prompt given by the kernel
nil\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174255502*^9}, {3.458174315908*^9,
   3.4581743205769997`*^9}, {3.459618597321*^9, 3.4596186230889997`*^9}}],

Cell[TextData[{
 "\nAssuming the above code did not throw a MathLinkException, we now have an \
active kernel. Note that only one or two master kernels can be active at once \
under most personal ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " licenses. If you receive an error, it may be because you attempted to \
launch a kernel when another kernel or two were already running. (In addition \
to the master kernel, up to four parallel kernels can usually be active; ",
 ButtonBox["parallel computation",
  BaseStyle->"Hyperlink",
  ButtonData->"Parallel Computation"],
 " is discussed later.)"
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, 
   3.458176311873*^9, {3.4596183737980003`*^9, 3.459618470141*^9}, {
   3.459618640017*^9, 3.4596186547609997`*^9}, {3.45988992907215*^9, 
   3.4598899776531506`*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Calling Mathematica", "Section",
 CellChangeTimes->{{3.4598144599668355`*^9, 3.4598144808888354`*^9}},
 FormatType->"TextForm"],

Cell[CellGroupData[{

Cell["The Evaluator", "Subsection",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.4581757511730003`*^9}, {3.4581881874820004`*^9, 
  3.4581881895439997`*^9}, {3.4596456662*^9, 3.4596456663269997`*^9}}],

Cell[TextData[{
 "The basic Clojuratica function is the ",
 StyleBox["evaluator",
  FontWeight->"Bold"],
 ". Getting an ",
 "evaluator",
 " is easy."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.4581757604449997`*^9}}],

Cell["\<\
=> (def evaluate (get-evaluator kernel-link))   ;get an evalautor that knows \
where the Mathematica kernel is
#'user/evaluate\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.4581757687799997`*^9}, {3.45988999520415*^9, 
  3.4598900110001507`*^9}}],

Cell["\<\

The evaluator is all we need to do some math.\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175793389*^9}, 3.4581763064639997`*^9, {
   3.459618670199*^9, 3.45961867709*^9}}],

Cell["\<\
=> (evaluate [] \"1 + 1\")   ;evaluate the Mathematica expression 1+1
(#<Expr Integer>)\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.45817579801*^9}, 3.4598900102811503`*^9}],

Cell[TextData[{
 "\nThe evaluator's syntax is similar to that of Clojure's let. The first \
argument is a vector of assignments, empty here. The remaining arguments are ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expressions to be evaluated."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175801285*^9}, 3.458176305041*^9}],

Cell[TextData[{
 "The output of the evaluator is a Java object of class CExpr. CExpr stands \
for Clojuratica expression. It is a wrapper class for ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expressions. CExpr objects can hold any ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expression. An expression can be as simple as a single integer or as \
complex as a thousand operations on a hundred-dimensional array."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175804267*^9}, {3.459618762913*^9, 
  3.459618829318*^9}}],

Cell[TextData[{
 "Remember that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expressions, and therefore CExprs, are homoiconic: they can house \"pure \
data\" (integers, lists, vectors, matrices, etc.), symbols for symbolic math \
(x, y, etc.), and unevaluated mathematical expressions containing operations \
and functions (\"1+1\", \"x+y\", \"FactorInteger[15]\", etc.)."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.4581758064890003`*^9}, {3.459618869861*^9, 
  3.459618886367*^9}}],

Cell["\<\
The following demonstrates that the output of the evaluator is a CExpr:\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175808882*^9}, {3.459618891809*^9, 
  3.459618892991*^9}, {3.459619022251*^9, 3.45961902323*^9}}],

Cell["\<\
=> (class (evaluate [] \"1 + 1\"))
clojuratica.CExpr\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.4581758147139997`*^9}}],

Cell["", "Text",
 FormatType->"TextForm"]
}, Closed]],

Cell[CellGroupData[{

Cell["The Parser", "Subsection",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175822882*^9}, {3.458188192*^9, 
  3.4581881924639997`*^9}, {3.459645665299*^9, 3.459645665457*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "We can easily convert the CExprs we get as evaluator output into Clojure \
data types and data structures. To do this we'll need a Clojuratica ",
 StyleBox["parser",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175837854*^9}, {3.459619043994*^9, 
  3.459619045385*^9}}],

Cell["\<\
=> (def parse (get-parser kernel-link))              ;get a Clojuratica \
parser that knows where the Mathematica kernel is
#'user/parse

=> (parse (evaluate [] \"1 + 1\"))                     ;parse the result of \
evaluating 1+1
2

=> (parse (evaluate [] \"3x + 7 + 2x - 5x\"))          ;remember, this is \
Mathematica: symbolic math works too
7

=> (parse (evaluate [] \"3x + 7 + 2x - 5x + z\"))      ;output that cannot be \
parsed fully remains in CExpr form
(#<Expr Plus> #<Expr 7> #<Expr z>)

=> (class *1)
clojuratica.CExpr\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175840991*^9}, 3.458176301368*^9, {
   3.458176403856*^9, 3.4581764047530003`*^9}, {3.459619073509*^9, 
   3.4596191349709997`*^9}, {3.459619502613*^9, 3.45961961185*^9}, {
   3.459619656835*^9, 3.459619677343*^9}, {3.459620255451*^9, 
   3.4596202706029997`*^9}, {3.459620418277*^9, 3.459620419097*^9}, {
   3.459620452374*^9, 3.459620475479*^9}, {3.4598900593821507`*^9, 
   3.4598901067311506`*^9}}],

Cell[TextData[{
 "\nTake note of the structure of the",
 StyleBox[" ",
  FontSlant->"Italic"],
 "second-to-last return value above. Like Clojure expressions, ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "expressions use prefix notation internally. The operator, Plus, is at the \
head of the expression, followed by the arguments 7 and z.\n\nThe parser can \
take a string as input instead of a CExpr. In this case it will parse the \
string as an expression without evaluating it."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175863664*^9}, 3.45817630281*^9, {
   3.458176423718*^9, 3.458176451679*^9}, {3.45961962271*^9, 
   3.459619622992*^9}, {3.459620282959*^9, 3.459620408425*^9}, {
   3.459620495916*^9, 3.459620562462*^9}, {3.4598901144081507`*^9, 
   3.4598901829041505`*^9}}],

Cell["\<\
=> (parse \"2 + 5\")  ;parse without evaluating
(#<Expr Plus> #<Expr 2> #<Expr 5>)\
\>", "Program",
 CellChangeTimes->{{3.458176466382*^9, 3.458176525144*^9}, {3.458176652223*^9,
    3.458176652467*^9}, {3.458176845984*^9, 3.458176890006*^9}, 
   3.459620573104*^9, {3.459620677283*^9, 3.459620678142*^9}, 
   3.4598901964461503`*^9}],

Cell[TextData[{
 "\nNote that the 2 and 5 remain separate. If evaluated they would sum to 7. \
You can store the unevaluated CExpr in your Clojure program and later send it \
to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " for evaluation. As the following shows, the evaluator accepts CExpr \
objects just like it accepts strings."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175863664*^9}, 3.45817630281*^9, {
   3.458176423718*^9, 3.458176468151*^9}, {3.458176528318*^9, 
   3.4581765552*^9}, {3.458176658658*^9, 3.4581766631879997`*^9}, {
   3.458176896561*^9, 3.458176908269*^9}, {3.458176999021*^9, 
   3.458177002302*^9}, {3.4596196305629997`*^9, 3.459619635413*^9}, {
   3.459619711146*^9, 3.459619762744*^9}, {3.459619932766*^9, 
   3.459619946725*^9}, {3.4596205984969997`*^9, 3.459620614264*^9}, {
   3.4598902039061503`*^9, 3.45989023305315*^9}}],

Cell["\<\
=> (evaluate [] *1)
(#<Expr Integer>)

=> (parse *1)
7\
\>", "Program",
 CellChangeTimes->{{3.458176668691*^9, 3.458176669135*^9}, {
   3.4581767004960003`*^9, 3.4581768325690002`*^9}, {3.4581769556140003`*^9, 
   3.4581769684779997`*^9}, {3.458917380704*^9, 3.458917425826*^9}, {
   3.4596197668450003`*^9, 3.459619766962*^9}, 3.459620647186*^9, {
   3.4596206951879997`*^9, 3.459620706771*^9}}],

Cell["\<\

The 2 and 5 have now been summed.\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175863664*^9}, 3.45817630281*^9, {
   3.458176423718*^9, 3.458176468151*^9}, {3.458176528318*^9, 
   3.4581765736219997`*^9}, {3.45817697155*^9, 3.458177010576*^9}, 
   3.45961979592*^9}],

Cell["\<\
Parse and evaluate are often used together. It is useful to compose them.\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175863664*^9}, 3.45817630281*^9, {
   3.458176423718*^9, 3.458176468151*^9}, {3.458176528318*^9, 
   3.4581765736219997`*^9}, {3.45817697155*^9, 3.458177010576*^9}, {
   3.45961979592*^9, 3.459619802281*^9}}],

Cell["\<\
=> (def math (comp parse evaluate))
#'user/math

=> (math [] \"3x + 7 + 2x - (10/2)x\")  ;pretty syntax
7\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.4581758665810003`*^9}, {3.458176322101*^9, 
   3.458176323748*^9}, 3.458917443543*^9}],

Cell["\<\

Keep in mind that the evaluator accepts multiple expressions:\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.45817587175*^9}, 3.458176325514*^9, {
   3.458176578533*^9, 3.458176580766*^9}}],

Cell["\<\
=> (math [] 
     \"foo = 3x + 7 + 2x - (10/2)x\"
     \"foobar = foo + 3\"
     \"foobar ^ 2\")
100\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175874416*^9}}],

Cell[TextData[{
 "\nThe foregoing could also be written using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " compound-expression syntax:"
}], "Text",
 CellChangeTimes->{{3.459620778068*^9, 3.459620834604*^9}, {
  3.45989026430315*^9, 3.4598902737151504`*^9}}],

Cell["\<\
=> (math [] 
     \"foo = 3x + 7 + 2x - (10/2)x;
      foobar = foo + 3;
      foobar ^ 2\")
100\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175874416*^9}, {3.4596208054969997`*^9, 
  3.459620809818*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Working with Data Structures", "Section",
 CellChangeTimes->{{3.459688591258*^9, 3.459688597178*^9}, 3.45968867835*^9, {
   3.459688735119*^9, 3.459688736757*^9}, {3.459688774708*^9, 
   3.459688779941*^9}},
 FormatType->"TextForm"],

Cell[CellGroupData[{

Cell["Lists, Matrices, and Arrays", "Subsection",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175877983*^9}, {3.458188167402*^9, 
   3.458188176534*^9}, {3.458917455901*^9, 3.4589174603120003`*^9}, {
   3.459619826407*^9, 3.459619845075*^9}, {3.459620850285*^9, 
   3.459620851832*^9}, 3.459628582793*^9, 3.459688711457*^9},
 FormatType->"TextForm"],

Cell[TextData[{
 "The parser knows how to handle ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " lists and arrays. They are converted to Clojure data structures on the fly."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.4581758832530003`*^9}}],

Cell["\<\
=> (math [] \"{{1, 0},
              {0, 1}} * 5\")   ;parse the result of multiplying the 2x2 \
identity matrix by 5
((5 0) (0 5))\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.4581758856689997`*^9}}],

Cell[TextData[{
 "\nThe parser converts ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " lists to lazy seqs. Two-dimensional arrays (aka matrices) are converted to \
lazy seqs of lazy seqs. And so on for higher-dimensional arrays."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.4581758902460003`*^9}, 3.458176327969*^9}],

Cell["\<\
=> (class *1)
clojure.lang.LazySeq\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175893829*^9}, {3.4596208764849997`*^9, 
  3.45962087702*^9}}],

Cell[TextData[{
 "\nClojuratica has no problem parsing high-dimensional ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " arrays. The following ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " code creates an eight-dimensional array, two elements in each direction, \
populated with ones:"
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175896822*^9}, 3.4581763291280003`*^9, {
   3.4598903109911504`*^9, 3.4598903111011505`*^9}}],

Cell["\<\
=> (math [] \"ConstantArray[1, {2, 2, 2, 2, 2, 2, 2, 2}]\")
((((((((1 1) (1 1)) ((1 1) (1 1))) (((1 1) (1 1)) ((1 1) (1 1 ... truncated \
...\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.4581758995629997`*^9}}],

Cell["", "Text",
 FormatType->"TextForm"]
}, Closed]],

Cell[CellGroupData[{

Cell["Assignments: Sending Data to Mathematica", "Subsection",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175932217*^9}},
 FormatType->"TextForm"],

Cell["\<\
Recall that the evaluator permits assignments in its vector first argument. \
That means we can write:\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175934602*^9}}],

Cell["\<\
=> (math [\"foo\" 2] \"foo + 10\")   ;evaluate and parse 2+10
12\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175937811*^9}, 3.4598903297671504`*^9}],

Cell[TextData[{
 "\nThe assigned objects can be Clojure data structures. They are \
automatically converted to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " data structures where appropriate."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175940722*^9}, 3.458176335429*^9, {
   3.458180704415*^9, 3.458180704668*^9}}],

Cell["\<\
=> (math [\"foobar\" [[1 0]
                    [0 1]]]
     \"foobar * 2\")
((2 0) (0 2))\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175943453*^9}}],

Cell["\<\

Clojuratica handles large numbers without loss of precision, using as little \
memory as possible.\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175946057*^9}, 3.45817633734*^9, {
   3.458180701425*^9, 3.45818070167*^9}}],

Cell["\<\
=> (math [\"bignum\" \
5847502438570428574320594860842574285743958.\
4329874329487329487324445309854309574302750296843750M]
     \"bignum + 1\")
5847502438570428574320594860842574285743959.\
432987432948732948732444530985430957430275029684375M\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175949625*^9}, {3.459623932105*^9, 
  3.4596239398199997`*^9}, {3.459624159039*^9, 3.459624176575*^9}}],

Cell["\<\

Variables set in the evaluator's binding vector are lexically scoped within \
the evaluator call.\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175951928*^9}, 3.45817633821*^9, {
   3.458178104342*^9, 3.458178104587*^9}}],

Cell["\<\
=> (math [] \"bignum\")
(#<Expr Symbol>)\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175954009*^9}, {3.459624189717*^9, 
  3.459624208796*^9}}],

Cell[TextData[{
 "\n",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " returned the symbol bignum rather than the number above, showing that \
bignum was defined only in the scope of the evaluator call that bound it. \
Internally, Clojuratica wraps each call to the evaluator in a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Module[] and executes the module. Modules implement lexical scoping."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.45817596401*^9}, 3.4581763392349997`*^9, {
   3.459624213108*^9, 3.459624221892*^9}, {3.4598903618751507`*^9, 
   3.4598903623531504`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["The Parser is Lazy", "Subsection",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175902292*^9}, {3.4581774183050003`*^9, 
  3.458177419689*^9}, {3.458919274127*^9, 3.458919275068*^9}, {
  3.4596285700620003`*^9, 3.459628572889*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "When parsing ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " lists and arrays, the seq returned by the parser is lazy. This is helpful \
for handling large data structures. Elements will be parsed just-in-time."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.4581759067650003`*^9}, {3.4598904288851504`*^9, 
  3.4598904509521503`*^9}}],

Cell["\<\
For instance, the following Mathematica expression creates a list with \
100,000 elements.\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.4581759122539997`*^9}, {3.458177447085*^9, 
  3.458177452367*^9}}],

Cell["\<\
=> (def long-list (math [] \"Table[i^2, {i, 100000}]\"))
#'user/long-list\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.4581759153380003`*^9}, {3.458177443707*^9, 
  3.458177443892*^9}, {3.45891769141*^9, 3.458917697975*^9}, {
  3.459620915708*^9, 3.459620916473*^9}, {3.4596242465220003`*^9, 
  3.459624246685*^9}}],

Cell["\<\

Taking the first 10 elements is fast.\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175920427*^9}, {3.458176257842*^9, 
   3.458176272159*^9}, 3.458176331703*^9}],

Cell["\<\
=> (time (take 10 long-list))
\"Elapsed time: 0.670057 msecs\"
(1 4 9 16 25 36 49 64 81 100)\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175922962*^9}, {3.4581774381280003`*^9, 
   3.4581774382980003`*^9}, 3.4589192238199997`*^9, 3.4596209331949997`*^9}],

Cell["\<\

Whereas running through all the elements takes time:\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175927715*^9}, {3.458176259233*^9, 
   3.45817627291*^9}, 3.4581763327650003`*^9, {3.45891923488*^9, 
   3.4589192361619997`*^9}}],

Cell["\<\
=> (time (nth long-list 99999))
\"Elapsed time: 8386.220665 msecs\"
10000000000\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175929818*^9}, {3.458177440177*^9, 
   3.458177440356*^9}, {3.458917546712*^9, 3.458917547578*^9}, 
   3.4589177731870003`*^9, {3.458918937347*^9, 3.458918942182*^9}, 
   3.45891912929*^9, 3.4596209809049997`*^9}],

Cell["\<\

Since this is a lazy seq, the data-structure is cached. After the first \
access, access times are constant.\
\>", "Text",
 CellChangeTimes->{{3.458917713251*^9, 3.458917762795*^9}, {3.458918923568*^9,
   3.4589189245889997`*^9}, {3.45891910467*^9, 3.458919106676*^9}, {
  3.458919240229*^9, 3.458919242876*^9}, {3.459621005278*^9, 
  3.459621062704*^9}}],

Cell["\<\
=> (time (nth long-list 99999))
\"Elapsed time: 2.406241 msecs\"
10000000000\
\>", "Program",
 CellChangeTimes->{{3.45891779117*^9, 3.4589177959*^9}, {3.458918945102*^9, 
   3.458918947887*^9}, 3.458919134842*^9, 3.45962099479*^9}],

Cell["\<\

Clojure never ceases to amaze.\
\>", "Text",
 CellChangeTimes->{
  3.459621022241*^9, {3.459621074274*^9, 3.459621075582*^9}, {
   3.4596242577939997`*^9, 3.459624272182*^9}, {3.4598905003231506`*^9, 
   3.45989050557915*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Parsing Directly to Vectors", "Subsection",
 CellChangeTimes->{{3.458177398751*^9, 3.458177415922*^9}, {3.458188115586*^9,
   3.4581881158929996`*^9}, {3.458919292525*^9, 3.458919309541*^9}, {
  3.459622861134*^9, 3.4596228635690002`*^9}, {3.459624283355*^9, 
  3.459624283465*^9}, {3.459628563033*^9, 3.45962856374*^9}}],

Cell["\<\
If you want constant access times from the get-go, you can tell the parser to \
parse to vectors instead of lazy seqs. Generally lazy seqs will be the better \
choice, but vectors have their place. The parser accepts the flag :vectors. \
The flag can go anywhere among the arguments to the parser.\
\>", "Text",
 CellChangeTimes->{{3.458177078711*^9, 3.458177170341*^9}, {3.458177215959*^9,
   3.45817722619*^9}, {3.458177285459*^9, 3.458177343166*^9}, {
  3.458177425924*^9, 3.458177427349*^9}, {3.458919365991*^9, 
  3.458919379208*^9}, {3.45962108181*^9, 3.459621130436*^9}, {
  3.4596218433529997`*^9, 3.459621858778*^9}, {3.459621996159*^9, 
  3.4596220058380003`*^9}, {3.459624292012*^9, 3.459624318852*^9}}],

Cell["\<\
=> (def long-list-cexpr (evaluate [] \"Table[i^2, {i, 100000}]\"))   ;as \
before, generate a long list of numbers
#'user/long-list-cexpr

=> (time 
     (def long-list-lazyseq (parse long-list-cexpr)))              ;parsing \
to lazy seqs, as before, is fast
\"Elapsed time: 274.136587 msecs\"
#'user/long-list-lazyseq

=> (time 
     (def long-list-vector (parse :vectors long-list-cexpr)))      ;parsing \
to vectors takes longer...
\"Elapsed time: 6551.951924 msecs\"
#'user/long-list-vector

=> (time (dorun long-list-vector))     ;...but access times for the vector \
are constant from the start
\"Elapsed time: 21.763451 msecs\"
nil

=> (time (dorun long-list-lazyseq))    ;whereas, as we saw earlier, the first \
traversal of the lazy seq is slow
\"Elapsed time: 8667.238434 msecs\"
nil\
\>", "Program",
 CellChangeTimes->{{3.458177191875*^9, 3.458177247377*^9}, {3.458177433567*^9,
   3.4581774675*^9}, {3.458177597598*^9, 3.458177600738*^9}, {
  3.458177652119*^9, 3.458177801373*^9}, {3.458177852127*^9, 
  3.45817786255*^9}, {3.459621149159*^9, 3.459621440731*^9}, {
  3.459621794933*^9, 3.459621802977*^9}, {3.459621863707*^9, 
  3.4596218753719997`*^9}, {3.4596219068269997`*^9, 3.459621922488*^9}, {
  3.45989055144715*^9, 3.4598905535681505`*^9}}],

Cell["\<\

High-dimensional data-structures are parsed to vectors without any fuss, just \
as with parsing to lazy seqs.\
\>", "Text",
 CellChangeTimes->{{3.45962489826*^9, 3.459624926245*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (parse :vectors (evaluate [] \"ConstantArray[1, {2, 2, 2, 2, 2, 2, 2, \
2}]\"))   ;create and parse-to-vectors an 8D array
[[[[[[[[1 1] [1 1]] [[1 1] [1 1]]] [[[1 1] [1 1]] [[1 1] [1 1 ... truncated \
...\
\>", "Program",
 CellChangeTimes->{{3.458177890638*^9, 3.458178017448*^9}, {3.458178086416*^9,
   3.4581780888129997`*^9}, {3.459621678285*^9, 3.459621697889*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Changing Clojuratica's Behavior", "Section",
 CellChangeTimes->{{3.459688812314*^9, 3.459688818205*^9}, {
  3.4596888806730003`*^9, 3.45968888477*^9}}],

Cell[CellGroupData[{

Cell["The Flag System", "Subsection",
 CellChangeTimes->{{3.459622822352*^9, 3.459622851039*^9}, {3.459622930612*^9,
   3.459622931308*^9}, {3.459623159823*^9, 3.4596231929630003`*^9}, {
  3.459623369328*^9, 3.459623380774*^9}}],

Cell["\<\
In the previous section we encountered our first flag, :vectors, which told \
the parser to parse to vectors instead of lazy seqs. Many Clojuratica \
functions accept flags that change their behavior. We will encounter more as \
we go on. \
\>", "Text",
 CellChangeTimes->{{3.459622031578*^9, 3.459622072592*^9}, {
  3.4596221153190002`*^9, 3.459622127259*^9}, {3.4596226338789997`*^9, 
  3.459622643546*^9}, {3.459623197773*^9, 3.459623205743*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "In the last section, calling the parser with a flag required that we eschew \
the use of the composed function ",
 StyleBox["math", "Program"],
 ", for the flag was a flag to the parser, not the evaluator. This was a \
pain. Instead of doing the natural thing and writing:"
}], "Text",
 CellChangeTimes->{{3.459622106391*^9, 3.459622233549*^9}, {3.459622417473*^9,
   3.459622451185*^9}, {3.459622658106*^9, 3.459622660442*^9}},
 FormatType->"TextForm"],

Cell["(math :vectors [] \"{1, 2, 3}\")", "Program",
 CellChangeTimes->{{3.459622246356*^9, 3.459622310182*^9}, {3.459622354236*^9,
   3.459622378851*^9}, {3.459622482981*^9, 3.4596224838120003`*^9}}],

Cell["\<\

We were forced to break apart the two calls and write:\
\>", "Text",
 CellChangeTimes->{{3.459622383201*^9, 3.459622386816*^9}, {3.45962245296*^9, 
  3.459622454953*^9}, {3.4596224924309998`*^9, 3.459622496255*^9}},
 FormatType->"TextForm"],

Cell["(parse :vectors (evaluate [] \"{1, 2, 3}\"))", "Program",
 CellChangeTimes->{{3.459622246356*^9, 3.459622310182*^9}, {3.459622354236*^9,
   3.459622395262*^9}}],

Cell[TextData[{
 "\nIn fact, it turns out that we ",
 StyleBox["can",
  FontSlant->"Italic"],
 " write the first form!"
}], "Text",
 CellChangeTimes->{{3.459622319925*^9, 3.4596223451280003`*^9}, {
  3.459622462465*^9, 3.459622471534*^9}, {3.4596225177460003`*^9, 
  3.4596225245220003`*^9}, {3.459622668461*^9, 3.459622670226*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (math :vectors [] \"{1, 2, 3}\")
[1 2 3]\
\>", "Program",
 CellChangeTimes->{{3.459622246356*^9, 3.459622310182*^9}, {3.459622354236*^9,
   3.459622378851*^9}, {3.459622482981*^9, 3.4596224838120003`*^9}, {
  3.45962253371*^9, 3.459622543418*^9}}],

Cell["\<\

This works because the evaluator accepts any flag at all. Flags the evaluator \
does not recognize will be attached to the CExpr it returns. When this CExpr \
is later passed to a parser, the parser looks for any attached flags and \
behaves appropriately.\
\>", "Text",
 CellChangeTimes->{{3.45962256095*^9, 3.4596226025810003`*^9}, {
  3.459622675117*^9, 3.459622767416*^9}, {3.459622844626*^9, 
  3.459622848608*^9}, {3.4596229179379997`*^9, 3.45962292616*^9}, {
  3.459623143266*^9, 3.4596231486070004`*^9}, {3.459623251572*^9, 
  3.459623278925*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (def foo (evaluate :vectors [] \"{1, 2, 3}\"))   ;the :vectors flag \
attaches to foo
#'user/foo

=> (parse foo)   ;later, the parser acts in accordance with the attached flags
[1 2 3]

=> (parse :seqs foo)   ;but you can override attached flags if you like
(1 2 3)\
\>", "Program",
 CellChangeTimes->{{3.459622246356*^9, 3.459622310182*^9}, {3.459622354236*^9,
   3.459622378851*^9}, {3.459622482981*^9, 3.4596224838120003`*^9}, {
  3.45962253371*^9, 3.459622543418*^9}, {3.4596229508129997`*^9, 
  3.459623041983*^9}, {3.4596231508459997`*^9, 3.459623154014*^9}, {
  3.459623845054*^9, 3.459623845282*^9}}],

Cell[TextData[{
 "\nAccordingly, you can pass parser flags to the composed function ",
 StyleBox["math", "Program"],
 ". Any parser flags will attach to the return value of the evaluator and \
then be recognized by the parser."
}], "Text",
 CellChangeTimes->{{3.459623290832*^9, 3.459623364451*^9}, 3.459624351135*^9},
 FormatType->"TextForm"],

Cell["\<\
Note that if multiple conflicting flags are passed to a function, only the \
first is honored.\
\>", "Text",
 CellChangeTimes->{{3.459624352598*^9, 3.4596243676*^9}, {3.45989065377015*^9,
   3.4598906544451504`*^9}}],

Cell["\<\
=> (parse :seqs :vectors :seqs foo :vectors)
(1 2 3)\
\>", "Program",
 CellChangeTimes->{{3.4596243832469997`*^9, 3.4596243978719997`*^9}}],

Cell["", "Text",
 FormatType->"TextForm"]
}, Closed]],

Cell[CellGroupData[{

Cell["Defaults", "Subsection",
 CellChangeTimes->{{3.45962307946*^9, 3.4596230851099997`*^9}, {
  3.45962338502*^9, 3.459623385318*^9}, {3.459623544309*^9, 
  3.459623547523*^9}, {3.459689201738*^9, 3.459689207866*^9}, {
  3.459689348344*^9, 3.459689349245*^9}, {3.4596967886619997`*^9, 
  3.459696791229*^9}}],

Cell["\<\
The basic function generators (get-parser, get-evaluator, etc.) all accept \
flags. Any flags specified during function generation will be retained and \
will modify the default behavior of the generated function.\
\>", "Text",
 CellChangeTimes->{{3.459623127144*^9, 3.4596231323780003`*^9}, {
   3.459623390999*^9, 3.4596234588570004`*^9}, 3.459623540916*^9, {
   3.4596244431470003`*^9, 3.4596244480959997`*^9}, {3.4598881383981504`*^9, 
   3.4598881515361505`*^9}, {3.45989070239515*^9, 3.4598907035241504`*^9}}],

Cell["\<\
=> (def parse (get-parser :vectors kernel-link))
#'user/parse

=> (parse (evaluate [] \"{1, 2, 3}\"))
[1 2 3]

=> (def parse (get-parser :seqs kernel-link))
#'user/parse

=> (parse (evaluate [] \"{1, 2, 3}\"))
(1 2 3)\
\>", "Program",
 CellChangeTimes->{{3.459623562199*^9, 3.459623690516*^9}, {3.459623830039*^9,
   3.45962383075*^9}}],

Cell["", "Text",
 FormatType->"TextForm"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Example: Requesting Output for All Expressions in an Evaluator Call\
\>", "Subsection",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175964692*^9}, 3.4581804639370003`*^9, {
   3.45962483937*^9, 3.459624845645*^9}, {3.4596250567349997`*^9, 
   3.459625059543*^9}, {3.459688985796*^9, 3.459688998609*^9}, {
   3.459689872309*^9, 3.4596898727460003`*^9}}],

Cell["\<\
By passing the :all-output flag to the evaluator, you can tell it to return \
the result of every expression in the call, not just the last. The flag can \
go anywhere among the arguments.\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175969672*^9}, {3.4581762371029997`*^9, 
  3.4581762397209997`*^9}, {3.4581807118570004`*^9, 3.458180712101*^9}}],

Cell["\<\
=> (math [] :all-output
     \"foo = 3x + 7 + 2x - (10/2)x\"
     \"foobar = foo + 3\"
     \"foobar ^ 2\")
(7 10 100)\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175969672*^9}, {3.4581762371029997`*^9, 
  3.4581762397209997`*^9}, {3.4596247598780003`*^9, 3.459624770177*^9}}],

Cell["\<\

As explained earlier, the :all-output flag can also be passed to \
get-evaluator, in which case it will be retained as the default.\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175972271*^9}, 3.458176341224*^9, {
   3.4581807144300003`*^9, 3.458180714691*^9}, {3.459624774663*^9, 
   3.459624780896*^9}, {3.4596248205299997`*^9, 3.459624829749*^9}}],

Cell["\<\
=> (def evaluate* (get-evaluator kernel-link :all-output))
#'user/evaluate*

=> (def math* (comp parse evaluate*))
#'user/math*

=> (math* []
     \"foo = 3x + 7 + 2x - (10/2)x\"
     \"foobar = foo + 3\"
     \"foobar ^ 2\")
(7 10 100)\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.4581759746949997`*^9}, {3.458176226387*^9, 
  3.458176229316*^9}}],

Cell["\<\

The opposite of the :all-output flag is the :last-output flag. Calling math* \
with the :last-output flag would override the default :all-output flag.\
\>", "Text",
 CellChangeTimes->{{3.459624960726*^9, 3.459624987065*^9}, {3.459689275657*^9,
   3.459689303903*^9}, {3.4598907542551503`*^9, 3.4598907568211503`*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Thread-Safety and Global Variables", "Section",
 CellChangeTimes->{{3.459689082408*^9, 3.459689095826*^9}},
 FormatType->"TextForm"],

Cell[CellGroupData[{

Cell["Clojuratica is Thread-Safe", "Subsection",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175984074*^9}},
 FormatType->"TextForm"],

Cell["\<\
Rest assured that calls to the evaluator executed in different threads will \
not interact.\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175987*^9}, {3.459625076178*^9, 
  3.4596250841949997`*^9}}],

Cell["\<\
Let's define a function containing some Mathematica code that would act \
erratically if evaluated simultaneously in different threads (if Clojuratica \
were not thread-safe).\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175990207*^9}, {3.458180719759*^9, 
  3.458180719907*^9}}],

Cell["\<\
=> (defn count-up [] (math [\"counter\" 0] 
                       \"Do[counter++, {500000}]\"
                       \"counter\"))
#'user/count-up\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175992854*^9}}],

Cell["\<\

Executing the function in four concurrent threads, we find that the counter \
variable acts reliably. \
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458175995398*^9}, 3.458176345009*^9, {
   3.45818050626*^9, 3.458180510863*^9}}],

Cell["\<\
=> (pvalues (count-up) (count-up) (count-up) (count-up))
(500000 500000 500000 500000)\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458175997743*^9}}],

Cell["\<\

If Clojuratica were not thread-safe, we would expect larger return values.\
\>", "Text",
 CellChangeTimes->{{3.458180515134*^9, 3.458180516565*^9}},
 FormatType->"TextForm"]
}, Closed]],

Cell[CellGroupData[{

Cell["The Global Setter", "Subsection",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.4581760000959997`*^9}, 3.459645677236*^9},
 FormatType->"TextForm"],

Cell["\<\
Variables defined in the assignment vector of the evaluator are lexically \
scoped within that call to the evaluator. However, any variables defined in \
Mathematica expressions have global scope unless you scope them yourself. \
This is a feature, not a bug, but be careful!\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458176002343*^9}, {3.4598908118801503`*^9, 
  3.45989082637615*^9}}],

Cell["\<\
=> (defn count-up2 [] (math [] \"Do[counter++, {500000}]\"      ;this time we \
do not set the counter to 0
                               \"counter\"))
#'user/count-up2

=> (evaluate [] \"counter = 0\")                                ;define \
counter---in a global scope!
(#<Expr Integer>)

=> (pvalues (count-up2) (count-up2) (count-up2) (count-up2))  ;probably the \
\"wrong\" result!
(500000 1500000 1000000 2000000)\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458176032626*^9}, {3.459625135457*^9, 
  3.459625215426*^9}}],

Cell[TextData[{
 "\nGlobal Mathematica variables can be set explicitly using the",
 StyleBox[" global setter ",
  FontWeight->"Bold"],
 "function. The get-global-setter function takes an evaluator as its first \
argument. "
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458176012646*^9}, 3.458176347071*^9, {
   3.458180543613*^9, 3.45818054385*^9}, {3.4596252360179996`*^9, 
   3.4596252771099997`*^9}, 3.459689066984*^9}],

Cell["\<\
=> (def global-set (get-global-setter evaluate))
#'user/global-set\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458176015252*^9}, {3.459625233274*^9, 
  3.4596252346949997`*^9}}],

Cell["\<\

It is good practice to use the global setter whenever you are setting globals \
you care about, so as to avoid confusion like that of count-up2.\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458176020758*^9}, 3.458176347942*^9, {
   3.4581807260550003`*^9, 3.458180726171*^9}, {3.4596252827349997`*^9, 
   3.45962529177*^9}}],

Cell["\<\
=> (global-set \"year\" 2009)
(#<Expr Integer>)

=> (math [] \"year\")
2009\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458176036884*^9}}],

Cell["\<\

Another reason to use the global setter is that it will accept arbitrary \
Clojure data structures. The global setter is the only way to store an \
arbitrary Clojure data structure as a global Mathematica variable. (Reminder: \
To store a Clojure data structure as a lexically scoped variable, use the \
assignment vector of the evaluator.)\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458176039891*^9}, 3.458176349479*^9}],

Cell["\<\
=> (global-set \"recentyears\" [2009 2008 2007 2006])
(#<Expr List> #<Expr 2009> #<Expr 2008> #<Expr 2007> #<Expr 2006>)

=> (math [] \"recentyears - 2000\")
(9 8 7 6)\
\>", "Program",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458176044731*^9}, 3.4596253446809998`*^9}],

Cell["\<\

A third good reason to use the global setter is that it automatically \
distributes assignments to all parallel kernels whenever the evaluator with \
which it was created was a parallel evaluator. Which brings us to...\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458176047532*^9}, 3.458176351092*^9, {
   3.4596253914849997`*^9, 3.459625404624*^9}, {3.4598909038441505`*^9, 
   3.4598909242941504`*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parallel Computation", "Section",
 CellChangeTimes->{{3.4596893596870003`*^9, 3.459689361667*^9}, {
  3.4596894015*^9, 3.4596894021800003`*^9}},
 CellTags->"Parallel Computation"],

Cell[CellGroupData[{

Cell["Introduction", "Subsection",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.4581760498190002`*^9}, {3.458178157709*^9, 
   3.458178163133*^9}, {3.458180183469*^9, 3.458180188942*^9}, 
   3.459628521426*^9, {3.45964568917*^9, 3.459645695574*^9}, {
   3.45968936487*^9, 3.459689365292*^9}, {3.4596894436280003`*^9, 
   3.459689445568*^9}},
 FormatType->"TextForm"],

Cell["\<\
We saw above that the Clojuratica evaluator is thread-safe. In fact, \
thread-safety is just the beginning.\
\>", "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458176052324*^9}}],

Cell[TextData[{
 "Clojuratica can also parallelize. It can distribute ",
 StyleBox["Mathemtaica",
  FontSlant->"Italic"],
 " computations from multiple Clojure threads to multiple ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernels, which may be running on multiple cores or even multiple machines \
across a cluster or grid. This is possible because Clojuratica adds a \
thread-ready concurrency layer to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s built-in parallelism capabilities."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458176054707*^9}, {3.459625427692*^9, 
  3.45962545844*^9}, {3.459689740502*^9, 3.45968975526*^9}}],

Cell[TextData[{
 "Using Clojuratica's parallel evaluator, you can have, say, 10,000 Clojure \
threads all sending different expressions to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to evaluate. Clojuratica will adaptively farm each expression out to the \
next available ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernel and ensure that the right ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " output is returned to the right function call in the right thread."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458176056882*^9}, {3.459625453781*^9, 
  3.459625454936*^9}, {3.4596897837939997`*^9, 3.459689799708*^9}}],

Cell[TextData[{
 "The parallel evaluator has two major selling points. First, kernels are \
never idle while there are expressions waiting to be evaluated. Second, the \
parallel evaluator's concurrency queue is robust to having fewer kernels than \
threads. Threads share kernels adaptively. This latter feature is important \
because ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s kernels are memory-heavy and limited in number by the availability of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " licenses."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458176060519*^9}, {3.4596254750299997`*^9, 
  3.4596255029890003`*^9}}],

Cell[TextData[{
 "On a hypothetical 50-core machine we would ideally have 50 ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernels available. The Clojuratica concurrency queue will ensure that \
every expression evaluated by one of our 10,000 Clojure threads is farmed out \
to one of the 50 kernels. While a thread waits for its computation to finish, \
that thread is blocked. The queue, however, is never blocked. Other threads \
can send expressions to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " at any time. A CPU-heavy computation from one thread will not block a \
CPU-light computation from a different thread from finishing on a different \
kernel."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.45817606329*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has support for an arbitrarily large number of kernels running on local \
cores or linked over a network. The number of kernels is limited only by the \
number of licenses available. This means that, in theory, you could have tens \
of thousands of Clojure threads evaluating thousands of expressions per \
minute, all being farmed out to hundreds of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernels across a cluster or grid."
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
  3.4581757490109997`*^9, 3.458176066108*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Setup", "Subsection",
 CellChangeTimes->{{3.459689474205*^9, 3.4596894749110003`*^9}, {
  3.4596897154820004`*^9, 3.459689716208*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "Because Clojuratica's concurrency queue is built on top of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s built-in parallelism capabilities, the setup of the parallel ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernels is done in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " itself:"
}], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.4581760688450003`*^9}, 3.4598909915561504`*^9}],

Cell[TextData[Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvXuQHMd959lxd//thv2PY1eO89o+h8/W3fo2NJDh2Og7Wz5ZWsryWrt+
YYC1CFI2t/24XVlem6YIGGutDGol2iYbJG0S8MCyRUoCSK1kvUYYDAiSAgFw
SDwIEABBNIYPEKTwmAGIp/gA9bvOqq7urOzMevQzu/rzifjFdFVlZf7yl1mV
38ms7vrffusPfvW3/udSqfT//U+l0u/X7X+pfxaDn/7pn8YwDMMwDMMGaD/0
Qz8k73jHO0xZFtNn733ve2VmZkZefvllZzoAAAAA6C3Xrl2T2ukF+V9/4YPy
A//sn8WOKX128uRJWf+NAxiGYRiGYdgQ7bFzV+SHfv03mzpNzaGt/+YBDMMw
DMMwzAP78unLgUZT651qnXPD9MGY7dixo2Mz88IwDMMwDMOy24OnrwTPrCmd
pti45VDMvvWtbwV2/tx5ef311+P23e/K9773vaa9+eab8mZ9v/qsdJqZF4Zh
GIZh2KjZ339hm1z/s78sv/ADP9ZXU2WosvSy/+HVy83vGCj+buZQ0/7+7/9e
qtWqnFtYaOq0y3sPxnTam3+1Tl6/dCnUaIZO0/PCMAzDMAwbRft3P7FUtm74
W7n8zJ6+mipDlaWXPfVKXKc9sP25mOnzad+t67Ld27bI25/5tHz3yhWR2adE
PvCf5fWLF+XqhQvy7Fe+LFdfeSX4roLSaWZeGIZhGIZho2ZqruvSgSfl9Oap
vpoqQ5Wll/3fX4zrtM8/cqxpaj5t3bp1wXzad+r66+rVq3Klrs8O/FBZ5I8f
ku/e/qR89yNb5PQff05q/+918urn7g/m2dS8mtJpel6hTcl7SyUpNW1Crn/A
TJPBPj0Znv8vV8sdec/FMAzDMAzLYUo7Xdz3hHzngfusdt/qNfJryypNU9tJ
+12mylBl6WX/+fNxnfbFR4/HTM2lbdu2TRYffTSw07Pb5LEfv06eu+EuOfLZ
A7L3j78u975rtTz1Ex+V7217KtBpb7zxRqDTzLy++OhG+YXSEln5+XD7zv+0
pK61/lTubEuXZCqPkvzCZ/Kcg2EYhmEY1pkp7fTaU4/Lyc/eZTWlwXTU9t98
fJV1vysPZaoMVZZe9pr5uE7b9Nh809R82oYNG4L5tDdfeUXe/vhqeeOdfyDz
P/cJmfuXvyNf+I0pWf+z/0X+ZuLDsusPn5C3P/olkb/aKPLA5kCn6XmFtlHe
V9dpN3zBtZ3FOjkHwzAMwzCsM1Pa6fwTj8lL6//San998y2BBnv77bebZttW
6Vx5KFNlqLL0sm89Htdpm3fMx0zNp+3cuTP8HsHiOXn7P31FTt7wj7L75p2y
4fY5uf2/PCifn/wrefHeZ+TSTTMiq6fk9eeeC3SamdfmHQ2Ntcm2HX5+34eW
SKm0Qm5VxzetkZ9orpGqfSpNa930Jz66PcynLV3W/DQfPrqiPd/AtssNP9Uq
831/MZ9QpiMthmEYhmEja0o7LT7+sDx/11qn3fNf/jjQYs3vVWqm9qvjSecr
U2WosvSy/6h2KabTHnr8haap+bS/+7u/C+bTrrz6HXn9vs+J/D+3yOsfuEe+
fc9ReexbL8pnq3vk879Slbn/PitvfHy3vDX/QvB9A6XT9LxC+6y8v66JbtwU
bt/90bqG+qn/Knc3jymN9Kg17UN/uaJxzNifmC5rfnVd9aHPNvcr3bUqOOdR
ufGn9DxSylTnRvlgGIZhGFYIU9rpuQ13yJZf+KlE++Qv/1KgyU6fPt00ta32
p52rTJWhytLL/uixuE770s4XY6bm0556fKfMfvRjcuzDvylv/av3ytv/91/I
i/91Th6dmpdHbt0lj/7Uf5It//uvy7mJPxb5VFXeeOGFQKeZeX1pZ0MTNe0/
yOrYsSXykc2N7c3/VX4yljbUUn1Pp28H5+g+puTV2P+Tf/CYpe4YhmEYho2i
Ke10bOM62fqLS5z25//+lwNNduLEiTZT+9XxpPOVqTJUWXrZv/dcXKd9efdL
TVPzaZ///OeD+bQzp07J5UuX5NzuOXn5X98ml3/2b+Wt962Tl/7zQ1L7o2nZ
/Qv/TebuWS876ue8/LWvBjpNzyu0v5d/U3q3/NaD5n7LsQf/LNBIfzrodPq2
6xxnXqH99cfeHWi3f3OH/TiGYRiGYaNjSjvN33+fPPLr77Habb/xa4EWO378
eNNs2yqdKw9lqgxVll72Tc/GddpX507GTM2nbd++PXg+Tf0ux8KePfL8u39Z
Xnrv74j81K/L5T+Ykbd/92siyz8hr50+HaQ5v7gY6DQzr6/O3S/X1TXQTf/D
3G87prZL8s4/fHwI6aLtx+Wm/8t1jm1/y+77w3cnHscwDMMwbDRMaacXH/p7
2flb/85qSoM9++yzTVPbn/7wb1r3u/JQpspQZell/+bhuE772lOvNE2fT1O/
m6Y02IlvflNeO3lSFvbtl4X/8z0if/dlef3Ugsj6v5XFup672kindJqeV2gN
DfQVc7/j2Fc+Ie/U1xZ/9f4BpLNtt865bl1CXus+rK2Fflg+0VZHDMMwDMNG
zZR2OvmNh2TvH/221f7ypptiv5OmtpP2u0yVocrSy1526GJMp319z6sxU/Np
u3btas6nRXbp3Dk5dsst8sax54Lt79a3L87Py5VLl5o6zcwLwzAMwzBs1Exp
p1MPf1MO3/YnfTVVhipLL/tXn4nrtG/sfbVp0fc9L164GNNoWUzpND0vDMMw
DMOwUbR//3/8a9m24W9lYdejfTVVhipLL/tDB+M67Zv7vhMzpbc6NTMvDMMw
DMOwUbO//ew3g/ejq7mufpoqQ5Wll/3BA/Hn0761/xSGYRiGYRjmgV33dHw+
bcvTpzEMwzAMwzAP7H374zpt5sAZDMMwDMMwzAN7b0Onqd+SiHTaa6+9hmEY
hmEYhg3RlCZ7z76Lzd/8QqdhGIZhGIb5Yeg0DMMwDMMwPw2dhmEYhmEY5qeh
0zAMwzAMw/w0dBqGYRiGYZifhk7DMAzDMAzz09BpGIZhGIZhfho6DcMwDMMw
zE/rRqd95i//GsMwDMOwgtiwNQnWe5127dq1sbCoDw/bD5+MmBCzqD5FoWjt
g2Xvw8P2wwdDp/lpvdBpFy9eLLSZ1/Kw/fHBiAkx0+tTFIrUPli+PjzubY5O
89fQaVzLxISYdVufolCk9sHy9eFxb3N0mr/WrU5766235MKFC4U2VcfoWh6H
+hITYpa3PkWhSO2D5evD497mUSyGrUmw/ui0Ydeh32Zey8P2xwcjJsSs6Dpt
2PHFBtuHx73N0Wn+Wi902vnz5wtt5rU8bH98MGJCzIqu04YdX2ywfXjc2xyd
5q91q9PefPNNWVxcLLSpOkbX8jjUl5gQs7z1KQpFah8sXx8e9zaPYjFsTYL1
R6ctLCwU2sxredj++GDEhJgVXacNO77YYPvwuLc5Os1f64VOO3v2rGFzsnZp
mF9p6VqZazveI9u0sv9l1M28lu3pNsnKRgwjW7mpk/JUPktl7VyP/J9bK0t7
mV+umLRs08p6TFZu6lsbjYJljlnUrwNbKZs88D2tPm6mpRK7LspSrfVKVam8
o/z0z1nS20lunwHd1/pimu+++5/lntWj+1p/7mM9vof3zJL9Qqf5a93qtKtX
r8r8/LzFNsqK0hJZs912rJN0tvNKsmJj3vPym6pjdC13X99+xaPXfvQiJg3b
vkaWLFkhK5b03y+fLVPMVKxKK2Sjtr1mo/99IKs2qlXLUipXpTdSrX86bXj3
tU4spaygTxn3yo761ZD87+P5/bmPDbLtexenKBbD1iRYf3RarVaz2JQsL03I
6m22Y52k69V5+c28lvvrT7f5DCYu2WIS2rbVEzKxelvzb7/by1fLFLOp5VKa
WC3bhtqH8tcnuzbKoqey0l+d1l1sB3d/Si5rm6yeKMnyqeH3//7FqvPz+3Mf
G2Tb9y5O6DR/rRc67dixYxabkknVJ2a1z6snm+VMrJ5t7Nfm4ienwnNnV8tE
c/+kTGn5TU5OxNYWW3kdk6lJS16BzQb3qujY5NSxhHLazbyW0+sbL7dZnrKp
yWAcnnX6a4nbrL2M9vNt8TTyiNVZ983VRt3EJIpBo3xVdqPusTKnWj61ykw6
5m67pJiGfSdMmxh7ZwwG1Y/s5dr7kelT/mtKj7EqY3b1RO4+kF0bxbenK5qv
lelYmkqlXN9fkemUdFadVqtKuVnfMI+8Om3w9zW1L6UPtuXhKCuW3t0nO78n
5PXTdQ0l3bOS+n2Uxjx/deI9tz/3sXh9J1avzuD/gO5BVr+Sr+dhaxKs9zrt
ypUrcvToUYttCPrEqpnos+qLG8JjGyaDvrShLZ1lu552YtVMM4/ws+08V9kz
smpCPy+tnPb8VB2jazm5vrp+bNRP1TWqd9021K/NyQ1psbJ9Tqpz1nNCH5vl
z6yqX8NZ2qjTmDTKmFglM0ejtjB9q5cZHbf54zyW1nbt9ba3b9Z+Oqh+1Cqr
pLeVqx8Z++39JPmaasZ4Qzg2NP3P0Qey6jT3uqepuUpStgoqlzZL0GzTlUZe
2XXacO9rGfOM5eG4F8auP/d9K/89oRM/M15D+rbz/plwz8t0z+39fSwqY2aV
0txp/g/iHpTgV0Ishq1JsGHqtCTtoB0L7hPx+bKwz2bQLBsmtfMax4L8LGON
s5xOr+UkDaXdv/R7ps3fPDot9Xxj2xIL+30vqT757m/q3qDfV4J7RTPO7WW4
/dGOJbVdppj0Jnb96UftebfiYelHjTTxe3evrqnsfSBZp+llR3NbLQ3V/h0D
i55KTad9js2l6XNw/dBp/b6vmX0wSx5mH3Jr7c7vCR346fQlrRzb/TPNF8c9
tx/3sTYtnMX/AdyDEv1yx2LYmgQbFZ2W91o2z9P+30ns2wn3r9zXsvsaiK7x
2LXu8jfXvTDt/PTrvL86zZxjNOYa28oI/1+0+6Mdy9SmCTHpUez604/a+040
Hlj7kZ6u5Ihdp9dUz3SaQxsFeirSbTWplpPWMNPSmTrN0INpvgxEp3XZBpnz
0E2/pizWN52W51pJjoG93yf5knyt9Pw+lqKHOr//dxlXdFphzDud1rYOkPF+
pv43sa6RJc0Vu9bCOr2Wk9YeJuv/S2nXktNfPR/jHhv8/6XNp2dZE7TMqcfX
ODKu03QSE91H67hhtEGbPxmP5Yppp7EbUD/asKpNm8ZiEPSj5P8HenZN9Vun
qTmyaA000Fbudcv0dFnWTYeo03rSBlnzsFyHJUOr1fvSKu0azH9P6MTPpGso
5X9w8/6ZotPSrpV+3Mec64sd3/+7vQel+OWIxbA1CdYfnXbkyBHDtsit0bOO
E7fKliPrZVm9f9y6JToe316/rJF22frw+JZb4/O4wf7kPOJlLpNlE2baVn7L
1h9JKMesy5G2a9mWxiwjeM7n1i1x32L5u/w16rV+mebfMu2Yu77xeBr5xeqc
FE9zO39MlB+tGLRsy60TMd+WLZtob5vEY662yxjTzOls2wPuR0ZeQdvq+/T+
UVom6/V0XV9T2ftARzotmBtr+FOuSMU1n5YpXdL3CDpb9/TjvpZ0/bbybivL
NPO8wP9u7gmd+em6hhLvWdb7Z0qsbddK3+5j8etw4tZbM/g/oHtQol/2WAxb
k2CD0mnFsmzj63hZb2KSpAOSNcIoWi9ipsaMmF71pD5Fgeu8OJblWuHe3h6L
YWsSDJ3WTf8dl/oOLibotFym/mfW50E8qk9R4DoviGW8Vri3t8di2JoE671O
u3z5shw6dKjQpuoYXcvjUN/BxeRe+Y3Su+SW6bzHRtM6j9m03PIudX36FQ+9
PkWB63zULd+1wr29PRbD1iRYf3TawYMHC23mtTxsf3wwYkLMiq7Thh1fbLB9
eNzbHJ3mr3Wr0y5duiQHDhwotKk6RtfyONSXmBCzvPUpCkVqHyxfHx73No9i
MWxNgvVHp+3fv7/QZl7Lw/bHByMmxKzoOm3Y8cUG24fHvc3Raf5atzoNwzCs
KAw7jhiGjYdFDEKnAQAAAEA20GkAAAAAfoJOAwAAAPATdBoAAACAn6DTAAAA
APwEnQYAAADgJ+g0AAAAAD9BpwEAAAD4CToNes3dd98tt9xyi3zsYx8rpKm6
qToCAAD0G3Qa9JLP3H67rFu3Tk6dOiXXrl0rpKm6qTqqugIAAPQTdBr0kptv
vlnOnDkjb775ply8eLGQpuqm6qjqCgAA0E/QadBL1LqgmnMatpbqt6k6qroC
AAD0E3Qa9BKlXd566y25cOFCoU3VEZ0GAAD9Bp0GvQSdBgAA0DvQadBLIp2W
pT+MsqHTAABgEKDToJdEOu38+fOFNnQaAAAMAn902rRUVJ6VaevRWrVcL68s
1Vova58V5Ztedk2qZbev/StX328r35V+cCjtor4Pubi4aNhmuaG0VG7bY+7v
pQ2ijNBUHdFpAADQb/zSaWUplxN0SUcapBfaJZ7HdKUk5YGIoSSdpmJVkrhU
80enLSwsGLZJVtY11Nonzf29tEGUERo6DQAABoFvOq1SKbdroOmKlCqVDjVI
b3VaMK/X93m09nKt+6erda1WlVpq+sEx6jrtne98p9PQaQAAMGh802nVmvpb
kZYSUmuM0f74nFbkQ0s3NdYjG/sr09E8nJGuVtc3zf1RWS2dWIqVr/lWrevF
mC6SHPlpeTTSxvRoQh5OnVYz5/ayxEjTeM04RevKGf2adsRBWjrt7NmzhjU0
1Jy5v25za2Wp1k4rN+nH52Tt0vZjm1ZqdVu5Kb2MHGbTaGYadBoAAAwC/3Ra
qC9a0iuaM0rXLOG8W9ozW8Z2/ZxQl4Sazr6e2dJ77VNpWfMznilTvrr0WCyP
lDo7PyelL7V01nQlrs2y+JWi065evSrz8/OGbZQVpSWyZrttf0lWbGxsb18j
S5rptsuaJSVZsma7JT9bvq4y8puu0WzHVR3RaQAA0G981GktbaZrtnbN0JxP
0c9r01rGebH5IX2uKWnNUJ+DMtJkzi9hO7dPlljY0tti1BO/3EQ6rVarGTYl
y0sTsnqbsX/bapkoLZcpbd/U8pIsn7Ifa9rUcs2vKF9HGR2a0miuY+g0AAAY
BF7qtGitM/b8lakfojmfaF20lVO0hmfVd7FzXeUnHIvNN+XJL00P5fHJ/v3T
cJ03LUa98MtNpNOOHTtm2JRMKg01a+yfVVpsUqa0fVOTJZmcsh9rP2dWVk9E
+TrK6IOh0wAAYBD4qdOkfT3O1EqRfqtZ5rgk1Gr2tUPX+mZGndbIuxTTj1ny
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
frb95bruTL+mU87JEP/O+p7RBjHdHM3lmn1DP0+/3u3p0++NpbhZ17gt98jU
e3YLdBr4RlF0mj1N2vWr3QuURmjeB8N7Svv13DgnujfFzklIF9xTs2mlxHGh
rU4Jda37lrz+E+0P69q6rSblY47nrvhl8MVcw4ryGAOdpp7ZVs8DfWPmYdl7
4Ig8c+SY1OZfkJMnX5HTp0/LqVOn5ekDB4M0Km2cVgxjz2s1x8wOdHlS22XO
L5tOiOq+5q/uk3f90g1SPfyKXL9vXt75uQPyz2/fLe949wfkzqkvOOqu17le
ZqOvTFdsfSrpWk3u4/a4mHXvou9bymz9i6Q/X9jJOdni31nfE0Ob6brZ4m8s
ZJbrPbHfJN0b0/qopa+n3otboNPANwqj06Yr2v9ZWXWa41hwLbvuz3nHsMg9
bUzN5GuWdKbPWf7XjPtYNvVo5nzS4peSh+XZonEhGitnt39bnj02Ly++9HIw
Rp4/fz64Ts6ff01qx48H23ffc49xthHDplYx5ny1sb1n10Xm/NLr/snqVF2T
XSc/ducu+dGNB+Qd9x2Q71u7K9Bp997/JUfdpTXea+O+fR2uy/5pzcO1P0Pe
Sftj/5tkzMt1Tsb4d9b3pG2tM9CIWeZVrdd7J/e8vNsp92IL6DTwjULotJiu
SnpGZVg6TZuzyuprpnSd+KzvLwXPo7c/m91J3TvzJZwLSL5vFo0vbtok8/Pz
sv/AM3L4yNHmOHn58mW5cuWKnDt3Tk6dOhWkUWnjmGvHjTWd2PqTrR16fV10
9ixYVPdHd84Fa5zf/57r5fv/fLf8k0/uln/6s9fLj7xnuTx3/HlH3aWpUabV
s2n6XGKlmjK308/rO0PeSfsTdVrOc1Lovu8ZujHTMxa66/r13sk9L+92wr3Y
AToNfKMQOk1fL4vNaxvXZPC/WpZrP2ndM+t9XDtfv/84fbXMW6Smy7Jumj7W
qP8vzfXM/HXv3Jfm/+hjsu65b98+2To7KwsLi7J333556cSJ4PpQY+WFCxfk
7NmzwZyHSqPSxrHPb1nnkbL2NUvft14zmfPLVvf19z8k/+LnJuUdSz8oP/jT
H5Qfrn/+8pZHEure8q/U5r/x/FZP+mcHOi0xb/d+97pn3nOS6arvWa9Pvb9k
6wfO7+R21F9NH8Ryn3fcix2g08A3Rk+nxf+XC68/7RlV8/vi+jx67LtwWXSH
43sEGe/j+nOvrf/fXL7a7z3J6Wz/j+Zb99TH5vg9sot1zyx5xNY3LBq2wOi/
jfDaaxfkxMsvh88HnTkj586dD367Ku13OeL9xKVPsva1hLXN2DWTNb/sdT9w
+Fn5wj/OyOZvbJPjL5xIqXujxkqXGP2k/fe8uuyf1jy6yTthvxbv5O8RZDwn
gW76Xvz/uRb62mfzewC2Z0/b5t/M9Nn7V1s5Kfd5+73YDjoNfGO0dNqokH3c
gvFEjYdqLFTzFur3RdV8hjL1PTu1Tx1L+63RUWWc6+4D4xX//PfiYo1FUATQ
af0AnQbpqPkKtbak3tdzx513BqZ+C0HtK/q7e8a57j4wPvFHp8Hog07rB+g0
AIDhg06D0QedBgAAEMJYBL6BTgMAAAhhLALfQKcBAACEMBaBb6DTAAAAQhiL
wDfQaQAAACGMReAb6DQAAIAQxiLwDXQawHBQv1O1/+mng9+wUu/HVqY+q33F
+g2rdsa57uA3jEXgG6Ol09rfG9XZ+7t7/PtmsXfR9YjoPShJ71Hq8B2LHTjT
59+DS3q3fDF/h0793vv9DzwgM1u3Br8Jr96pqEx9VvvUMftvwvfqGhgende9
Rft7ooK9A+ynUFTQaeAbo6fTenGf7DafQYwHecffAuq0gqK/Y3Fx8ZxsfWSn
3Hb3ZwPb9thOWTx3Lvv7PQM9n/xeaZ9iatZ919xe+ebWRwJ74ql9KXVvoPS7
+R7fAHQadA86DXwDnTaM8/uRPzptVFBre2re6PSZs/KZez8nP3ndjfKB3/64
/MyvVORHf3653LHhATm7sBCkUWnjZH1XeNI5w0Ov+9e3PCwPf3u3PLH3oMzt
e0Z2PrFHttd1qrvuIeq93+p94NHfFj5elzBqoNPAN0Zfp9WkWjbmntQcQ2O9
MFgfidaImomSdEF8u/18Y92puU/LI1ivs61LNdJVK81j5babfjz/6Hi+eiTV
KfxcqZRb8zAxf21zM43zp1vpdL8TfXPVtabnVc1Qjw7z0/qCL6j3KKp3Xs9s
f1x+/H3Xy7qv7ZLdZ9+W3/v2IfmBn/+w/PB7JmVuz94gjUobxzKfptevrS3d
/TXsA3Wtk3D99KvugSbbMSdP7T8s+w4+K4ePHpfjz78ozxx6Vg4dPuyoe1DB
+vWurYvH/BxkP5Uur3PwFXQa+Mbo6TT92ZyGplDjijbQqPtx+5phJ5omy/m2
Y1r5bc+QaWOEc80q6f/2LPVI9681brSP+07tGI2JmfxOqms8RmpepJSpTh3k
56FOU8/Mq+ex1vzVffKuX7pBqodfkev3zcs7P3dA/vntu+Ud7/6A3Dn1hSCN
ShvHprv0Y7a2tPUHrQ9kun56Q1T3b8w8LHsPHJFnjhyT2vwLcvLkK3L69Gk5
deq0PH3goKPuYmgzTbNp9Wq2t/P5xl71026vc/ARdBr4xujpNNd9V7u36uPy
dEXTdR3otNTzje3gfh2/J7fGvU40YSf1SJ9Pc80JtI/9fYqRbR6k0zol5ucf
kVb5ZHWqrsmukx+7c5f86MYD8o77Dsj3rd0V6LR77/+SnD9/Xu6+5x7j7IS+
5mzLtH6XcP30qe6z278tzx6blxdfejnQZ6qu6h5x/vxrUjt+3FF3aVvrDLST
dX65sUfXnL3spz25zsFH0GngG8XQaY5nVmL3Uv1/7xzjf+r5Sec0jnar03LX
I69Oy/sceg9iNMY67YubNsn8/Lw8unMuWOP8/vdcL9//57vln3xyt/zTn71e
fuQ9y+W5488HaVTaOPG6ufu7+xxbfNzPfPWWqO77Dzwjh48cbWq0y5cvy5Ur
V+TcuXNy6tSphLobOjS2Vm/WS3smotf9FJ1WWNBp4BtF0Wmt74Bp9059zcv5
GxbG823B/9yWNbPE38BIW/d0jSMZdVomPzLWKW0NLFPcte0exCj7umcH+Xm4
7rlv3z7ZOjsrCwuLsv7+h+Rf/NykvGPpB+UHf/qD8sP1z1/e8kgw56TSqLRx
8qxpZzmngfM7lL1Fr/veffvlpRMngnuD0mkXLlyQs2fPuutubUu9rxv116+9
vvTTbq9z8BF0GvjG6Om0+P/SrTEpvF/H1+wa+4JnVvQxKGHdrlJp0zvt50vr
meTU7xGkrTdlWffMUo+sdXKM0R2ve2aMcYJ/ub5HkDc/D3Wa/tsUr712QQ4c
fla+8I8zsvkb2+T4CyeC3w7L/Lsc0tAPMQ3S3paJ/TXK2fqbZL3FrPuJl18O
n007c0bOnTufWHfln+3/idbaZ1iv8PsR5rP9ve6n0oPrHHwEnQa+MVo6DSAD
mdZyh4vSI0qLqHkj9fuuaj5Jmfqeo9qnjqX91muv6ef3B3R8rDtABGMR+AY6
DYpGMC/k2RyaDTVfpNb21PuS7rjzzsDUb1GofQN/d1Lbs1j9xau6A2gwFoFv
oNNg9NHWtGLPlUM6UexYlwNQMBaBb6DTAAAAQhiLwDfQaQAAACGMReAb6DQA
AIAQxiLwDXQaAABACGMR+AY6DQAAIISxCHxjlHRa9P39PAbgG/RjAH9Bp4Fv
jJpOi34T02avv/66vPHGG3L16tVgm/ENfIR+DOAv6DTwjVHUaV/++kybze15
WjZ+8VG55VMPyfEXTgbvdHaNb8136DjfQeUbw3jvTI4yo3frJP1OauI7Fbvx
x/PYWOhVP7a9R63z9wkk1cmn9x4lvUssLf2AifV5D/LpOT71i96BTgPfGFWd
9tT+w03b8/QRWTx3QSZ/f6O87z/cJTOPPB3MRaTPQ/TqPtPv+5XPWsR4H3VP
885yjs+xsdO7ftzLuqPT+osvfihG5b43HNBp4BujrtP2HjgiL554Vb6yZb+8
vz62/cdbPi/f+c6pjOtFo3K/8lmL9FJzdXKOz7Gx07t+jE5Dp3XCqNz3hgM6
DXxjVHXa4efm5YUTr8jho8fl4qXLsvIP/0Gu+/A9sm3HEakdP96FTgv3VSrl
4F065bIxV6TW+GLre8baU5Q4WKtIW4/Sy2q86yh2XvT+o7ifsXXbZsZmXSzj
WbXiWOONv3cpzLJxznTLn/Z14Xjdo+Pp/hm+Wusc31+uVjPotIY/1jaIx7IV
85TYpLaHLXbJ9K4fp2hXR50S28fa3hnbyyzf0XeSytevhd70o5QYaT6qImrV
coZ+oLdzUqyjsvPeIxx9NMu1nHrNdHC/Sqt7h9eBr6DTwDdGUaftnNsrc/vn
5f4vPyGL587J1scOyy+u/Bu56U8+HzyDffjwkS51mnbvU7pMu+mosaP9HmTT
SFo65/MlRllmPvWyw2NZ5pLSdJp2Tw6eJ4vGsfD+6tRgkSaNnZNU9yz+Jfgd
q3MrhuH4mRSDsB72MaQ933jMXbHJ0B5G/8hC7/qx+Xya7rerTrbYaedE7e18
ntAVE4tf1rySy7c/I9ptP3Jfe/H+bVz3Rjzt13PW/pPnHpF0X0grL881k90X
97HOrwNfQaeBb4yiTnv+xZfko3/2YDDvsP/QCfmdj39RfunGe+VbjxwOnuc5
Pv981/Np8XuYdh+0Pitv+78+Pi5m0nfG/62t/3fbx6BWmqw6zXHM4qs7DhnX
HVP9M8u31Fntb5u3dJdfNrVm1limxiYlj0aaPN9B6V0/ztomnfQfvc9miUmy
X7H+n7H8nvSjTmOUco1YY9OWT9rcX7d5WvzMcc1k8iWrnx1cB76CTgPfGEWd
tnf/AXn+pdPygev/Wn7xhr8JxraP/NED8vobbwbHXzpxooc6Lfy/VN1/or+p
+XSl01I0UyyNmkPyTKdl8i9D+bnGnPr4UC8nphc6rlcnsWmtl+VZ9+y+H3eg
QTL3H31+MktMksrX8spafq/6ETptMDqtmVX268BX0GngG6Oo03Y98aScWXhN
/mL9rHzwhnvl337kPvnHmQPN35x69dVXe6rTwvtfRSpl2z3Pdo5trSCrZnCt
QWrrC9b1JGPdL5iLyKLhktY9O9BpTv+Sxi/3umueNRw1fpjrmfnrldW3dl/c
Oj5O7/pxBxoksX20usb6bJaYmOU78srUP7Km67ytOukH9uu5Q53WkzyT/exu
3TNpzTf52b+s14GvoNPAN0ZRpz351B45dqwmL5w4LX+5fqtUNz4sFy9dlYXF
RTl7dkFOnz7TW50moQZIev6i+cyz9bncrPrOPM+2dqM9r2tqR32dqFLJeG+P
th3fI8ir05z+pc0tWNbRpvVnpbN8j6BRdmx872LdM0sesbW5tHmmkN7143i7
tZ6vStflrvYJn11Pel48ob2MNrHnlaV/ZE2Xs60sPnbWD/Lou9ax7PeITnWa
ZLxmct6vsvjZwXXgK+g08I1R1GmRqd8AVXMP6plr9dn8Xfde/o67fd0SID/D
7MeDwaWNYKBkWqMGE3Qa+Mao6bShvBex7bkPgM4p/vs90Wk+EMyZcd/KDToN
fGOUdNrgidZeGHMAsoNOGw7x3zAb9fXHYeHnWATjDDoNAAAghLEIfAOdBgAA
EMJYBL6BTgMAAAhhLALfQKcBAACEMBaBb6DTAAAAQhiLwDfQaQAAACGMReAb
6DQAAIAQxiLwDXQaAABACGMR+AY6DQAAIISxCHzDJ52GYRiGYcM2AJ/Q++Qw
dRoAAAAAxEGnAQAAAPgJOg0AAADAT9BpAAAAAH6CTgMAAADwE3QaAAAAgJ+g
0wAAAAD8BJ0GAAAA4CfoNAAAAAA/QacBAAAA+Ak6DQAAAMBP0GkAAAAAfoJO
AwAAAPATdBoAAACAn6DTAAAAAPwEnQYAAADgJ+g0AAAAAD9BpwEAAAD4CToN
AAAAwE/QaQAAAAB+gk4DAAAA8BN0GgAAAICfeKPTalUpN/JsWrkqtV5VdLoS
5Fmu1uKfs54TPyCVwMdK/VOUtA8+p5FSj1q1HItnan0zFanVM2sc+4kPPgAA
APQJ73RapHMa42+pMu0+Jw/91GmRr4PUaIn+tfRUK3zTUu1Sy0S6r1neMDRS
o8zKdHwbnQYAAEXEW50WbXuv06LPZRm4VHD51+vYNbMtG9pv8LTrTwAAgOLi
rU7TNYi5JmpquabVdZMrbZJOy3JOjJZOq1Qca4p5fG7Ox5Vbx/S5uZz+peqp
qDxzPTTBD3MNNdCARvltaSIfHOmCYznasLnmmuBDJ3UDAADwFe90mjkOm1j1
m2Muy6XNYmN7Q3NFZelzUak6TdMWtuO2PG0+G+umcZ2V379QzyTHJMovVlai
Hxb9l6B9Y/NemXRahjY083X40EndAAAAfMQ7neaa4zB0XEynmefY0qZotjbL
pNMqUo3mkHQfkvK0+ezQF536l7Q22HbMovusfkiyTjPztWmkRJ2WpQ1t/if4
kKduAAAAPjIKOm1aX1u0zadp5zjTOj4njteZnk+rSbVcsuoQa545dVpH/uX5
foGHOs3Zhjb/0WkAAFBg/NdpkQ4K18Vi42vbOQlpXZqtOW+jrV1OV8M1uKzf
9zTX7pLyzDuf1pF/Le3Y9n3PJM3UhU6LpzXKN/KN6ak8bZjiQzd1AwAA8BH/
dZrE1v7K5SSdlpA2z/cIIr3Vye+ntWk3I8+8Oq0j/4KTmlrJXDtMfda+A50W
j0Er9mHauC+xY3naMBZ7x9pvh3UDAADwEW90GhQKntMHAADoHnQa9J7GnBe/
ewEAANAV6DToDcZvlaDRAAAAugadBgAAAOAn6DQAAAAAP0GnAQAAAPgJOg0A
AADAT9BpAAAAAH7ii07TfyPV+julXaO+j+h413ffGXDZxjvHB1ZW8Ju1vsV4
GO3eaZnx3wPmt+cAAMAXndYi7xiXNf246LTw9zEGM8YPsqw0CqDToveBBZ8r
8XeFAQDAWIJOGwSD1mlFLCuNAui0nucBAACjzsjoNOMdl+EcjvHbqsZ7vvV9
qeN4tWJZazXP0bcbn6dbfqmiovclWfPR0sbWc2N1i+ZQwnMqlbJ9XiVDPLK8
97MZHmt+SfGxlWXEq6bXt9oeu4S4xuptjU9S/pb2beat9YlMcU/qH8l5hMks
8VZzZWlr0ipffisYAGDsGQ2dZqyvxZ6DSpp3sOgq6ziujd2x9aY0PaE9A2Z9
H7iej5Y2yf/6eboOsmutTuMRagbXe+Xd+XUen5YkKrfeH5/hPKdWNuJjz9+s
m9of1r1Nf6bGPUf9Y3k09qv05sJwqk4zfQUAgHFlJHRaoBvic0pqzqw1h2Sk
n27Nfbi1gau8JG2X9VhaWs1/Yx6rNQeYoLfyxiPhvPz5ZYxB23xQh3F1xScx
f51wf9nUp5njnlLHtDwaafJ8HyaYD0akAQCAFFCnxdKqeQkfdZo2X+LSTui0
dJ8z67S6Tqr3g5j2yRz3NJ2Wre2i9fA0+RWkQ6MBAECDkdBp1nU599pTpvVF
Z3ntzxa1HnGrZFy7M7eNtbQ2/11rkUnruRnjESPPumfWtc1O1j3zxjXd5/R1
z1B7muuZ6XHPs0brOqflYzl0xL7umeW5NQAAGCtGQ6eJscbUvobYWnPSntsu
V6TS1XyaxNdQK5Wu5tPCZ9Mtv41lrp+lrXsmxiPlvOh5q8TvEXQ6T+iOXdtz
/pnj6opPSv6x+hrP9Md0fBfrnlnyiK3BN7SvVY/Fv2/Ab6gBAIDCP50GhcS5
RggAAAAu0GkwCII5T9b0AAAAcoFOg/5gruMxlwYAAJAXdBoAAACAn6DTAAAA
APwEnQYAAADgJ+g0AAAAAD9BpwEAAAD4CToNAAAAwE980mnqOIZhGIbZDGAc
0fu+DzoNuie6p127dg3zyGiX0Tbab/jxBxhH0GnFQx9PLl68iHlg5jg/bH8w
2m+UDJ0G4ww6rXgwnvhnjPOjbbSfH/EHGEfQacUjGk/eeustuXDhAuaBqbag
XUbXaD8/4g8wjqDTioc+nmRpF6z/Zo7zw/YHo/1GydBpMM6g04qHPp6cP38e
88DMcX7Y/mC03ygZOg3GGXRa8YjGkzfffFMWFxcxD0y1Be0yukb7+RF/gHEE
nVY89PFkYWEB88DMcX7Y/mC03ygZOg3GmdHRadNSKZWlWutFrfOWYe6vSbVc
r39lup/OJPiTjD6enD171mKbZGVpqaydM/bPrZWltv1Zz++1DcqfoJxSs0+X
lq6Vudz+JPtgjvPJPs3J2qU2fwYU9zSfXPHxwTL3mXyWrf1U+2jtVreVmzyI
idPM/tRo45WbBlxu9vgDjCPotCxlxPdPV0pS7q8jKf4kE40nV69elfn5eYtt
lBWlJbJmu+1YFks6v9u8B+zP9jWyxDi+ccUK2dhTH+aDtkhvl8ifkqzYGN+3
ZmO3se1Fu2TNY5B9YDBlZWs/w5eNK+r3yE760qDiED9n44qSLFmz3Utfo/gD
jCPotCxltPbXquUBzKOl+ZOMPp7UajWLTcny0oSs3mY7lsWSzu8270H6s01W
T5Rk+VS/fai1jfP2PNL86Sa2vWiXrHkMsg8Mpqxs7Wf64nscWudsWz0hpeVT
A/CzM1/RaTDOFEKn1apS1tYa4jKqsUZpHFNzYs31ieYJKTqtWpFSuSpth2Pl
V2RaO6dSKTf2aXk00sbm5BLyCJPZ62FDH0+OHTtmsSmZVPfJ2ZT9s6tlolHe
xOrV2rFGuin9+GxjvxbXySmZmizJ5FRC/vU0Zlml0qRM9cmfWH2D/KKy3HGa
nJxo+JTVn3Yzx3lreRn9idV51nZsNtB7Ub0npxxxSIh5q84p5a+ebOabGHNr
Weltqvuh+lI8X1tZ7jYKY2HUpc3/LtrPLHuqnvfEapm11LWtj2t9V/k4q3ST
zS9rfXLG3PR3teFnBn/brglXHFOva7OvJscfYBwZfZ2m9mu6JdA7cW2TvEap
55tchl0fGedMVxrlhee0ym7k0RKKDj1m5tHYr9JnnMeLxpMrV67I0aNHLbYh
uE+umknavyG4909uCI/NrFL35fix0sQqmVHnbZgM7sEbbHmrY5Mbmp8nJiZk
YtVMM8/wc/s57ft75I9uM6vq/jTOaeZZass38je7P+2m2iK1XQx/ktvNrJe2
rcfc2eZJMdfrnNw/9LZ1xzy5rKQ2zeaHq6x4/kF8M/nfYftFeTb10gaHz+0x
iPddrd5tcU2qT5aY2/1t5pnR3/g1kbEf2K5ra191xx9gHBl5nRboskjvNFJW
GnrKckxLpD3vm0Wn1fdP6xpQLz/+7HCop8y8Eraz5NFIk+W5uJ7otDbNkGds
1I5p+Wyo/w++akO0PSOrJrSyzPoH9+4++GPqoraxOWO+if50OM5b/enQtzaN
Y2mXtJh3pY8ylJWrTVsapl1LJ8UhHs8Nk5EmSdE1Hes0R9mZ492j+jjLs/i7
Qdd7vfY3w3Xt1OPt8QcYR8ZSp8X2qzm3jDotmtfS83Rqwbw6LUsejefjrPN6
LbzSaU09Vt/f1Gf1sUbP36lP+qzTrMeGqNOC2NjmNvLWObRoftA9jqfEvKc6
zVJWnjaN5aFpfF912lF9vjhPvHup05I0v3GOOZ/YJ3+z9VV3/AHGkZHXadZ1
T12DWeagprXnzGLrpNm+7xlopeZzaub6psvfpO2sebTKT5pXG8y6Z3ZdFIxX
xnrn5ORk29qJfV2m9/7oFuajjyWdran1ZN3z6NHmnFFsvKqPd6vaxmJD0wXn
tZfvXFvOFPO0/pE15kllZWxTVb+Yru903TPj2mwPdJrNl/R497I+afNU7bqy
GeMe+pu1j8V0LToNoMlo6bT4HHq5JZy0dUNT18TPC/Wc9kx+uSKVPPNp0R71
PYSY1uti3TNLHrF1WsdarhbHaDw5cuSIxdbLMiOWE7duaeyfkFu3NNKtX6Yd
v1U7ZqQzttcva+S7bH14fMutwbjaTG9uN/dpPgXn9skf07R8W7FIz9ftT7uZ
47y9XRyxmLhVtqSUX1q2rHUsVp9lsv5IUrukxLxpW+TWCd2fTvqAWVaeNtXL
r9d1wlWWcV6s3IS2dNY7T/u157Hl1olW+2WKd8q2sz45Yp7gb5BH3/y15OHo
q674A4wjo6PTICuZ9UAeC+637vvowM03f1Isl04bV/O4TWk/P+IPMI6g04pH
P8aT2P/ZHphv/mQdZxjnR7NNaT8/4g8wjqDTikc0nly+fFkOHTrUoU3LLe/S
10Z/Q+7tOK9emG/+5DPVFr1plyLZ6LQp7edH/AHGEXRa8dDHk4MHD2IemDnO
D9sfjPYbJUOnwTiDTise0Xhy6dIlOXDgAOaBqbagXUbXaD8/4g8wjqDTioc+
nuzfvx/zwMxxftj+YLTfKBk6DcYZdFrxiMYTDMMwDMP8t7QxPWLYOg0AAABg
nBglnYaOAwAAgHECnQYAAADgJ+g0AAAAAD9BpwEAAAD4CToNAAAAwE/QaQAA
AAB+gk4DAAAA8BN0GgAAAICfoNMAAAAA/KQ4Om1aKqWyVGuZq94BrjLM/TWp
luv1r0z305kEf7pNWxBqVSk365y3/sOIV9YyffZtFEmoW6wPFZVxrz+A36DT
8pBNp01XSlIeyI2t1zptTMfinqTvBei04aDXrcj1dDGOdQYYHdBpeUjXabVq
eQDzaGn+dJq2yPdrdFp3jEvfKHI9XYxjnQFGh7HQacHcfanpU1xGNdYojWNq
Tiza19JdKTqtWpFSuSpth2PlV2RaO6dSKTf2aXk00sbm5BLyCJPZ6+GMT1t+
6rhZ56Q8w2OxfdNa/Z0xN2OYtd2iOrvaxuarbfxN8dsRr2z9wVKeqz2T/J1u
1ds+L2uWo/nkRV8z87C0vzMuerPYYm6JgxYvlSz4X6kt7wxtVbNdA1k0jCMe
KTFotYcr5p3WNSl2eftdjj6dWgeNJ7bJ+z+0Xj79RGP75D753fr2++94Puks
gLGk+DotvPfG753x8SZ5jTLL/9qt+3uqPqprgrC88Jz4/VC7pyrtYB0jzTwa
+1X6xHm8hHrY8ot8SMrTOK7GhtZ93xXzrDrN5aMjjdVXR52dfieUn5an9Zir
PV39rnFOpBlj59h8MDWnT30tqf1dZSfll3DdxeKl1TOpXs52zPF/RFi5xLZM
ioFTQzr7eta6umLXSb/L2qez1KGdXXesD/Ta+z+0TXapHQ399v4PPSSbTqae
DjAWFF6nBffH+P2rOS5bjmmJWv+PZtJp0f+jxnHjf2r3/+kJ21nyaKRx3xtz
5idZ89Tu07G5NEfMs46DTh/F3jZWX5PGYovfrni5ysw89tvinzamJsSmsb9s
jrm+9LVetH94kiXmeeKVR1NnbTdjvsjVlnlikNTXO6qrI3Yd9btOYpM0B+ri
efl0XZ/97pfONbbPyaY/qOu1P9gnJ3LkAlBE0Glp91j1P2hGnRbNNeh5djwm
dzKut9ZBEueHcuSXnGd4TI3X0V9XnTvTaXnaxuare4yx+p0pXkn9YZA6ra6T
ysazkL70tZ63f3s7565Xv+bTeqbT8s4pZm1DLXZ912lpdbAQrXdG82mRPmM+
DaBJ4XWa2NYfUtaf2p6zyqHTpDF+NedozDUOl7/pa2jpebTKT06bLz93nhLG
p1yRStn0PTnmrUe8KglzJXnaxuZrwhhj9dsRC2eZSXVJas+k9afs82lqf/y7
xT71NVf7Z6xjhnbOV6+sbZVTp+Va90yKQZ7nL1K2U/prvv6RR+tm7zcnvvRQ
uL4ZzZex3gngpFg6LT7vHp/fca2fxM8L76vas7axsTybTgv2VErOZ+pzr0Vl
ySO2zpHhf2ZrftJ6/lhtp+ap1dWcVEmKuZ5vpeIeB60+OtrG6mvSGOPw2xov
V39IqkuW9nU8z51DpzV986qvmXnkKLuVgTvm1jhk2M7YVrFrIFWnReebbZkn
Bmbabtc9k2KXt9/l0LCZ+h4A5KU4Og2Ghf05fP8ZVb8BAGB8QKdBVwTrh7bn
8D1nVP0GAICxAp0GnRGtrYzamsao+g0AAOMIOg0AAADAT9BpAAAAAH6CTgMA
AADwE3QaAAAAgJ+g0wAAAAD8BJ0GAAAA4CfoNAAAAAA/QacBAAAA+Ak6DQAA
AMBP0GkAAAAAfoJOAwAAAPATdBoAAACAn6DTAAAAAPwEnQYAAADgJ+g0AAAA
AD9BpwEAAAD4CToNAAAAwE/QaQAAAAB+UhydNi0VVWZl2rK/LNVaYtY56Uee
ScVVwniWqxIvsl9+uPIdcL2HViYAAIAfFEunlaVcLklcqo26Tgv1Z5v87Ksf
o6rT0HQAAFAsiqbTqtPVulbT552KoNNcZaHTOk8LAADgP4XTaTW1TFiScnOw
1sducxy3HFM6r+G7msOqVcvNurTlqaUt6+Kg1tpfKlVkWjunUilr+8RxTjR/
1ljLtZXR5r8rj2YBUi23H1Oxiva11oyz6DRjnTlTnRvnVyv2OiXkESaz16Hl
m6UuiTFxxDFLmTZf1fp029o0AABA5xRRp2X7bDumPQPWeCasqSOCbV07aGmD
MdtRRv28MI/wnHat1covrgFcPifV2ZVHqDXsZafFz5YmzK+lebLW2dB2bTF1
5dHYr9LbhZbdj8SYpJ2XVKbDV3QaAAD0mGLqNNHG15zzadZjaWnDeamgOGP+
pjW3k6C3gnPic2zN/LLqtKQ8LMe0RJqv2XRa2dR8meucsJ0lj0Yat960zS+6
4ppwXlqZTl8BAAB6S2F1mkRzPoPQadr8klMTeajTYvtVHbLotLpmqaeL6ZLM
dU7TQ9niFq1Fp+qtXug0W5lJuhcAAKCHFFeniTbvEV//az2GVUmYQ0pfI23O
scTGbdf6ZpreMtfnHOuBzjyT8nCse+rrdJnWWpOeAcxS5xwxdeYRVa+csTxX
TGK5JfQLW5kOX1n3BACAHlNonSbRPIixHtpcq6p0NZ8WPh9veT7dXBdLW/ds
Oyd5bsdZZ2ceUVrzeXjtGflyPRaZ5tOM5+tjOq+Ldc8secTWaO3zWc3vRVi/
R5AQf1e/cJVp8xWdBgAAPaY4Og0AAACgWKDTAAAAAPwEnQYAAADgJ+g0AAAA
AD9BpwEAAAD4CToNAAAAwE/QaQAAAAB+gk4DAAAA8BN0GgAAAICfFE2nXbt2
TfY//bQ8+NBDsu6uuwJTn9U+dQwAAABgVCiSTrt06ZLc/8ADMrN1q9RqNbl4
8WJg6rPap46pNL0ieEdR+0u9/SX2Ds/cJ7feMWV9B7oi5d1YfWEYZQIAAAyG
oug0NVf2ufvvlx07dsji4jnZ+shOue3uzwa27bGdsnjuXHBMpenJvJrSPLF3
YmZh0Jqih+VNV413pNrer4lOAwAA6CVF0WlqXVPNmZ0+c1Y+c+/n5Cevu1E+
8Nsfl5/5lYr86M8vlzs2PCBnFxaCNCptt6j3u5fr4iD6m40R1mmZ8kWnAQAA
9JKi6LTNmzfL8ePHZWb74/Lj77te1n1tl+w++7b83rcPyQ/8/Iflh98zKXN7
9gZpVNruUGuADW0QzKtVpSUTTN0Qbau/rXXD5nppsBZpW09snDfdOq6OKV0Y
pdX1YbAGG8vbVp7pm2UtU82Vxepjq75ZZ1vdG+Vb6xnNxYXpK5VyY1/j/GrF
WsekPMJkWdZmAQAARoei6DT1fQH1LNqav7pP3vVLN0j18Cty/b55eefnDsg/
v323vOPdH5A7p74QpFFpuyKmUzTNFuDSaa5jmp6IPT/W0DlROdOVuG7JtPaY
5EuoadrmAlN1Wnhe8vNpZhrDj3oZYblhHVs+GNouVsekPBr7VXrEGQAAFIii
6bRPVqfqmuw6+bE7d8mPbjwg77jvgHzf2l2BTrv3/i/J+fPn5e577skRoXbM
tc5gjqupD3LotECXxbWWmhcLs0rKx7I93ZqDKmXRaZays5D83Ykw/7Kp/4w5
Q/f8Xpq/KXk00mRfhwYAAPCboui0L27aJPPz8/LozrlgjfP733O9fP+f75Z/
8snd8k9/9nr5kfcsl+eOPx+kUWk7x1hPTFyHM7f7pNNi+ejze73VaXE96o5N
uWykc5bVaR2T8mitDTO1BgAAo05RdNq+fftk6+ysLCwsyvr7H5J/8XOT8o6l
H5Qf/OkPyg/XP395yyPBfJtKo9J2jHVdUF/nM9b8gnmuPOueWfSesa371LZ2
2qN1zyzPrWn5K71prme2z3PlmTPMmkdIvu93AAAA+ElRdJr+uxyvvXZBDhx+
Vr7wjzOy+Rvb5PgLJ4LfTevF73LE9UeL2FyTvgZZqcR0RPN5f+vz9TnWOV3P
zxu/FRIvz64T079HEH8+3/2cvsWnmH7sYt0zSx6xtd/8a7oAAAC+URSdplBa
TOkwNWemftv28uXLganveKp96lgvf+cWAAAAoJ8USacp1FyZWtdU74q64847
A1O/w6H28d4oAAAAGCWKptMAAAAAigI6DQAAAMBP0GkAAAAAfoJOAwAAAPAT
dBoAAACAn6DTAAAAAPwEnQYAAADgJ+g0AAAAAD9BpwEAAAD4CTotL413Yra9
3NL+PvDuy+p1nknFNd6Pmfq+deia4F2lWds2/n7V9veqAgBAUUGn5SXUTuWy
OV6Ouk4L9ScawEOmq60+EGhp3jEPADAuoNPy0tBO9bGzHJt3KoJOG+DcHXQI
7QQAME6g0/LSGienKyUptyY6tPHTHEstx5TO09axatVyM2ZteWppy/oAXWvt
b82xhOdUKmX7vEvsnGj+rLGWaysj1Q9LedYymg7Y1/CsdbGlzXK+XmZKPHqR
X2bfLTGtZUlrtB/r0gAAYwM6LS8uPZZHp2nPgDWeCWvqnti6lpE29kyTUUb9
vDCP8Jx2rdXKL65FXD63n+f2w9RtrjJCPeLUgWZdVCxM0WLbl1ovVzyS/Mma
Xw7fXXVOTRv3l7VpAIDxAZ2Wl/ZxORxjc86nWY+lpQ3n8ILijPmeUvO7DQl6
KzgnPqfUzC9Vpzn8MI8llWE51jrHUpfGftscYvu+DuqV6E/G/PL4HkPLJzVt
y4dseg4AAIoCOi0v5rgfzXEMQqdp8ykujTEQnabP6/RKp7mfjY/WhHWJEts3
dJ2Wz/dGjm1+udM2jqHRAADGDnRaXizjfnNOJb6+1xxWg7XMTnWaNs8S0wSu
9bz09cv4el78ubak89x+mP67ykheZ0yaT1I6xTze2tdpvfKseybXN6/vLr+s
aVX/4Zk0AICxBJ2WF/f4WtL3R79FFqyDVbqaTwufWbc8Y26uuaWte7adk+RH
e53tfiTpVrOMKH36c/tBXfQYRjrJtq/jemX1JyW/rL5bYtp8Ps2ZNv4dA35D
DQBgvECnQTr8FgQAAMAwQKdBOug0AACAYYBOg3TQaQAAAMMAnQYAAADgJ+g0
AAAAAD9BpwEAAAD4CToNAAAAwE/QaQAAAAB+gk7Lxx133pnbAAAAADoBnZYP
pbsuX77stNdff13eeOMNuXr1arCNTgMAAIBOQaflI9JpX/76TJvN7XlaNn7x
UbnlUw/J8RdOypUrVxJ0muM3yYJ3EHXwW2WZz+v2t9C08zv11Xdi9coSr7R3
vVvy6lXs6vlU4y+Mb3t/Ge+YAgAYXdBp+dB12lP7Dzdtz9NHZPHcBZn8/Y3y
vv9wl8w88nQwp5Zbp/WE9Hd19kSnjQVd6rRM6TqMqdJ6sfez16RaKbfpv+nK
OLUXAECxQKflw6bT9h44Ii+eeFW+smW/vL+u0f7jLZ+X73znVMq6JzptNPBV
p6n3sxvvbJ+uSLlateRVzz+m5wAAYFRAp+VD12mHn5uXF068IoePHpeLly7L
yj/8B7nuw/fIth1HpHb8eIc6Td/f+Dyt1sjCeKo1rFq13IxvubXA1ThP/S01
j5faFr3a8wzzUON+Kb5GptbQ2sZ3i3/NBGEeJc3XcHerrFIp0haNc6sVS13y
5GPUrmLWPble7emT65iYvi2mSXm52quarR1sc2mBbrP1K3VsnLQ1AEBxQKfl
I9JpO+f2ytz+ebn/y0/I4rlzsvWxw/KLK/9GbvqTzwffJTh8+EiPdFqpNUZP
V+IaINg2dE/qM1VGnvpzUio/TSAoTdL+bJOrnFAPldsKNXwJ5nxqLT+iAvS6
GH4k5+NCS99VvTpoJ+fzbRnLyOKvGaPmtt1fe50BAMB30Gn5iHTa8y++JB/9
sweD+bP9h07I73z8i/JLN94r33rkcPBc2vH553s3n1ZznZNXW9iPtcZwdUzT
fda1Mkc5gTaxzHHF5sD0eaiEujTOiekwZz6mexUtje6no17O9AkaKjG9LaY5
dVqWdojpNH2+DJ0GAFAk0Gn5iHTa3v0H5PmXTssHrv9r+cUb/ibQaB/5owfk
9TfeDI6/dOLEiOi0+LqgWlNV+ij6m3x+Vp1mW6NMq1trfTdcvnTl4yorvtZn
rZczfZY6JmkjPaad6LQM7RDTacbaaUxDRsnRaQAAowg6LR+RTtv1xJNyZuE1
+Yv1s/LBG+6Vf/uR++QfZw40fzvt1Vdf9VinlRxapbFdrkjF+TxTJ+ueGdZD
HT63dIorHz3LimPtUa+XVldnekcdE9O7YtqZTktth7bn05LiyPNpAACjCjot
H5FOe/KpPXLsWE1eOHFa/nL9VqlufFguXroqC4uLcvbsgpw+fSaDTovPgbT0
SLc6TVrPuzue86pUWt9FMJME5zonX9L8S3v+P8O6Z2xt0dCQieue2vcP2jRO
41jsHFf6ZC3qSm+PaTZtZmuv5HawfN+zrTxtH9/3BAAYSdBp+TDfR6B+y1bN
oanvDqjP5vsJRvF9BKyR+UFqO9R1ayXLJNl0lbk0AIARBZ2Wj8K/39O5ngYD
JWM7qHXhRC1n/e4sAACMCug0CInW9HiOabjQDgAA0AKdBgAAAOAn6DQAAAAA
P0GnAQAAAPgJOg0AAADAT9BpAAAAAH6CTgMAAADwE3QaAAAAgJ+g0wAAAAD8
BJ0GAAAA4CfoNAAAAAA/QacBAAAA+Ak6DQAAAMBP0GkAAAAAfoJOAwAAAPAT
dBoAAACAn6DTAAAAAPwEnQYAAADgJ+g0AAAAAD9BpwEAAAD4CToNAAAAwE/Q
aQAAAAB+gk4DAAAA8BN0GgAAAICfoNMAAAAA/ASdBgAAAOAn6DQAAAAAP0Gn
wbB46H98fagGAADgO+g0GBZKK3113+JQDJ0GAACjADoNhoVvOm1+fl4efvhh
+drXvmY1dUyl6TQ9AABAXoqm065duyb7n35aHnzoIVl3112Bqc9qnzoG/uCT
Tjt+/Lg8/vjjcvnyZae/6phKo9LmTQ8AANAJRdJply5dkvsfeEBmtm6VWq0m
Fy9eDEx9VvvUMZWmO6aloupWmbYerVXL9XqXpVrrspjcPvW5zFpVyj0uI1Gn
3XVDPY5L5aavDkanbdu2Ta5cuRJ8fvvtt62mUGlU2rzpAQAAOqEoOk3NlX3u
/vtlx44dsrh4TnbN7ZVvbn0ksCee2ieL584Fx1Sa7ubVQk1ULts0S0PDjaRO
M/Pov/Zz67Q9ctOvLZV3DlCnqXVKxVtvvZVoUdq86QEAADqhKDpNrWuqObPT
Z87K17c8LA9/e7c8sfegzO17RnY+sUe2P7ZTzi4sBGlU2s4J9UulUtdqpoiZ
rkipUun/3JbDp8LotLtukHf+8W1y3RB02htvvJFoUdq86QEAADqhKDpt8+bN
wXNAgSbbMSdP7T8s+w4+K4ePHpfjz78ozxx6Vg4dPhykUWk7J9Iv6m9FWquf
NamWo/0tfTNdKTVj0VorbaSpVprHWpovWS8l5temqZRPrfTN5MEaZrRf1SGa
B4zyrRjb00YZSf7H8y9Xq069Z9dpe+Smf3WD/Nm+zUPRad/97ncTLUqbNz0A
AEAnFEWnqe8LqGfRvjHzsOw9cESeOXJMavMvyMmTr8jp06fl1KnT8vSBg0Ea
lbZzWnpFaaaY9ilX68rIpZlMnaPpLDUP19R8Wee1LLrJTBPM75nP0Rlp62lC
jZVWbh7/W3FJel7PqtPUc2m/trn+eTg67erVqy3buU7W7bwa2xeltaa3mJ43
AABAXoqm02a3f1uePTYvL770cqDPzp8/H+R9/vxrUjt+PNi++557ckTIRNMr
TW2ma7Z2HdScl3LqqiTN1Ul+DRrzWq65Lvd8WRc+ajGx59OiXaepubRImw1H
p6nn/pv2eF2nPX4lti9Ka01vMT1vAACAvBRFp31x06bgt6r2H3hGDh852tRo
6rcR1Hh57tw5OXXqVJBGpe0cXXc01jqndW1iaJbmPFO0LmrmYW6naKBM+cUJ
57QaOjKWh6teXfrYsU5T2szQkH3Sai6dpvpL03bUddqOy7F9UVpreovpeQMA
AOSlKDpt3759snV2VhYWFmXvvv3y0okTQZ5qrLxw4YKcPXs2mG9TaVTazrHP
b1mfL1PHIs0S+12LJA0UPlPWevSs0po3y5xfO0qrtdY3S+3fgeiVTut23TOm
2QY/n3b58g5Zt2KFrGizm+XB4xaddvxBudmafp3sQKcBAECXFEWn6b/L8dpr
F+TEyy+Hz6adOSPnzp0Pfjetl7/L0dIdSlfp81PtmiuIRT1NJdN8msTXNmPf
H82anyUffQ7NXPtsiKrmdxSs252tzeb/HsGwdRrzaQAA4A9F0WkKpcWUDlNz
Zuq3baOxUn3HU+1Tx7r/nVvIhXOd1a/3EaDTAADAR4qk0xRqrkyta6p3Rd1x
552Bqd/hUPt4b9TgCebkYs+rtfBNp6k+GL3DIrDHqlJ97GJsn0oT6bS29BaL
0gMAAHRC0XQaDJv4b7aVHHNpCp90mnq3k5r/Uu97+t73vmc1dUylid4blSc9
AABAJ6DTYFj4pNOi96pHv3lmQx0z38OeNT0AAEAnoNNgWCitNEwzUc80zs7O
Ntc1TZttPPfYaXoAAIC8oNMAAAAA/ASdBgAAAOAn6DQAAAAAP0GnAQAAAPgJ
Og0AAADAT9BpAAAAAH5SFJ0WvXsgjwEAAAD4TJF0Wtq7FnVDpwEAAIDvFE2n
ffnrM1b7yje2yjdmHpbZ7Y91qdOmpVLS34tUkorrxUgd51+W6kB/HnUYZfro
QwGpVaXcSVw7PQ8AAHpKEXXaU/sPx+zpZ47K4aPHpTb/gjy2Y2cPdJo2fk1X
Et9h2XX+A6EXZXabBzrNX2gbAIBhUWSdtvfAETl4+JgcrT0v8y+8JCdePim7
dj/RW53W8zEMnQa+QdsAAAyLIuq0vQeelacPPSeHnq0Fc2gvnXhZXnn1VTl1
6pTs2bu39/Np5arUbMdi243P1UozNmXrwGeeU08bLawGa1HRems0hxemr1TK
jX0p5STkESarSbWcvKY7XdHWfYMExlqw5aT2c1LiGvOz5YfKp3W65ZxcsbKU
P906rxU3y3kO/xqF22No9cmWNq0N8viaLa7u88y2rQa+xXyKXQMAANBLiqbT
vvatbcEa57HjL8iLL70caLOFhQVZXFwM7NDhI719Pi0+YKXoNC29c700Oqdm
jIft+jAcm8N84+O0q5ykPBr7VfrMD9xZdGjqYO1K1x6ruL6x+Kf8L5ebda9V
y+31SYyVWX6ppTdiz2fZY2z1r6Gx2stw+GSLd2ob5PU1Q1xTzzP+N9H8i2tn
AADoJUXTaVtmHwnWOE++8oqcOXNGzp8/LxcvXmza8fnnezefFoxzutbKMJ+W
ul4a7i+bY70xDxKfy0rK1/Q3JY9GGruWibKsaHlk1GnWc7LGVdMC6lhDn0xX
GnNKwbbSRznq2e5g27GW/rDNSSX4Z9PfLp9s8U5tgxy+Zo1r7r6raX/m0gAA
+kbRdNq2R74tL598RU6fPh3MnyltpvZfuXIl+PvSiRM9XfdszeG0H+tcp5WC
eaLYnIpr/M+t07LkEdbLuuYWy0PTRkkayHmOw4dEPRGdH+kDtV1Pq+m3PPV0
H9PnM3ul09zfN7HF29kGeXzti05r9ft4/wcAgF5TNJ327cd3NTWaylPtu3r1
atNeffXVPn6PwFirDOaQOptPC5fE2tfaUtfTMqy9pucRYh2D9WeR2tbNHBrI
eY7LB9v6XEtfBH4Z652VSqWDWJnHtHNiZdpi6vIvad0zeZ7SFm+7Dsrra5a4
5tNp4bxmpa6V+X4BAEA/KZpOe/KpPXLo0GGp1Y7Liy+9JK9+5zty5uxZObuw
IGfPLtQ13Jke67TGvEekQ/T1vbp26HTdM/ZMf0zjdLHumSWP2Pqkbf5He8bd
GKeb3xVon4RznuOMa8xPi0ZoS2tLk3/dM3yO3v6MvTt/M8/4M4z27xE0fLLF
O7UN8viaNa7J59naNtjHg2kAAH2laDqN9xFAZ2T9HoQP+OEr3x8AAOg/RdJp
vN8TOscP7ZMND3zVnwcEAIC+URSdBtAdHmifzAzT12gNe1RiBQAw2qDTAAAA
APwEnQYAAADgJ+g0AAAAAD9BpwEAAAD4CToNAAAAwE/QaQAAAAB+gk4DAAAA
8BN0GgAAAICfoNMAAAAA/ASdBgAAAOAn6DQAAAAAP0GnAQAAAPgJOg0AAADA
T9BpAAAAAH6CTgMAAADwE3QaAAAAgJ+g0wAAAAD8BJ0GAAAA4CdF02l33323
3HLLLfKxj30MG2FTbajaEgAAYJwpkk77zO23y7p16+TUqVNy7do1bIRNtaFq
S9WmAAAA40qRdNrNN98sZ86ckTfffFMuXryIjbCpNlRtqdoUAABgXCmSTlPr
ZWouZtgaA+uNqbZUbQoAADCuFE2nvfXWW3LhwgWsAKbaEp0GAADjTBF1Wpay
MP8NnQYAAONOEXXa+fPnsQIYOg0AAMadYuu0B+XGhh+RLf3UvtbxfZ+SpaWl
8ql9eTWEytd1XtKxXqTvxFxlmPv3yaeW1uN044N91mDZ6oxOAwCAcadoOk19
T3BxcbFhm+WGuh64bY++Xffrhs1amk7MzDfrsV6k76W/8f2bb6jr2Nv29NGP
fHVWbYlOAwCAcaaIOm1hYaFhm2RlXQ+sfXKhte/JtbK0tFI2LWj7cpsl30zH
epG+l/629j+5dqmUVm7qow/564xOAwCAcaeIOu3s2bMNa+iBubPavjlZu7Qk
KzeZx8P9kd/h8bOyaaW2blrXMbF8NynN11hPXTtnL3Oulaak9OFZ3ReXj7Zz
Wz7p9cjlb1sZjf1rV0pp6VqZSyw/8j08Z+XKpY19Wh5tsUjOIynuytBpAAAw
7hRNp129elXm5+cbtlFWlJbImu3z2r7tsmZJSVZsNI5vXCGlFRu1dKbpeanP
9fotWSPb1bHta2RJ7Jjtc1jGkjXbE/I190d+mmWEdWjPK8lfdxklvRyXX03f
w3NaZTfyiGKn4lhaIRtT80iPu2pLdBoAAIwzRdRptVqtYVOyvDQhq7fVtH3b
ZPVEtE87vm21TNT9nVi9TUtbt6nl2vcQLOc10k0tL8nyKXue+vcYSsun4vlb
fYzOXS5TNUsZlmN5/Y2VPaXyM447fTfzStjOkocr7nVDpwEAwLhTRJ127Nix
hk3JpNIDs8da+2aVLpiUKcfx2dUTgd+TU2ba2VDfzdrOU8ca5+jHYue7zOJj
m5+hTU3a/HKdk+SvpeypyXq9tTydvpt5JWxnzsOIe2MfOg0AAMadoum0K1eu
yNGjRxu2IdADq2b07boW2OA6HtrMqgmZWDUjRzfUtcvEKplR+2dWBXNOYdow
nyBN89ikbGjL00hnNbsPbb7GypiRVROWfBP9dZXR2q/q3Tzf6bstpq7trHkY
cW9sq7ZEpwEAwDhTRJ125MiRhq2XZbF1twm5dcsR43hj3/plWrplsj44vkVu
nWjsm1gmyyai88Pzli2baJ6zbL0lT7W95db42t+y9Vr5Nh/ruubWLZZzbb6X
jPKT/Y2fb9+/fpk691bZ4vTdPCdlOy0Pa9xDQ6cBAMC4U2ydho2yodMAAGDc
KZpOu3z5shw6dAgrgKm2RKcBAMA4U0SddvDgQawAhk4DAIBxp2g67dKlS3Lg
wAGsAKbaEp0GAADjTJF02s033ywnTpwI3jm0f/9+bIRNtaFqS9WmAAAA40qR
dNrtt98ud955p5w8eTKYi8FG11QbqrZUbQoAADCuFEmnKT796U8HczBqvQwb
XVNtqNoSAABgnCmaTgMAAAAoCug0AAAAAD9BpwEAAAD4CToNAAAAwE/QaQAA
AAB+gk4DAAAA8JNR02kYhmEYhmHjZKOi0wAAAACgBToNAAAAwE/QaQAAAAB+
gk4DAAAA8BN0GgAAAICfoNMAAAAA/ASdBgAAAOAn6DQAAAAAP0GnAQAAAPgJ
Og0AAADAT9BpAAAAAH6CTgMAAADwE3QaAAAAgJ+g0wAAAAD8BJ0GAAAA4Ce+
6bS7775bbrnlFvnYxz6GDcBUrFXMAQCKiK9jSpZ7r6++Y4PtCz7ptM/cfrus
W7dOTp06JdeuXcMGYCrWKuYq9gAARcLnMSXt3uuz79iA+4JHOu3mm2+WM2fO
yJtvvikXL17EBmAq1irmKvYAAEXC5zEl7d7rs+/YYPuCTzpNzf8pbTnsmI2b
qZir2AMAFAnfx5Ske6/vvmOD6wu+6bS33npLLly4gA3QVMzRaQBQNHwfU5Lu
vb77jg2uL/io07LkhfXO0GkAUER8H1Oy6LRh+4gNvy/4qNPOnz+PDdDQaQBQ
RHwfU7LotGH7iA2/L/it0x6UGxvlRHbjg8OPZ7K1+7z0U/uynfvgjeE5Sz8l
+zoue6l8al/v+gcAwKjSPqY8I5/80Cb57BHzPujanzdN7+696eNh/nt9trEj
yzjiSmPu3yefWlr39cYHBzDuOnyOxtXAbpQH++pHf/qCbzpNfe9hcXGxYZvl
hnrsb9vT2N58Q73MG2Rz83i3ZuSf+ViePNV2PVY3bM5wXklu2Nyr+mT3X8Uc
nQYARaN9TDko/62utf7usHkfdO3PmyafJd1708bDPbctrf9Pf5vs6flYmGXs
cKWJ7998Q0mW3ranZ/HK7c+e22Sprhnq27dtzjM+dqoDetsXfNRpCwsLDdsk
K+sxWvuka7tbS8qv07Is5z25tt5XVsqmjn3ppOzs+aHTAKCItI8pBwKttfGQ
eR907c+bJp9l0WmDGQ/zjh2uNK39T66t68iVm3oWq47G8k0r61p2rTzZ8Xjb
a83RWV/wUaedPXu2YY0YzTW2GzGfi47PKf0TzWfWdVCwf07WLm3NDa/c5Eqr
8tbmkOv9KV6u5VgsDy3vmBk+az5l9WXp2rkg3aaVNv/M/PXt6LPNf0dc6oZO
A4Ai0j6mPC2fUFrrGfO+bex/Zofc9KH18v7Avilb2tI0Pm9tpbvpH+Yt40Gy
ZdFp7rElvp00XqxcubQ5RqaPK0Y51nHWNs5p+9caY3XimG36qOVhjImd+WOc
7xjf2+NiS5fUBu4xttu+4JtOu3r1qszPzzdso6zQ47Rio3FsiazZ3tjeuEKW
rNke/I2nS0hr7k86p+HLio2N7e1rZIn1XFue22XNkujcbn2x+WU71l5Oe1xC
UzFHpwFA0WgfU3bLnzb1l2mfl7/eHaWJPtftq1+Vj2w4aOxv5PN722SXSrN7
m3xEPyejJd177eNh656+fc0SKS1ZI9tTx4tSY4zJOq4kjyPJ41VrzG6OlZnG
Yd3HRh7ReKXGrtIK2djxWB6Ov3GfejHeGtsJY2y3fcFHnVar1Ro2JctLE7J6
W/3zttUyUVouU9GxYDv+vH5p+VRz/8Tqba18XGn1/GumGcfM8us2tbwky6dS
zgtsm6ye0OuR0Zep5Vq66JiZTt92fa7Z49IwdBoAFJH2MWWnrP7QA3LPTvO+
re3fubWuuQwN94mdxrnt+XzpE+tl9VdsY4nbsui0+Niijx3x8SjbeJElnTnu
5hk7G/un1HnG8cx5JWx3NJbHyw/H7F6Mt3bfbGNst33BR5127Nixhk3JpIrB
bLg9u3qiHoPZ8NisismkTP3/7d0xT+NmGAfwfpyu+SI3hvXGfgGkJsut6BZ6
vaEKYmuntmpXcie1hd5cBEKIGfENgPlt3iTk7NhODL24D+H3k/6S7TjGvER+
/soNtzi3nHxuvr+dw1Xnlq+/8rWaaxzuzK+/7prF97a9l9J5H2c972Pd9Yv7
TdsN6zI/pqcB26g6U2b96v2n5edv4finD+n1q9/TL5VndPG9y9c5Te+/mfS0
3+rnUVPa9LRW86rtvGh1XmH70bOzcPxwZzJrCu9tfa0V+0+a5Uvzb+fwC83b
+p9bN2P/62chWk+7v79PV1dX8xxM12A4rtvP25PuOhwXzi9nPOzNX286d/n6
q16bXWPnYL4/Hk7/rgePfV/bezmYfMZ7wzRe/KyH18Zp2CtcL59XWpO67aZ1
me3nNdfTgG1TnSl/p+GkX31/svxcLB7P26P0+od/2p9zMp52u59rz6vbXv/s
XT8PC2mcF23nStPseOzsLB/Ps2bx81pf6ylzv+F+DoaFY7PZ+bkTPHZd1s3f
pu7Rbj6v+ixE7GmXl5fzjFJ/8rsMji4Xx44G+e8+SEd5/2hQ/g60P0qXo37h
u8t+Gj1cq+7cyfFRv7xfTOW10jXK91W+569K359Wzqu9l+Xf9SgNevPXe/3U
7xVeK/6O/X7hfeVrlO6/aV0m0dOAbVSdKSdpMOlK746Xn9tLx49z7yr8u+eb
k6VzZtuDNz8tzhn8Wnetpu31z9428/BzmuZF27kyapwj7eZV8z1O59CqmV15
z5r9R99Pde5X53vzvK30gKb5Wztjm9a1er/Pt6dJF9HTgG20uZnS1Pe+3LPX
PHxZeU497e7uLl1cXEiHyWuupwHbZnMz5Th9++rH9O7PzT17zcOXlVWfhYg9
7fz8XDqMngZso83NlL+mPe27Pzb37DUPX1aeU0+7vb1NZ2dn0mHymutpwLaJ
PlNWPXuj37t091mI1NN2d3fT9fX19P9QOD09lQ6S1zqveV57gG0Seaase/ZG
vnfp9rMQqae9ffs27e/vp5ubm2m3lM0nr3Ve87z2ANsk8kxZ9+yNfO/S7Wch
Uk/L9vb2pp0yf/8nm09e67zmANso6kxp8+yNeu/S7WchWk8DAGBGTwMAiElP
AwCISU8DAIhJTwMAiElPAwCISU8DAIhJTwMAiElPAwCISU8DAIhJTwMAiElP
AwCISU8DAIhJTwMAiElPAwCISU8DAIhJTwMAiElPAwCISU8DAIhJTwMAiElP
AwCISU8DAIhJTwMAiElPAwCISU8DAIhJTwMAiElPAwCISU8DAIhJTwMAiElP
AwCISU8DAIhJTwMAiElPAwCISU8DAIhJTwMAiElPAwCISU8DAIhJTwMAiElP
AwCISU8DAIhJTwMAiElPAwCISU8DAIhJTwMAiElPAwCISU8DAIhJTwMAiElP
AwCISU8DAIhJTwMAiElPAwCISU8DAIhJTwMAiElPAwCISU8DAIip654mIiIi
Iu3TVU8DAOBpNt3TRERERGRz0dNEREREYkZPExEREYkZPU1EREQkZvQ0ERER
kZjR00RERERiRk8TERERiRk9TURERCRm9DQRERGRmNHTRERERGKmqaeJiIiI
yP+fr09vFj0tb4uIiIhInDz0NBERERGJl38B80sPow==
    "], {{0, 619}, {618, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", ImageSize -> Automatic, Interleaving -> True, 
    Magnification -> Automatic],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{618, 619},
  PlotRange->{{0, 618}, {0, 619}}]]]], "Text",
 CellChangeTimes->{{3.458174183818*^9, 3.458174266125*^9}, {
   3.4581757490109997`*^9, 3.458176069421*^9}, 3.458187631348*^9, {
   3.458187663017*^9, 3.458187664967*^9}},
 TextAlignment->Center],

Cell["\<\

The same configuration dialog allows the configuration of remote kernels \
across a cluster or the internet.\
\>", "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.4581874282390003`*^9}, 
   3.45818772599*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["The Parallel Evaluator", "Subsection",
 CellChangeTimes->{{3.4596894965369997`*^9, 3.459689498737*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "The Clojuratica evaluator we created earlier in the tutorial will not \
parallelize by default. To get a ",
 StyleBox["parallel evaluator",
  FontWeight->"Bold"],
 ", use the :parallel keyword anywhere in the call to get-evaluator:"
}], "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187433554*^9}}],

Cell["\<\
=> (def pevaluate (get-evaluator kernel-link :parallel))   ;get a parallel \
evaluator
#'user/pevaluate

=> (def pmath (comp parse pevaluate))   ;compose a new convenience function
#'user/pmath\
\>", "Program",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187438215*^9}}],

Cell["\<\

The parallel evaluator has exactly the same syntax as the serial (regular) \
evaluator:\
\>", "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187441392*^9}, 
   3.458187565275*^9}],

Cell["\<\
=> (pevaluate [] \"1 + 1\")
(#<Expr Integer>)

=> (pmath [] \"1 + 1\")
2\
\>", "Program",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187446295*^9}, {
  3.45989111824415*^9, 3.45989111899415*^9}}],

Cell["", "Text",
 FormatType->"TextForm"]
}, Closed]],

Cell[CellGroupData[{

Cell["Example 1: A Performance Test", "Subsection",
 CellChangeTimes->{{3.4596895409110003`*^9, 3.459689543343*^9}, {
  3.459689861958*^9, 3.459689874093*^9}, {3.4596903301800003`*^9, 
  3.459690330349*^9}},
 CellTags->"Example 1: A Performance Test"],

Cell["\<\
Now we'll test whether parallel evaluation works faster than serial \
evaluation on my dual-core machine.\
\>", "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187449291*^9}, 
   3.4581875664189997`*^9, {3.459625591477*^9, 3.4596255918719997`*^9}, 
   3.459689556104*^9}],

Cell[TextData[{
 "First, let's create a vector of thirty agents. These agents are going to \
end up storing the results of the thirty CPU-intensive computations we will \
farm out to thirty Clojure threads. In turn, the Clojure threads will each \
evaluate an expression using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". Clojuratica will ensure that the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " computations are run in parallel."
}], "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187452895*^9}, {
  3.459625596418*^9, 3.459625668263*^9}, {3.4596258764890003`*^9, 
  3.459625878185*^9}, {3.459689915135*^9, 3.459689915283*^9}, {
  3.4598911566951504`*^9, 3.45989117073015*^9}}],

Cell["\<\
=> (def output-vector
     (vec (for [i (range 30)] (agent nil))))  ;create a vector of thirty agents
#'user/output-vector\
\>", "Program",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.4581874558050003`*^9}, {
  3.459690743792*^9, 3.459690744766*^9}}],

Cell["\<\

The expression we are going to evaluate thirty times over is a simple integer \
factorization. Thirty serial executions of this computation take about 45 \
seconds on my dual-core laptop.\
\>", "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187459243*^9}, 
   3.4581875679300003`*^9, {3.459625915059*^9, 3.459625916218*^9}, {
   3.459626809064*^9, 3.459626842644*^9}}],

Cell["\<\
=> (def expression \
\"FactorInteger[42039483204432094832932317913181713501317130511]\")
#'user/expression

=> (math [] expression)
((7 1) (47 1) (2091308860889 1) (2947175658767 1) (20731812453782440993 1))

=> (time (doseq [x (range 30)] (math [] expression)))
\"Elapsed time: 44209.43416 msecs\"
nil\
\>", "Program",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.4581874633970003`*^9}, 
   3.459625923601*^9, 3.459626803145*^9, {3.459626844832*^9, 
   3.459626877351*^9}}],

Cell["\<\

To evaluate the expression thirty times in parallel, we can simply send-off \
each agent with an instruction to update itself with the result of a call to \
the parallel evaluator. Clojure farms out the \"send-off\" instructions to \
separate threads. This means that the parallel evaluator is receiving calls \
from thirty different threads at once.\
\>", "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187466335*^9}, 
   3.458187569434*^9, {3.45962593298*^9, 3.4596259433599997`*^9}, {
   3.4596265639*^9, 3.459626568545*^9}, 3.459626894068*^9}],

Cell["\<\
=> (doseq [output-agent output-vector]                         ;for each \
agent in the output vector,
     (send-off output-agent (fn [_] (pmath [] expression))))   ;update the \
agent with the result of the expression
nil\
\>", "Program",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.45818747059*^9}, {
  3.4596899656070004`*^9, 3.459689987638*^9}, {3.459690602781*^9, 
  3.459690621366*^9}}],

Cell["\<\

We can time how long it takes for all thirty expressions to complete by \
monitoring the output vector. When it has no more nils in it, all thirty \
expressions have completed. I ran the following command immediately after the \
doseq command above. (If you want to be really precise with the timing, you \
can enclose both commands in a do block.)\
\>", "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187473716*^9}, 
   3.458187570674*^9, {3.4596906673789997`*^9, 3.459690688175*^9}, {
   3.4598912118331504`*^9, 3.45989125297515*^9}}],

Cell["\<\
=> (time
     (while (some #(nil? @%) output-vector)    ;while any of the agents \
contains a nil,
       (Thread/sleep 50)))                     ;wait for 50 more msecs
\"Elapsed time: 27075.338346 msecs\"\
\>", "Program",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.4581874773599997`*^9}, 
   3.459625996906*^9, {3.4596900202609997`*^9, 3.45969004544*^9}, {
   3.459690757106*^9, 3.4596907677019997`*^9}}],

Cell["\<\

Since 27 seconds is 60% of 45 seconds, it's clear that parallelization is \
effective by almost a factor of two on my dual-core machine.\
\>", "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187482884*^9}, 
   3.4581875722*^9, {3.45962646526*^9, 3.4596265250150003`*^9}, {
   3.4596269301949997`*^9, 3.45962697796*^9}, 3.459690060976*^9, 
   3.459690266118*^9}],

Cell["\<\
You need not use agents and send-off to parallelize. You could also use \
Java's Thread class directly, or use Clojure's pvalues function or similar. \
\>", "Text",
 CellChangeTimes->{{3.459690188948*^9, 3.4596902856619997`*^9}},
 FormatType->"TextForm"],

Cell["\<\
Agents are, however, an elegant and simple way to make use of multiple \
threads in Clojure.\
\>", "Text",
 CellChangeTimes->{{3.459690188948*^9, 3.4596902885690002`*^9}},
 FormatType->"TextForm"]
}, Closed]],

Cell[CellGroupData[{

Cell["Example 2: A Test of Per-Call Overhead", "Subsection",
 CellChangeTimes->{{3.4596895846549997`*^9, 3.4596896101809998`*^9}, {
   3.4596898777200003`*^9, 3.4596899054449997`*^9}, 3.459691818466*^9}],

Cell["\<\
Keep in mind that the concurrency queue can handle evaluations from an \
arbitrarily large number of threads. The overhead for each evaluation is \
quite low. Let's evaluate 10,000 CPU-light expressions.\
\>", "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187486623*^9}}],

Cell["\<\
Create a vector of agents to store the results of 10,000 computations:\
\>", "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187489435*^9}}],

Cell["\<\
=> (def output-vector
     (vec (for [i (range 10000)] (agent nil))))
#'user/output-vector\
\>", "Program",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187491981*^9}}],

Cell["\<\

We are going to execute Sqrt[i] 10,000 times, where i is the index of the \
current agent in the output vector. \
\>", "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187494816*^9}, 
   3.458187573987*^9, 3.4596913778970003`*^9}],

Cell["\<\
=> (doseq [i (range (count output-vector))]             ;for each agent in \
the output vector
     (send (nth output-vector i)                        ;update the agent \
with the result of
           (fn [_] (pmath [\"i\" i] \"Sqrt[i] // N\"))))    ;the sqrt of the \
index of that agent.
                                                        ;note that //N is \
Mathematica shorthand for
                                                        ;\"evaluate \
numerically rather than symbolically\"
nil\
\>", "Program",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187498718*^9}, {
  3.459690085949*^9, 3.459690148832*^9}, {3.459690630664*^9, 
  3.45969064291*^9}, {3.459691043835*^9, 3.459691044572*^9}, {
  3.4596913287609997`*^9, 3.459691329198*^9}}],

Cell["\<\

We use send instead of send-off because my machine doesn't have memory for \
10,000 threads. A powerful multicore machine or Terracotta cluster might. \
send updates its agent using a thread from a limited thread pool. The threads \
are recycled, and at a certain point send will wait for a thread from the \
thread pool to become available rather than create a new thread. send-off \
always creates a new thread when there are no idle threads in the thread \
pool. send-off can therefore create an arbitrarily large number of threads, \
possibly eating up all the JVM's memory.\
\>", "Text",
 CellChangeTimes->{{3.4596913876280003`*^9, 3.459691398993*^9}, {
  3.4598912929641504`*^9, 3.4598913417481503`*^9}}],

Cell["Wait for the results:", "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.4581875014700003`*^9}, 
   3.458187575781*^9, 3.4596913910150003`*^9}],

Cell["\<\
=> (time
     (while (some #(nil? @%) output-vector)    ;while any of the agents \
contains a nil,
       (Thread/sleep 50)))                     ;wait for 50 more msecs
\"Elapsed time: 33172.877977 msecs\"\
\>", "Program",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187503948*^9}, 
   3.459627100635*^9, {3.459690144167*^9, 3.4596901539300003`*^9}, 
   3.459691146538*^9}],

Cell["\<\

This result implies that the total overhead per computation is around 3.3 ms. \
We computed 10,000 expressions and the entire task took 33,000 ms. Check that \
the right thing has happened:\
\>", "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187507068*^9}, 
   3.458187578043*^9, {3.459627106282*^9, 3.459627111684*^9}, {
   3.459691148675*^9, 3.459691150388*^9}, {3.4598913499711504`*^9, 
   3.4598913566531506`*^9}}],

Cell["\<\
=> @(nth output-vector 2500)        ;good, 50 is the square root of 2500
50.0\
\>", "Program",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187509593*^9}, {
  3.4598913649011507`*^9, 3.4598913749481506`*^9}}],

Cell[TextData[{
 "\nNote that each separate call to the Clojuratica parallel evaluator will \
be sent to a *single* kernel. Parallelism occurs when (and only when) ",
 StyleBox["multiple",
  FontSlant->"Italic"],
 " threads are making calls to the parallel evaluator simultaneously. If you \
need to parallelize a ",
 StyleBox["single",
  FontSlant->"Italic"],
 " Mathematica expression, such as a call to Mathematica's Map[], you should \
use Mathematica's built-in parallelization functions such as Parallelize[]. \
In this event you need not use a parallel evaluator, although you may."
}], "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187513054*^9}, 
   3.4581875772460003`*^9, {3.45962720015*^9, 3.4596272015150003`*^9}, {
   3.459691176606*^9, 3.4596913067650003`*^9}, {3.4598913863961506`*^9, 
   3.4598914110031505`*^9}}],

Cell["\<\
=> (math [] \"Parallelize[Map[FactorInteger, {1, 11, 111, 1111, 11111}]]\")
(((1 1)) ((11 1)) ((3 1) (37 1)) ((11 1) (101 1)) ((41 1) (271 1)))\
\>", "Program",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187516691*^9}}],

Cell["", "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187520106*^9}, 
   3.458187579434*^9, 3.458246686051*^9, {3.4596273418*^9, 3.459627348374*^9},
    3.459689623987*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Global Variables and Parallelism", "Subsection",
 CellChangeTimes->{{3.459689639041*^9, 3.4596896619630003`*^9}, {
  3.459690339954*^9, 3.45969034194*^9}}],

Cell["\<\
The global setter automatically distributes global variables to all parallel \
kernels when it was created with a parallel evaluator.\
\>", "Text",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187520106*^9}, 
   3.458187579434*^9, 3.458246686051*^9, {3.4596273418*^9, 3.459627348374*^9},
    3.459689623987*^9}],

Cell["\<\
=> (def pglobal-set (get-global-setter pevaluate))

=> (pglobal-set \"identity\" [[1 0] [0 1]])
(#<Expr List> #<Expr {1,0}> #<Expr {0,1}>)

=> (pvalues (pmath [] \"identity * 2\") (pmath [] \"identity / 2 // N\"))
(((2 0) (0 2)) ((0.5 0.0) (0.0 0.5)))\
\>", "Program",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.458187523189*^9}, 
   3.4596273604960003`*^9, {3.45962740221*^9, 3.459627422521*^9}}],

Cell["", "Text",
 FormatType->"TextForm"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Functions as First-Class Clojure Functions"
}], "Section",
 CellChangeTimes->{{3.4596457367860003`*^9, 3.459645754028*^9}, {
  3.459646142145*^9, 3.459646144925*^9}}],

Cell[CellGroupData[{

Cell["The Function Wrapper ", "Subsection",
 CellChangeTimes->{{3.45970871221*^9, 3.459708714704*^9}, {3.459711277743*^9, 
  3.459711294068*^9}, {3.459711421909*^9, 3.459711436351*^9}, {
  3.4597146920150003`*^9, 3.459714694428*^9}}],

Cell[TextData[{
 "The evaluator and parser jointly provide an elegant, simple interface to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". There are times, however, when an even tighter interface is called for."
}], "Text",
 CellChangeTimes->{{3.4597087330889997`*^9, 3.459708771443*^9}, {
  3.459711185883*^9, 3.459711186472*^9}, {3.459711973314*^9, 
  3.459711977778*^9}, {3.4598926913681507`*^9, 3.45989269243515*^9}}],

Cell[TextData[{
 "Clojuratica provides an easy way to wrap ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions in a Clojure interface layer. Thereafter, they may be treated as \
first-class Clojure functions. All of Clojure's functional programming \
features instantly apply to functions written in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.459708778079*^9, 3.45970879565*^9}, {3.459711191512*^9, 
  3.459711267028*^9}, {3.459711340477*^9, 3.459711347618*^9}, {
  3.459711987457*^9, 3.459712020658*^9}, {3.45989270845415*^9, 
  3.4598927126761503`*^9}}],

Cell[TextData[{
 "When a wrapped ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function is called in Clojure, Clojuratica transparently evaluates the \
function call using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". Arguments to the wrapped function are transparently converted to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " data types and passed to the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function. The return value of the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function is automatically converted back to a Clojure data type."
}], "Text",
 CellChangeTimes->{{3.459711450427*^9, 3.459711582578*^9}, {3.459711630226*^9,
   3.45971167616*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "Let us illustrate wrapping a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function and calling it in Clojure."
}], "Text",
 CellChangeTimes->{{3.459711690299*^9, 3.459711703408*^9}, {3.459712040245*^9,
   3.459712058986*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "First, we must get a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function wrapper."
}], "Text",
 CellChangeTimes->{{3.459711711959*^9, 3.4597118701800003`*^9}, {
   3.45971191319*^9, 3.459711914066*^9}, 3.459712062883*^9, {
   3.4597137240480003`*^9, 3.459713739252*^9}, 3.4598927544401503`*^9}],

Cell["\<\
=> (def fn-wrap (get-fn-wrapper evaluate))
#'user/fn-wrap\
\>", "Program",
 CellChangeTimes->{{3.4597117791359997`*^9, 3.459711791242*^9}, {
  3.459711871639*^9, 3.459711889599*^9}, {3.459713742795*^9, 
  3.459713760828*^9}}],

Cell[TextData[{
 "\nThe function get-fn-wrapper returns a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function wrapper. get-fn-wrapper takes an evaluator as its argument. The \
evaluator passed to get-fn-wrapper will be used to execute calls to the \
wrapped ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function."
}], "Text",
 CellChangeTimes->{{3.4598927626441507`*^9, 3.4598927696941504`*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "Now we can create a wrapped ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function. The syntax of the function wrapper is similar to that of the \
evaluator. We will create a function taking one argument and returing its \
argument incremented by one."
}], "Text",
 CellChangeTimes->{
  3.4597118997019997`*^9, {3.4597121076210003`*^9, 3.459712117207*^9}, {
   3.459712151984*^9, 3.4597121596689997`*^9}, {3.459713792025*^9, 
   3.459713797509*^9}, {3.459713871113*^9, 3.459713887186*^9}, {
   3.4598927713681507`*^9, 3.45989278654615*^9}}],

Cell["\<\
=> (def increment (fn-wrap [] \"Function[{x}, x + 1]\"))
#'user/increment

=> (increment 1)
2\
\>", "Program",
 CellChangeTimes->{{3.459712120502*^9, 3.459712149782*^9}, {3.459713778144*^9,
   3.459713862525*^9}, {3.459714031987*^9, 3.459714033337*^9}, {
  3.459716934145*^9, 3.4597169345950003`*^9}}],

Cell["\<\

It's as simple as that. Now you can treat increment as a normal Clojure \
function. \
\>", "Text",
 CellChangeTimes->{{3.459713989335*^9, 3.459714021388*^9}, {
  3.4597140592320004`*^9, 3.459714071627*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (map increment [3 4 5 [1 2] 6])
(4 5 6 (2 3) 7)\
\>", "Program",
 CellChangeTimes->{{3.459714023408*^9, 3.45971404024*^9}, {
  3.4597140748310003`*^9, 3.459714087483*^9}, {3.459714136102*^9, 
  3.4597141483129997`*^9}, {3.459714480475*^9, 3.459714483394*^9}}],

Cell[TextData[{
 "\nNote that the function looks and acts like a Clojure function from \
Clojure's perspective, but functions like a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function. The internal vector [1 2] is incremented because in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " the Plus operation is automatically threaded across lists (i.e. has the \
Listable attribute)."
}], "Text",
 CellChangeTimes->{{3.4597141530150003`*^9, 3.459714210534*^9}, {
  3.4597143545769997`*^9, 3.459714423525*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "Finally, note that you can specify a bare symbol as the function \
definition. In this case, Clojuratica will assume that the symbol is a \
function and call it on the passed arguments. This is useful for wrapping \
pre-existing ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions, for example."
}], "Text",
 CellChangeTimes->{{3.4597249870550003`*^9, 3.459725045125*^9}, {
  3.459725215541*^9, 3.45972521775*^9}, {3.45972527262*^9, 3.459725321197*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (def factorize (fn-wrap [] \"FactorInteger\"))
#'user/factorize

=> (factorize 21)
((3 1) (7 1))\
\>", "Program",
 CellChangeTimes->{{3.459725076389*^9, 3.459725090275*^9}, {
  3.4597251496219997`*^9, 3.4597251666400003`*^9}, {3.4597251983529997`*^9, 
  3.459725200135*^9}}],

Cell["", "Text",
 FormatType->"TextForm"]
}, Closed]],

Cell[CellGroupData[{

Cell["Creating Closures", "Subsection",
 CellChangeTimes->{{3.459714698602*^9, 3.4597147141540003`*^9}},
 FormatType->"TextForm"],

Cell["\<\
You may have noticed that the function wrapper's first argument is a vector. \
In the example above the vector was empty.\
\>", "Text",
 CellChangeTimes->{{3.4597147406549997`*^9, 3.459714767942*^9}, {
   3.459715119296*^9, 3.459715121774*^9}, 3.45989285699415*^9}],

Cell["\<\
As with the evaluator, this vector is a vector of assignments. The function \
created by the function wrapper will be closed over the variables specified \
in the assignment vector. If you are not familiar with the notion of a \
closure, Wikipedia has a good introduction.\
\>", "Text",
 CellChangeTimes->{{3.4597147687320004`*^9, 3.459714864745*^9}}],

Cell["Let's close over a matrix passed as a vector of vectors.", "Text",
 CellChangeTimes->{{3.4597155004820004`*^9, 3.459715535646*^9}, {
  3.459715573954*^9, 3.459715575608*^9}, {3.459715614917*^9, 
  3.459715628468*^9}, {3.4598928802971506`*^9, 3.4598928831281505`*^9}, {
  3.4598939404261503`*^9, 3.45989394474415*^9}}],

Cell["\<\
=> (def identity-2-by-2 [[1 0]
                         [0 1]])
#'user/identity-2-by-2

=> (def diagonalize-2-by-2 (fn-wrap [\"identity\" identity-2-by-2] \
\"Function[{x}, identity * x]\"))
#'user/diagonalize-2-by-2

=> (math [] \"identity = {{0, 0}, {0, 0}}\")   ;this definition will not \
affect the closed-over value
((0 0) (0 0))

=> (diagonalize-2-by-2 [[5 6] 
                        [7 8]])
((5 0) (0 8))\
\>", "Program",
 CellChangeTimes->{{3.45971565377*^9, 3.459715807046*^9}, {3.459715844148*^9, 
  3.459715858608*^9}, {3.4597295796540003`*^9, 3.459729623716*^9}, {
  3.4598929548821507`*^9, 3.4598929551281505`*^9}}],

Cell["", "Text",
 CellChangeTimes->{{3.459714853883*^9, 3.4597148564639997`*^9}, 
   3.459716019693*^9},
 FormatType->"TextForm"]
}, Closed]],

Cell[CellGroupData[{

Cell["Many Ways to Define Functions", "Subsection",
 CellChangeTimes->{{3.459715975102*^9, 3.45971598294*^9}, {3.459716145151*^9, 
  3.459716179258*^9}, {3.459724021829*^9, 3.459724038508*^9}, {
  3.459724385774*^9, 3.4597244032860003`*^9}, {3.459730017858*^9, 
  3.45973002635*^9}, {3.4598880401461506`*^9, 3.4598880405071507`*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " offers a number of syntaxes for defining functions. Some are based on the \
anonymous function syntax (\"MyIncrement = Function[{x}, x + 1]\", whose \
shorthand is \"MyIncrement = # + 1 &\"). Others are based on the \
pattern-matching syntax (\"MyIncrement[x_] := x + 1\"). "
}], "Text",
 CellChangeTimes->{{3.459716188638*^9, 3.459716361769*^9}, {3.459716610788*^9,
    3.4597166472530003`*^9}, {3.4597166807539997`*^9, 3.459716680935*^9}, {
   3.459716715316*^9, 3.459716717609*^9}, 3.4597228177209997`*^9},
 FormatType->"TextForm"],

Cell["\<\
You can use any of these syntaxes when creating wrapped functions using the \
function wrapper. The following examples illustrate use of the different \
syntaxes.\
\>", "Text",
 CellChangeTimes->{{3.459716188638*^9, 3.459716453881*^9}, {3.459716729612*^9,
    3.459716743567*^9}, 3.459716866943*^9, {3.459717123663*^9, 
   3.459717150138*^9}, {3.459717339906*^9, 3.459717359901*^9}, {
   3.4597240600290003`*^9, 3.459724106024*^9}, {3.4598940024381504`*^9, 
   3.45989400360015*^9}}],

Cell["\<\
=> (def increment (fn-wrap [] \"Function[{x}, x + 1]\"))               \
;anonymous function syntax
#'user/increment

=> (increment 1)
2\
\>", "Program",
 CellChangeTimes->{{3.459716912696*^9, 3.45971694805*^9}, {
  3.4597169876949997`*^9, 3.459716992551*^9}, {3.4597171103*^9, 
  3.459717111435*^9}, {3.459717684005*^9, 3.459717698457*^9}}],

Cell[TextData[{
 "\nWhen using anonymous function syntax, you may, but need not, assign the \
anonymous function to a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " symbol. If you do assign the function to a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " symbol, the function name will have global scope and will be callable \
using the evaluator."
}], "Text",
 CellChangeTimes->{{3.459716188638*^9, 3.459716453881*^9}, {3.459716729612*^9,
   3.459716773377*^9}, {3.459716826356*^9, 3.459716845867*^9}, {
  3.459716995635*^9, 3.459717010955*^9}, {3.4597173753389997`*^9, 
  3.459717471719*^9}, {3.45971753512*^9, 3.459717563243*^9}, {
  3.459721002947*^9, 3.459721026762*^9}, {3.4597212793640003`*^9, 
  3.4597212811140003`*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (def increment (fn-wrap [] \"Increment1 = Function[{x}, x + 1]\"))  \
;anonymous function syntax with an assignment
#'user/increment

=> (increment 1)
2

=> (math [] \"Increment1[1]\")
2\
\>", "Program",
 CellChangeTimes->{{3.459716912696*^9, 3.45971694805*^9}, {
   3.4597169876949997`*^9, 3.4597170261400003`*^9}, 3.459717636284*^9, {
   3.459717678891*^9, 3.459717696925*^9}, {3.4597210368929996`*^9, 
   3.459721091493*^9}, {3.459721194501*^9, 3.459721196847*^9}}],

Cell[TextData[{
 "\nNote that the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " symbol to which the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function is assigned (Increment1 in the case above) need not correspond to \
the name of the Clojure symbol to which the wrapped function is assigned. In \
this case I chose Increment1 because Increment is the name of a built-in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function. "
}], "Text",
 CellChangeTimes->{{3.459716188638*^9, 3.459716453881*^9}, {3.459716729612*^9,
   3.459716773377*^9}, {3.459716826356*^9, 3.459716845867*^9}, {
  3.459716995635*^9, 3.459717059578*^9}, {3.4597171582539997`*^9, 
  3.4597172131210003`*^9}, {3.459717588233*^9, 3.459717603635*^9}, {
  3.459717638727*^9, 3.459717650278*^9}, {3.459721106624*^9, 
  3.459721106877*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "When using the pattern-matching syntax, you must naturally name the \
function, since otherwise ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will have no symbol to attach the pattern to. Again, the name of the \
function will have global scope in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.459716188638*^9, 3.459716453881*^9}, {3.459716729612*^9,
   3.459716773377*^9}, {3.459716826356*^9, 3.459716845867*^9}, {
  3.459716995635*^9, 3.459717059578*^9}, {3.4597171582539997`*^9, 
  3.4597172131210003`*^9}, {3.459717588233*^9, 3.459717604627*^9}, {
  3.459721121837*^9, 3.459721134316*^9}}],

Cell["\<\
=> (def increment-by-two (fn-wrap [] \"Increment2[x_] := x + 2\"))     \
;pattern-matching syntax
#'user/increment-by-two

=> (increment-by-two 1)
3

=> (math [] \"Increment2[1]\")
3\
\>", "Program",
 CellChangeTimes->{{3.459716486855*^9, 3.4597164877860003`*^9}, {
   3.459716604887*^9, 3.459716605276*^9}, {3.459717614571*^9, 
   3.459717621729*^9}, {3.459717652988*^9, 3.459717701948*^9}, {
   3.459721146973*^9, 3.459721150443*^9}, {3.459721187026*^9, 
   3.459721244355*^9}, {3.459721304442*^9, 3.459721305151*^9}, 
   3.459722809512*^9, 3.45972411375*^9}],

Cell["\<\

You can use the pattern-matching syntax to overload functions. Let's overload \
the Increment2 function such that it does something different when its \
argument is a string.\
\>", "Text",
 CellChangeTimes->{{3.4597213267*^9, 3.459721380906*^9}, {3.459721487177*^9, 
  3.459721489104*^9}, {3.459723565591*^9, 3.459723572615*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (def increment-by-two (fn-wrap [] \"Increment2[x_String] := x <> \\\" plus \
two\\\"\"))
#'user/increment-by-two

=> (increment-by-two 1)
3

=> (increment-by-two \"1\")
\"1 plus two\"\
\>", "Program",
 CellChangeTimes->{{3.45972135995*^9, 3.459721452968*^9}, 
   3.4597232545109997`*^9}],

Cell[TextData[{
 "\nNote that we simply defined the new wrapped function right over the old \
one. The overloading takes place on the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " side."
}], "Text",
 CellChangeTimes->{{3.459721518734*^9, 3.459721522908*^9}, {3.459723391429*^9,
   3.459723405472*^9}, {3.459723476842*^9, 3.45972356156*^9}}],

Cell[TextData[{
 "As veteran users of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will know, the pattern-matching syntax provides more features in complex \
situations than the anonymous-function syntax does (overloading, for one). In \
the case of creating a simple increment function, however, there is no \
concrete advantage to using pattern-matching syntax."
}], "Text",
 CellChangeTimes->{3.4598940197011504`*^9},
 FormatType->"TextForm"],

Cell["Variable arity is supported. So is recursion.", "Text",
 CellChangeTimes->{{3.459721518734*^9, 3.459721522908*^9}, {3.459723391429*^9,
   3.459723405472*^9}, {3.459723476842*^9, 3.459723545586*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (def increment-by-two (fn-wrap [] \"Increment2[x___] := Map[Increment2, \
{x}]\"))
#'user/increment-by-two

=> (increment-by-two \"1\" 6 12 \"foo\")
(\"1 plus two\" 8 14 \"foo plus two\")

=> (increment-by-two)
nil\
\>", "Program",
 CellChangeTimes->{{3.459721531992*^9, 3.459721617922*^9}, {
  3.4597226238380003`*^9, 3.4597226269960003`*^9}, {3.459723259427*^9, 
  3.459723263006*^9}, {3.459723314855*^9, 3.4597233157980003`*^9}, {
  3.459723422602*^9, 3.459723463557*^9}}],

Cell["", "Text",
 FormatType->"TextForm"]
}, Closed]],

Cell[CellGroupData[{

Cell["Flags", "Subsection",
 CellChangeTimes->{{3.4598880632021503`*^9, 3.4598880698191504`*^9}, {
  3.4598889070941505`*^9, 3.4598889112481503`*^9}},
 FormatType->"TextForm"],

Cell["\<\
The function wrapper automatically parses the output of the wrapped function. \
This behavior can be changed with the :no-parse flag.\
\>", "Text",
 CellChangeTimes->{{3.45988808154815*^9, 3.4598881154621506`*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (def increment (fn-wrap :no-parse [] \"Function[{x}, x + 1]\"))
#'user/increment

=> (increment 1)
(#<Expr Integer>)

=> (parse (increment 1))
2\
\>", "Program",
 CellChangeTimes->{{3.4598881753591504`*^9, 3.4598881757791505`*^9}, {
  3.4598882061541505`*^9, 3.45988823641415*^9}, {3.4598884110951505`*^9, 
  3.4598884266571503`*^9}},
 FormatType->"TextForm"],

Cell["\<\

As always, flags can be specified to the generator function in order to set \
defaults.\
\>", "Text",
 CellChangeTimes->{{3.4598882477401505`*^9, 3.45988826885715*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (def fn-wrap* (get-fn-wrapper :no-parse evaluate))
#'user/fn-wrap*

=> (def increment (fn-wrap* [] \"Function[{x}, x + 1]\"))
#'user/increment

=> (increment 1)
(#<Expr Integer>)\
\>", "Program",
 CellChangeTimes->{{3.45988828145615*^9, 3.4598883594151506`*^9}, {
  3.4598884176511507`*^9, 3.4598884328381505`*^9}},
 FormatType->"TextForm"],

Cell["\<\

The opposite of :no-parse is :parse.\
\>", "Text",
 CellChangeTimes->{{3.4598883741881504`*^9, 3.4598883840681505`*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (def increment (fn-wrap* :parse [] \"Function[{x}, x + 1]\"))
#'user/increment

=> (increment 1)
2\
\>", "Program",
 CellChangeTimes->{{3.45988839660015*^9, 3.4598884015631504`*^9}, {
  3.4598884789191504`*^9, 3.4598884810581503`*^9}},
 FormatType->"TextForm"],

Cell["\<\

The function wrapper accepts all evaluator flags (and therefore all parser \
flags). For example:\
\>", "Text",
 CellChangeTimes->{{3.45988851113815*^9, 3.4598885263961506`*^9}, {
  3.4598941480621505`*^9, 3.4598941481551504`*^9}}],

Cell["\<\
=> (def increment-list (fn-wrap :seqs [] \"Function[{x}, Map[#+1&, x]]\"))    \
;parsing to seqs
#'user/increment-list

=> (increment-list [1 2 3])   ;creates a seq
(2 3 4)

=> (def increment-list* (fn-wrap :vectors [] \"Function[{x}, Map[#+1&, \
x]]\"))   ;parsing to vectors this time
#'user/increment-list*

=> (increment-list* [1 2 3])   ;creates a vector
[2 3 4]\
\>", "Program",
 CellChangeTimes->{{3.4598885344621506`*^9, 3.4598886994151506`*^9}},
 FormatType->"TextForm"],

Cell["", "Text",
 FormatType->"TextForm"]
}, Closed]],

Cell[CellGroupData[{

Cell["Parallel Computation Using Wrapped Functions", "Subsection",
 CellChangeTimes->{{3.459724415102*^9, 3.459724424752*^9}, {3.459730142705*^9,
   3.459730145159*^9}}],

Cell["\<\
If you want calls to your wrapped functions to be evaluated in parallel, \
simply ensure that you call get-fn-wrapper with a parallel evaluator when \
creating your function wrapper.\
\>", "Text",
 CellChangeTimes->{{3.459724450367*^9, 3.459724477988*^9}, {3.459725378898*^9,
   3.459725382869*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (def pfn-wrap (get-fn-wrapper pevaluate))
#'user/pfn-wrap\
\>", "Program",
 CellChangeTimes->{{3.4597245057939997`*^9, 3.459724528651*^9}, {
  3.4597251086359997`*^9, 3.459725109972*^9}}],

Cell[TextData[{
 "\[LineSeparator]Let's replicate using the function wrapper an example from \
the Parallel Computation section of the tutorial earler (",
 ButtonBox["Example 1: A Performance Test",
  BaseStyle->"Hyperlink",
  ButtonData->"Example 1: A Performance Test"],
 "). "
}], "Text",
 CellChangeTimes->{{3.459724535083*^9, 3.4597245858050003`*^9}, {
  3.459724647447*^9, 3.4597247066029997`*^9}, {3.459724835626*^9, 
  3.4597248387609997`*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "First, we'll create a vector of thirty agents. These agents are going to \
end up storing the results of the thirty CPU-intensive computations we are \
going to farm out to thirty Clojure threads. In turn, the Clojure threads \
will each evaluate a wrapped ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function. Since our function wrapper, pfn-wrap, was created with a \
parallel evaluator, Clojuratica will ensure that the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " computations are run in parallel."
}], "Text",
 CellChangeTimes->{{3.45972470783*^9, 3.459724752558*^9}, {3.459724843781*^9, 
  3.4597248757390003`*^9}, {3.4597251158129997`*^9, 3.459725120726*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (def output-vector
     (vec (for [i (range 30)] (agent nil))))  ;create a vector of thirty agents
#'user/output-vector\
\>", "Program",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.4581874558050003`*^9}, {
  3.459690743792*^9, 3.459690744766*^9}, {3.4597301664110003`*^9, 
  3.45973016806*^9}}],

Cell["\<\

Our wrapped function will perform a simple integer factorization.\
\>", "Text",
 CellChangeTimes->{{3.459724812335*^9, 3.459724829898*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (def factorize (pfn-wrap [\"int\" \
42039483204432094832932317913181713501317130511] \"Function[{}, \
FactorInteger[int]]\"))
#'user/factorize\
\>", "Program",
 CellChangeTimes->{{3.459724921082*^9, 3.459724958486*^9}, {
  3.4597251252200003`*^9, 3.459725125224*^9}, {3.4597254101949997`*^9, 
  3.4597254125179996`*^9}, {3.459726174692*^9, 3.45972619096*^9}, {
  3.4597263779849997`*^9, 3.4597263878059998`*^9}, {3.459730523676*^9, 
  3.459730531115*^9}},
 FormatType->"TextForm"],

Cell["\<\
\[LineSeparator]As before, we will send-off each agent with an instruction to \
compute this function. We will also time the thirty computations as before.\
\>", "Text",
 CellChangeTimes->{{3.459725909199*^9, 3.459725961546*^9}, {3.459730678975*^9,
   3.459730679869*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (do
     (doseq [output-agent output-vector]              ;for each agent in the \
output vector,
       (send-off output-agent (fn [_] (factorize))))  ;update the agent with \
the result of the expression
     (time
       (while (some #(nil? @%) output-vector)         ;while any of the \
agents contains a nil,
         (Thread/sleep 50))))                         ;wait for 50 more msecs
\"Elapsed time: 29992.049479 msecs\"
nil\
\>", "Program",
 CellChangeTimes->{{3.4581874211210003`*^9, 3.45818747059*^9}, {
   3.4596899656070004`*^9, 3.459689987638*^9}, {3.459690602781*^9, 
   3.459690621366*^9}, {3.45972597979*^9, 3.4597260406029997`*^9}, 
   3.4597261355439997`*^9, {3.4597261829230003`*^9, 3.459726227953*^9}, {
   3.459726431008*^9, 3.4597264334960003`*^9}}],

Cell["\<\

Thirty seconds is approximately the same length of time as the task required \
using the parallel evaluator directly. Parallelism, then, is effective here, \
too.\
\>", "Text",
 CellChangeTimes->{{3.459726436547*^9, 3.4597264942200003`*^9}, {
  3.45972968075*^9, 3.459729691752*^9}, {3.459730365278*^9, 
  3.4597304247390003`*^9}, {3.459730686376*^9, 3.45973069048*^9}, {
  3.4598941906281505`*^9, 3.45989419146815*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Wrapping Functions Automatically When Parsing", "Subsection",
 CellChangeTimes->{{3.45988699623715*^9, 3.4598870074831505`*^9}},
 FormatType->"TextForm"],

Cell["\<\
The parser knows how to wrap first class functions automatically when it \
encouters them. To be able to do this, the parser needs to have been called \
with an optional second argument containing a function wrapper. \
\>", "Text",
 CellChangeTimes->{{3.4598871628671503`*^9, 3.4598872549971504`*^9}, {
  3.4598872936671505`*^9, 3.4598872953471503`*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (def pfn-wrap (get-fn-wrapper pevaluate))
#'user/pfn-wrap

=> (def pparse (get-parser kernel-link pfn-wrap))
#'user/pparse

=> (def pmath (comp pparse pevaluate))
#'user/pmath\
\>", "Program",
 CellChangeTimes->{{3.45988727673015*^9, 3.4598873026181507`*^9}, {
  3.4598873583041506`*^9, 3.4598873920511503`*^9}, {3.4598887436201506`*^9, 
  3.45988874454815*^9}, {3.4598942620871506`*^9, 3.4598942630231504`*^9}}],

Cell[TextData[{
 "\nNow the parser will automatically create wrapped functions wherever it \
encounters first-class ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions (i.e. functions defined with Function[] or &, not the \
pattern-matching syntax)."
}], "Text",
 CellChangeTimes->{{3.4598873949061503`*^9, 3.45988745901315*^9}, {
  3.4598876276481504`*^9, 3.4598876297531505`*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (def increment (pmath [] \"Function[{x}, x + 1]\"))
#'user/increment

=> increment
#<fn_wrap$fn__478$fn__32__auto____486$wrapped_fn__488 \
clojuratica.fn_wrap$fn__478$fn__32__auto____486$wrapped_fn__488@1f1235b>

=> (increment 10)
11\
\>", "Program",
 CellChangeTimes->{{3.4598874160701504`*^9, 3.4598874310761504`*^9}, {
  3.4598874615611506`*^9, 3.4598875266291504`*^9}, {3.4598875782501507`*^9, 
  3.45988769586915*^9}, {3.4598877436081505`*^9, 3.4598877446951504`*^9}, {
  3.4598877979531507`*^9, 3.4598878187171507`*^9}, {3.45989422057415*^9, 
  3.4598942346421504`*^9}, {3.4598942898491507`*^9, 3.4598943132521505`*^9}}],

Cell["\<\

The parser will wrap functions found in data structures such as lists. \
\>", "Text",
 CellChangeTimes->{{3.4598943175161505`*^9, 3.4598943533261504`*^9}},
 FormatType->"TextForm"],

Cell["\<\
=> (def fn-vector (pmath :vectors [] \"{#+1&, #-1&, #^5&, {{#, 0}, {0, \
#}}&}\"))
#'user/fn-vector

=> ((fn-vector 0) 2)
3

=> ((fn-vector 1) 2)
1

=> ((fn-vector 2) 2)
32

=> ((fn-vector 3) 2)
((2 0) (0 2))\
\>", "Program",
 CellChangeTimes->{{3.4598874160701504`*^9, 3.4598874310761504`*^9}, {
  3.4598874615611506`*^9, 3.4598875266291504`*^9}, {3.4598875782501507`*^9, 
  3.45988769586915*^9}, {3.4598877436081505`*^9, 3.4598877446951504`*^9}, {
  3.4598877979531507`*^9, 3.4598878187171507`*^9}, {3.45989422057415*^9, 
  3.4598942346421504`*^9}, {3.4598942898491507`*^9, 3.45989431508115*^9}}],

Cell["\<\

Because we created our parser using pfn-wrap (a parallel function wrapper \
created using a parallel evaluator), any functions created by the parser will \
automatically be evaluated in parallel when called from different threads. \
This is very cool.\
\>", "Text",
 CellChangeTimes->{{3.4598887578181505`*^9, 3.4598888788771505`*^9}, {
  3.4598943701281505`*^9, 3.45989441329815*^9}, {3.4598944612661505`*^9, 
  3.4598944686221504`*^9}}]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "The ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Package"
}], "Title",
 CellChangeTimes->{3.458250584458*^9},
 CellTags->"The Mathematica Package"],

Cell[CellGroupData[{

Cell["Getting Started", "Section",
 CellChangeTimes->{{3.4582467488120003`*^9, 3.458246749551*^9}, 
   3.459732733774*^9}],

Cell[CellGroupData[{

Cell["Context", "Subsection",
 CellChangeTimes->{{3.459732745289*^9, 3.459732746014*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "The ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package provides features for calling Java classes written in Clojure. It \
supports a paradigm wherein the control-flow of your program is written on \
the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " side, with calls to Clojure where necessary. "
}], "Text",
 CellChangeTimes->{{3.458246782359*^9, 3.458246810166*^9}, {3.458246843067*^9,
   3.458246869084*^9}, {3.458246948409*^9, 3.458246954409*^9}, {
  3.459628459356*^9, 3.459628459361*^9}, {3.4596455859630003`*^9, 
  3.4596455862799997`*^9}, {3.4597321489639997`*^9, 3.459732153168*^9}, {
  3.459732601909*^9, 3.4597326057799997`*^9}}],

Cell[TextData[{
 "Calls to Clojure must take the form of calls to the methods (static methods \
or instance methods) of Java classes generated using Clojure's gen-class \
functionality. See the Clojure's ",
 ButtonBox["guide on compilation and class-generation",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://clojure.org/compilation"], None},
  ButtonNote->"http://clojure.org/compilation"],
 " for more information on how gen-class works. "
}], "Text",
 CellChangeTimes->{{3.458246955717*^9, 3.4582470422650003`*^9}, {
   3.4582471102469997`*^9, 3.458247171449*^9}, {3.4582473279300003`*^9, 
   3.458247338748*^9}, {3.458247486849*^9, 3.458247511719*^9}, {
   3.4597317872209997`*^9, 3.4597318451099997`*^9}, {3.4597319870299997`*^9, 
   3.459732086026*^9}, 3.459732169767*^9, {3.459732621885*^9, 
   3.459732624835*^9}}],

Cell[TextData[{
 "Clojuratica does not support the runtime execution of arbitrary Clojure \
expressions (as if a REPL were embedded in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "). This is for both technical and performance reasons. Even if there were \
no technical difficulties with the execution of arbitrary Clojure \
expressions, method calls to compiled classes would be preferable for \
performance reasons alone."
}], "Text",
 CellChangeTimes->{{3.458246955717*^9, 3.4582470422650003`*^9}, {
  3.4582471102469997`*^9, 3.458247171449*^9}, {3.4582473279300003`*^9, 
  3.458247338748*^9}, {3.458247486849*^9, 3.458247511719*^9}, {
  3.4597317872209997`*^9, 3.4597318451099997`*^9}, {3.4597319870299997`*^9, 
  3.459732086026*^9}, {3.459732169767*^9, 3.459732340983*^9}, {
  3.459732632513*^9, 3.459732683144*^9}, {3.4598089980558357`*^9, 
  3.459809071334835*^9}}],

Cell[TextData[{
 "Veteran ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " users will note that Clojuratica's interface to Clojure is similar to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s interface to Java. They are both based on calls to the methods of \
compiled classes. Indeed, the Clojure interface piggy-backs on ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s existing Java interface, and the syntax is nearly identical. \
Clojuratica's contribution is merely to ensure that the data types of method \
arguments and return values are translated transparantly."
}], "Text",
 CellChangeTimes->{{3.458246955717*^9, 3.4582470422650003`*^9}, {
  3.4582471102469997`*^9, 3.458247171449*^9}, {3.4582473279300003`*^9, 
  3.458247338748*^9}, {3.458247486849*^9, 3.458247511719*^9}, {
  3.4597317872209997`*^9, 3.459731961276*^9}, {3.459732093453*^9, 
  3.459732129193*^9}, {3.45973235544*^9, 3.459732484311*^9}, {
  3.459732525611*^9, 3.4597325617980003`*^9}, {3.4597327037860003`*^9, 
  3.459732712257*^9}, {3.4598090846938353`*^9, 3.4598090878198357`*^9}, {
  3.4598945287341504`*^9, 3.4598945354971504`*^9}}],

Cell["\<\
The following sections illustrate how to use Clojuratica's special syntax for \
calling Clojure-generated Java classes.\
\>", "Text",
 CellChangeTimes->{{3.458246955717*^9, 3.4582470422650003`*^9}, {
  3.4582471102469997`*^9, 3.458247171449*^9}, {3.4582473279300003`*^9, 
  3.458247338748*^9}, {3.458247486849*^9, 3.458247511719*^9}, {
  3.4597317872209997`*^9, 3.459731961276*^9}, {3.459732093453*^9, 
  3.459732129193*^9}, {3.45973235544*^9, 3.459732588508*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Basic Setup", "Subsection",
 CellChangeTimes->{{3.458247544127*^9, 3.458247545302*^9}}],

Cell[TextData[{
 "First, make sure that you have followed the installation instructures for \
both the Clojure and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " components. "
}], "Text",
 CellChangeTimes->{{3.458247555862*^9, 3.458247588242*^9}, {3.458247626046*^9,
   3.458247660449*^9}}],

Cell[TextData[{
 "Now we can get started. Tell ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to load the Clojuratica package."
}], "Text",
 CellChangeTimes->{{3.458247662374*^9, 3.4582476822460003`*^9}, {
  3.459732826799*^9, 3.459732827382*^9}}],

Cell[BoxData[
 RowBox[{"<<", " ", "\"\<Clojuratica`\>\""}]], "Input",
 CellChangeTimes->{{3.458247693642*^9, 3.458247699759*^9}, {
  3.4598949067751503`*^9, 3.4598949080351505`*^9}}],

Cell[TextData[{
 "\nThis command will succeed silently if ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is able to find and load the package."
}], "Text",
 CellChangeTimes->{{3.459732791146*^9, 3.459732835024*^9}, {
  3.4598091152248354`*^9, 3.4598091164688354`*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Calling Clojure", "Section",
 CellChangeTimes->{{3.4582901562460003`*^9, 3.458290164156*^9}, {
  3.4598115579308357`*^9, 3.4598115598228354`*^9}}],

Cell[CellGroupData[{

Cell["An Illustrative Clojure Class", "Subsection",
 CellChangeTimes->{{3.4598115623338356`*^9, 3.4598115683228354`*^9}, {
  3.4598118576218357`*^9, 3.4598118585328355`*^9}, {3.459813606608835*^9, 
  3.4598136330418353`*^9}}],

Cell[TextData[{
 "To illustrate Clojuratica's features for accessing Clojure, we will create \
and compile a simple Java class using Clojure. Copy the following code into a \
.clj file named SimpleClass.clj and compile it according to the instructions \
in Clojure's ",
 ButtonBox["guide on compilation and class-generation",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://clojure.org/compilation"], None},
  ButtonNote->"http://clojure.org/compilation"],
 ". "
}], "Text",
 CellChangeTimes->{{3.4582902027460003`*^9, 3.458290276604*^9}, {
  3.4598118890838356`*^9, 3.4598118985138354`*^9}}],

Cell["\<\
(ns clojuratica.test.SimpleClass
  (:gen-class
     :methods [#^{:static true} [increment          [Object]                 \
Object]
                                [decrement          [Object]                 \
Object]
               #^{:static true} [pair               [Object Object]          \
Object]
               #^{:static true} [myMap              [Object Object]          \
Object]
               #^{:static true} [mmaIncrement       [Object Object Object]   \
Object]]))

(defn -increment [obj]
  (inc obj))

(defn -decrement [this obj]
  (dec obj))

(defn -pair [coll1 coll2]
  (partition 2 (interleave coll1 coll2)))

(defn -myMap [f coll]
  (map f coll))

(defn -mmaIncrement [obj evaluate parse]
  (parse (evaluate [\"obj\" obj] \"obj + 1\")))\
\>", "Program",
 CellChangeTimes->{{3.459811511207835*^9, 3.4598115459668355`*^9}, {
  3.4598120300348353`*^9, 3.4598120333408356`*^9}, {3.4598136731788354`*^9, 
  3.4598137161758356`*^9}, {3.4598948401511507`*^9, 3.4598948412851505`*^9}}],

Cell["\<\

The class has four static methods and one instance method. \
\>", "Text",
 CellChangeTimes->{{3.4598115891218357`*^9, 3.459811755108835*^9}, {
   3.459811918457835*^9, 3.4598119565008354`*^9}, {3.459813122195835*^9, 
   3.4598131977378354`*^9}, {3.459813656813835*^9, 3.4598136809778357`*^9}, 
   3.4598945801541505`*^9}],

Cell["\<\
Note that the class is written just as if its methods were going to be called \
from Clojure. It is no different from an ordinary Clojure class.\
\>", "Text",
 CellChangeTimes->{{3.4598115891218357`*^9, 3.459811755108835*^9}, {
   3.459811918457835*^9, 3.4598119565008354`*^9}, {3.459813122195835*^9, 
   3.4598131977378354`*^9}, {3.459813656813835*^9, 3.4598136809778357`*^9}, 
   3.4598945801541505`*^9}],

Cell[TextData[{
 "The decrement method is an instance method for illustration purposes. When \
calling Java classes from ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " there is a performance advantage to using static methods instead of \
instance methods. In cases where you don't need object state you should use \
static methods. Static methods are more coherent with Clojure's functional \
paradigm anyway. "
}], "Text",
 CellChangeTimes->{{3.4598115891218357`*^9, 3.459811755108835*^9}, {
   3.459811918457835*^9, 3.4598119565008354`*^9}, 3.459813122195835*^9, {
   3.4598132041058354`*^9, 3.4598132461208353`*^9}, {3.4598945874361506`*^9, 
   3.4598945875781507`*^9}}],

Cell[TextData[{
 "In some cases, however, you may wish to create stateful objects and \
instantiate a number of them in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "and Clojuratica support calls to both static and instance methods."
}], "Text",
 CellChangeTimes->{{3.4598115891218357`*^9, 3.459811755108835*^9}, {
   3.459811918457835*^9, 3.4598119565008354`*^9}, 3.459813122195835*^9, {
   3.4598132041058354`*^9, 3.4598132484358354`*^9}, 3.4598946157171507`*^9}],

Cell[TextData[{
 "Place the compiled .class or .jar files in a location where ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s classloader can find them. A location anywhere in your system's Java \
classpath should work. See the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " ",
 StyleBox["J/Link",
  FontSlant->"Italic"],
 " documentation for more detailed information on how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " locates Java classes."
}], "Text",
 CellChangeTimes->{{3.4598117705148354`*^9, 3.459811824556835*^9}, {
  3.459811962379835*^9, 3.459811978990835*^9}, {3.4598132526188354`*^9, 
  3.4598132762848353`*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "After the class is compiled and copied to the Java classpath, we can load \
it in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.4598128395738354`*^9, 3.4598128440938354`*^9}},
 FormatType->"TextForm"],

Cell[BoxData[
 RowBox[{"LoadJavaClass", "[", "\"\<clojuratica.test.SimpleClass\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{3.4598128569348354`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"JavaClass", "[", 
   RowBox[{"clojuratica", ".", "test", ".", "SimpleClass"}], ",", "<>", "]"}],
  JLink`JavaClass["clojuratica.test.SimpleClass", 20, {
    JLink`JVM["vm1"], 
    JLink`JVM["vm2"]}, 1, "clojuratica`test`SimpleClass`", False, 
   True]]], "Output",
 CellChangeTimes->{3.459812857643835*^9, 3.4598128887048354`*^9, 
  3.4598137478878355`*^9, 3.45986785323015*^9, 3.4598695910851507`*^9, 
  3.45987108911215*^9, 3.4598720780471506`*^9, 3.4598728372591505`*^9, 
  3.45988536787615*^9, 3.4598866124031506`*^9, 3.4598946347921505`*^9, 
  3.4598948846891503`*^9, 3.4598949192661505`*^9, 3.4598952992671504`*^9}],

Cell["We now have access to any of the class's static methods.", "Text",
 CellChangeTimes->{{3.4598128685398355`*^9, 3.4598128963848352`*^9}},
 FormatType->"TextForm"]
}, Closed]],

Cell[CellGroupData[{

Cell["Calling Static Methods", "Subsection",
 PageWidth->PaperWidth,
 CellChangeTimes->{{3.458167592961*^9, 3.4581675933310003`*^9}, 
   3.4598118705688353`*^9, {3.4598128017048354`*^9, 3.4598128035158353`*^9}, {
   3.4598145131538353`*^9, 3.4598145174758353`*^9}, {3.45988453020415*^9, 
   3.45988453194715*^9}, {3.4598946419641504`*^9, 3.4598946424931507`*^9}}],

Cell[TextData[{
 "If you are familiar with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s ",
 StyleBox["J/Link",
  FontSlant->"Italic"],
 " interface, you know that the syntax for calling static Java methods is \
straightforward."
}], "Text",
 CellChangeTimes->{
  3.4598122904218354`*^9, {3.4598132897788353`*^9, 3.4598132972608356`*^9}},
 FormatType->"TextForm"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClassName`MethodName", "[", "arguments", "]"}], "                ", 
  RowBox[{"(*", " ", 
   RowBox[{"Mathematica", " ", "call", " ", "to", " ", "Java"}], " ", 
   "*)"}]}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.4598124244068356`*^9, 3.4598124313488355`*^9}, {
  3.4598127054468355`*^9, 3.4598127103758354`*^9}}],

Cell["\<\
The syntax for calling the methods of Clojure-compiled classes is exactly the \
same, except that the call is embedded in a call to the Clojure function. The \
Clojure function is a piece of syntactic sugar Clojuratica provides.\
\>", "Text",
 CellChangeTimes->{{3.4598123223788357`*^9, 3.4598123897088356`*^9}, {
  3.4598133061238356`*^9, 3.4598133110678353`*^9}},
 FormatType->"TextForm"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clojure", "[", 
   RowBox[{"ClassName`MethodName", "[", "arguments", "]"}], "]"}], "       ", 
  RowBox[{"(*", " ", 
   RowBox[{"Clojuratica", " ", "call", " ", "to", " ", "Clojure"}], " ", 
   "*)"}]}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.4598123996358356`*^9, 3.4598124346778355`*^9}, {
  3.4598127010288353`*^9, 3.459812745504835*^9}}],

Cell[TextData[{
 "The preferred convention is to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s prefix notation (@) syntax:"
}], "Text",
 CellChangeTimes->{{3.4598124695148354`*^9, 3.4598125172508354`*^9}, 
   3.4598133230228357`*^9}],

Cell[BoxData[
 RowBox[{"Clojure", "@", 
  RowBox[{"ClassName`MethodName", "[", "arguments", "]"}], "        ", 
  RowBox[{"(*", " ", 
   RowBox[{"canonical", " ", "syntax"}], " ", "*)"}], " "}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.4598125027528353`*^9, 3.459812527931835*^9}, {
  3.459812685339835*^9, 3.459812698518835*^9}, {3.4598137537778354`*^9, 
  3.4598137546028357`*^9}, {3.45986717527715*^9, 3.4598671817121506`*^9}}],

Cell[TextData[{
 "Methods called in this way will have their arguments automatically \
converted to Clojure data types before the method call and their return value \
automatically parsed into a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " data type after the method call."
}], "Text",
 CellChangeTimes->{{3.4598125356808357`*^9, 3.4598125828788357`*^9}}],

Cell["Let's try it with the increment method of SimpleClass.", "Text",
 CellChangeTimes->{{3.4598125857958355`*^9, 3.459812592860835*^9}, {
  3.4598127564778357`*^9, 3.4598127580258355`*^9}, {3.4598134204898357`*^9, 
  3.459813424504835*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Clojure", "@", 
  RowBox[{"SimpleClass`increment", "[", "1", "]"}]}]], "Input",
 CellChangeTimes->{{3.4598126218998356`*^9, 3.4598126328498354`*^9}}],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{
  3.4598126336248355`*^9, 3.4598137584068356`*^9, 3.4598678577851505`*^9, 
   3.4598695961561503`*^9, 3.4598710922671504`*^9, 3.4598720809771504`*^9, 
   3.4598728393711505`*^9, 3.4598866150621505`*^9, {3.4598948918181505`*^9, 
   3.4598949207561502`*^9}}]
}, Open  ]],

Cell["It's as easy as that.", "Text",
 CellChangeTimes->{{3.4598126532398357`*^9, 3.4598126562228355`*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "The pair method of SimpleClass takes two Clojure collections and returns a \
sequence of their elements paired up. Clojuratica automatically converts the \
data types of arguments, so we can easily call the method with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " lists."
}], "Text",
 CellChangeTimes->{{3.4598129308758354`*^9, 3.4598130423578353`*^9}, 
   3.4598130929368353`*^9, {3.459813436839835*^9, 3.4598134446068354`*^9}}],

Cell[BoxData[
 RowBox[{"Clojure", "@", 
  RowBox[{"SimpleClass`pair", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4598130546018353`*^9, 3.4598130645698357`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.459813065214835*^9, 3.4598137598568354`*^9, 
  3.4598695982491503`*^9, 3.45987109489515*^9, 3.45987208248215*^9, 
  3.45987284061415*^9, 3.4598866163321505`*^9, 3.4598949227971506`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Calling Instance Methods", "Subsection",
 PageWidth->PaperWidth,
 CellChangeTimes->{{3.458167592961*^9, 3.4581675933310003`*^9}, 
   3.4598118705688353`*^9, {3.4598128017048354`*^9, 3.4598128035158353`*^9}, {
   3.4598145131538353`*^9, 3.4598145174758353`*^9}, {3.45988453020415*^9, 
   3.45988453194715*^9}, {3.4598946419641504`*^9, 3.45989466362615*^9}}],

Cell[TextData[{
 "The syntax for calling instance methods is almost identical to that for \
calling static methods. If you are familiar with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s ",
 StyleBox["J/Link",
  FontSlant->"Italic"],
 " interface, you know that the syntax for calling instance methods in Java."
}], "Text",
 CellChangeTimes->{
  3.4598122904218354`*^9, {3.4598132897788353`*^9, 3.4598132972608356`*^9}, {
   3.4598946770961504`*^9, 3.4598947103821507`*^9}}],

Cell[BoxData[
 RowBox[{"InstanceName", "@", 
  RowBox[{"MethodName", "[", "arguments", "]"}], "             ", 
  RowBox[{"(*", " ", 
   RowBox[{"Mathematica", " ", "call", " ", "to", " ", "Java"}], " ", 
   "*)"}]}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.4598124244068356`*^9, 3.4598124313488355`*^9}, {
  3.4598127054468355`*^9, 3.4598127103758354`*^9}, {3.4598947134181504`*^9, 
  3.4598947187021503`*^9}}],

Cell["With Clojuratica, just enclose it in a call to Clojure.", "Text",
 CellChangeTimes->{{3.4598123223788357`*^9, 3.4598123897088356`*^9}, {
  3.4598133061238356`*^9, 3.4598133110678353`*^9}, {3.4598947500661507`*^9, 
  3.45989475864515*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clojure", "[", 
   RowBox[{"InstanceName", "@", 
    RowBox[{"MethodName", "[", "arguments", "]"}]}], "]"}], "    ", 
  RowBox[{"(*", " ", 
   RowBox[{"Clojuratica", " ", "call", " ", "to", " ", "Clojure"}], " ", 
   "*)"}]}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.4598123996358356`*^9, 3.4598124346778355`*^9}, {
  3.4598127010288353`*^9, 3.459812745504835*^9}, {3.4598947239831505`*^9, 
  3.45989472690915*^9}}],

Cell[TextData[{
 "Again, the preferred convention is to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s prefix notation (@) syntax:"
}], "Text",
 CellChangeTimes->{{3.4598124695148354`*^9, 3.4598125172508354`*^9}, 
   3.4598133230228357`*^9, {3.4598947641901503`*^9, 3.45989476526515*^9}}],

Cell[BoxData[
 RowBox[{"Clojure", "@", 
  RowBox[{"InstanceName", "@", 
   RowBox[{"MethodName", "[", "arguments", "]"}], "     ", 
   RowBox[{"(*", " ", 
    RowBox[{"canonical", " ", "syntax"}], " ", "*)"}], " "}]}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.4598125027528353`*^9, 3.459812527931835*^9}, {
  3.459812685339835*^9, 3.459812698518835*^9}, {3.4598137537778354`*^9, 
  3.4598137546028357`*^9}, {3.45986717527715*^9, 3.4598671817121506`*^9}, {
  3.4598947343771505`*^9, 3.4598947366421504`*^9}, {3.4598955051301503`*^9, 
  3.4598955058001504`*^9}}],

Cell["\<\
In addition, you can preface calls to JavaNew[] with Clojure@ to perform \
automatic translation of all constructor arguments. (Note that in this case \
the return value won't have any conversion done to it. You want the return \
value to be a Java object reference!)\
\>", "Text",
 CellChangeTimes->{{3.45989544616415*^9, 3.45989549836915*^9}, {
  3.4598956129101505`*^9, 3.4598956192241507`*^9}},
 FormatType->"TextForm"],

Cell[BoxData[
 RowBox[{"Clojure", "@", 
  RowBox[{"JavaNew", "[", 
   RowBox[{"\"\<classname\>\"", ",", " ", "arguments"}], "]"}]}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.4598125027528353`*^9, 3.459812527931835*^9}, {
  3.459812685339835*^9, 3.459812698518835*^9}, {3.4598137537778354`*^9, 
  3.4598137546028357`*^9}, {3.45986717527715*^9, 3.4598671817121506`*^9}, {
  3.4598947343771505`*^9, 3.4598947366421504`*^9}, {3.4598955097521505`*^9, 
  3.4598955231701508`*^9}, {3.4598956045991507`*^9, 3.4598956054511504`*^9}}],

Cell[TextData[{
 "Methods called in this way will have their arguments automatically \
converted to Clojure data types before the method call and their return value \
automatically parsed into a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " data type after the method call."
}], "Text",
 CellChangeTimes->{{3.4598125356808357`*^9, 3.4598125828788357`*^9}}],

Cell["Let's try it with SimpleClass.", "Text",
 CellChangeTimes->{{3.4598125857958355`*^9, 3.459812592860835*^9}, {
  3.4598127564778357`*^9, 3.4598127580258355`*^9}, {3.4598134204898357`*^9, 
  3.459813424504835*^9}, {3.45989477875815*^9, 3.45989477954615*^9}, {
  3.45989562719715*^9, 3.4598956273301506`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"instance", " ", "=", " ", 
   RowBox[{"Clojure", "@", 
    RowBox[{"JavaNew", "[", "\"\<clojuratica.test.SimpleClass\>\"", "]"}]}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{"Clojure", "@", 
  RowBox[{"instance", "@", 
   RowBox[{"decrement", "[", "10", "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.4598126218998356`*^9, 3.4598126328498354`*^9}, {
  3.4598947821551504`*^9, 3.4598948257711506`*^9}, {3.4598949319151506`*^9, 
  3.4598949320031505`*^9}, {3.4598954368351507`*^9, 3.4598954378011503`*^9}}],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{
  3.4598126336248355`*^9, 3.4598137584068356`*^9, 3.4598678577851505`*^9, 
   3.4598695961561503`*^9, 3.4598710922671504`*^9, 3.4598720809771504`*^9, 
   3.4598728393711505`*^9, 3.4598866150621505`*^9, {3.4598948092901506`*^9, 
   3.4598948264001503`*^9}, {3.45989492875815*^9, 3.45989493250115*^9}, 
   3.4598955366291504`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Passing ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Functions to Clojure"
}], "Subsection",
 CellChangeTimes->{{3.4598676954301505`*^9, 3.4598677036801505`*^9}, {
  3.4598714387491503`*^9, 3.45987146233615*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "By default, if you try to pass a first-class ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function to Clojure, the function will be received in Clojure as an inert \
CExpr object. "
}], "Text",
 CellChangeTimes->{{3.4598676954301505`*^9, 3.4598677036801505`*^9}, {
  3.4598714387491503`*^9, 3.45987147216615*^9}, {3.4598949597461505`*^9, 
  3.4598949603911505`*^9}}],

Cell["\<\
We can illustrate using the myMap method of SimpleClass. The method expects \
to be passed a function and a collection. It maps the function across the \
collection using Clojure's map, and returns the result. \
\>", "Text",
 CellChangeTimes->{{3.4598676954301505`*^9, 3.4598677036801505`*^9}, {
  3.4598714387491503`*^9, 3.4598714771861506`*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "If in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " we attempt to pass MyMap a first-class function we get an error."
}], "Text",
 CellChangeTimes->{{3.4598676954301505`*^9, 3.4598677036801505`*^9}, {
  3.4598714387491503`*^9, 3.45987148420615*^9}},
 FormatType->"TextForm"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Clojure", "@", 
  RowBox[{"SimpleClass`myMap", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", "x", "}"}], ",", " ", 
      RowBox[{"x", " ", "+", " ", "1"}]}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}]}], "]"}], "        ", 
  RowBox[{"(*", " ", 
   RowBox[{"produces", " ", "an", " ", "error"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{3.45987152752715*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Java", "::", "\<\"excptn\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"A Java exception occurred: \
\\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(\\\"java.lang.\
RuntimeException: java.lang.ClassCastException: clojuratica.CExpr cannot be \
cast to clojure.lang.IFn\\\\n\\\\tat \
clojure.lang.LazySeq.seq(LazySeq.java:46)\\\\n\\\\tat \
clojure.lang.LazySeq.hashCode(LazySeq.java:93)\\\\nCaused by: \
java.lang.ClassCastException: clojuratica.CExpr cannot be cast to \
clojure.lang.IFn\\\\n\\\\tat \
clojure.core$map__3815$fn__3817.invoke(core.clj:1503)\\\\n\\\\tat \
clojure.lang.LazySeq.seq(LazySeq.java:41)\\\\n\\\\t... 10 more\\\"\\), \\\"MT\
\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\".\\\\\\\"\\\", \\\"MT\\\"]\\)\
\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.45989530503915*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Java", "::", "\<\"argxs1\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"The static method \\\\\\\"\\\
\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(clojuratica`CHelper`parse\
\\), \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" was called with \
an incorrect number or type of arguments. The argument was \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\($Failed\\), \\\"MT\\\"]\\)\
\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\".\\\\\\\"\\\", \
\\\"MT\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.4598953050421505`*^9}],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{{3.4598716551981506`*^9, 3.4598716624111505`*^9}, 
   3.4598720868061504`*^9, 3.4598728424311504`*^9, {3.4598854379501505`*^9, 
   3.45988544600115*^9}, 3.4598949711481504`*^9, {3.45989530117815*^9, 
   3.4598953050441504`*^9}}]
}, Open  ]],

Cell[TextData[{
 "But if we tell it to, Clojuratica will automatically convert first-class ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions to Clojure functions. Simply set the Clojuratica`fnWrap global \
variable to True."
}], "Text",
 CellChangeTimes->{{3.4598676954301505`*^9, 3.4598677036801505`*^9}, {
  3.4598714387491503`*^9, 3.4598714872011504`*^9}, {3.4598715372921505`*^9, 
  3.4598715592161503`*^9}, {3.45988084692315*^9, 3.45988085250815*^9}},
 FormatType->"TextForm"],

Cell[BoxData[
 RowBox[{"Clojuratica`fnWrap", " ", "=", " ", "True"}]], "Input",
 CellChangeTimes->{
  3.4598715653121505`*^9, {3.4598716599241505`*^9, 3.4598716647381506`*^9}, {
   3.45987173215215*^9, 3.4598717337011504`*^9}, {3.4598717971251507`*^9, 
   3.4598718013991504`*^9}, {3.4598854438741503`*^9, 
   3.4598854479761505`*^9}, {3.45989530304615*^9, 3.4598953071171503`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.45987180189015*^9, 3.4598728443061504`*^9, {3.45988539352015*^9, 
   3.4598854031151505`*^9}, {3.45988543648215*^9, 3.4598854482751503`*^9}, 
   3.4598866186361504`*^9, 3.45989497775115*^9, {3.45989530370415*^9, 
   3.4598953074321504`*^9}}],

Cell[TextData[{
 "Now first-class ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions passed as arguments will be converted to first-class Clojure \
functions automatically. "
}], "Text",
 CellChangeTimes->{{3.4598676954301505`*^9, 3.4598677036801505`*^9}, {
  3.4598714387491503`*^9, 3.4598714872011504`*^9}, {3.4598715372921505`*^9, 
  3.4598715799361506`*^9}},
 FormatType->"TextForm"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Clojure", "@", 
  RowBox[{"SimpleClass`myMap", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", "x", "}"}], ",", " ", 
      RowBox[{"x", " ", "+", " ", "1"}]}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.45989531873915*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{{3.45989531974415*^9, 3.4598953240771503`*^9}}]
}, Open  ]],

Cell[TextData[{
 "If and when a function converted in this way is called on the Clojure side, \
the default behavior is to evaluate the function call using a serial \
evaluator connected to the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernel that initiated the method call. This is perfectly fine behavior in \
most cases and doesn't require any additional setup."
}], "Text",
 CellChangeTimes->{{3.4598676954301505`*^9, 3.4598677036801505`*^9}, {
  3.4598714387491503`*^9, 3.4598714872011504`*^9}, {3.4598715372921505`*^9, 
  3.45987159785715*^9}, {3.4598808718701506`*^9, 3.45988087707915*^9}, {
  3.4598812506701508`*^9, 3.45988125367115*^9}, {3.4598949937311506`*^9, 
  3.4598950077811503`*^9}, {3.4598951324901505`*^9, 3.4598951552311506`*^9}}],

Cell["\<\
If instead you want the converted functions to use a different kernel, or use \
a parallel evaluator, you will have to create a new evaluator yourself and \
tell Clojuratica where it is located. To do this, use the \
Clojuratica`evaluator global variable. \
\>", "Text",
 CellChangeTimes->{{3.4598676954301505`*^9, 3.4598677036801505`*^9}, {
  3.4598714387491503`*^9, 3.4598714872011504`*^9}, {3.4598715372921505`*^9, 
  3.4598716038611507`*^9}, {3.4598717467731504`*^9, 3.45987177607915*^9}, {
  3.4598732434001503`*^9, 3.4598732491251507`*^9}, {3.45987330850115*^9, 
  3.4598733492341504`*^9}, {3.4598734221291504`*^9, 3.4598735180851507`*^9}, {
  3.45987357158115*^9, 3.45987357319715*^9}, {3.4598808824511504`*^9, 
  3.4598809168981504`*^9}, {3.4598811091231503`*^9, 3.4598811271131506`*^9}, {
  3.4598812458091507`*^9, 3.45988126210715*^9}, {3.4598845795691504`*^9, 
  3.4598845873871503`*^9}, {3.45989500982415*^9, 3.45989501039515*^9}}],

Cell[TextData[{
 "Let's try this. Create a new KernelLink and a new parallel evaluator \
attached to it. We'll store the parallel evaluator in the variable \
Clojuratica`evaluator. The first three commands below are generic ",
 StyleBox["J/Link",
  FontSlant->"Italic"],
 " commands to create a new KernelLink. The last two create a parallel \
evaluator using the clojuratica.CLink class (which provides Java access to \
the Clojuratica function generators). "
}], "Text",
 CellChangeTimes->{{3.4598676954301505`*^9, 3.4598677036801505`*^9}, {
  3.4598714387491503`*^9, 3.4598714872011504`*^9}, {3.4598715372921505`*^9, 
  3.4598716038611507`*^9}, {3.4598717467731504`*^9, 3.45987177607915*^9}, {
  3.4598732434001503`*^9, 3.4598732491251507`*^9}, {3.45987330850115*^9, 
  3.4598733492341504`*^9}, {3.4598734221291504`*^9, 3.4598735180851507`*^9}, {
  3.45987357158115*^9, 3.45987357319715*^9}, {3.4598808824511504`*^9, 
  3.4598809168981504`*^9}, {3.4598812731341505`*^9, 3.4598812752021503`*^9}, {
  3.4598845980121503`*^9, 3.4598846086551504`*^9}, {3.4598849864011507`*^9, 
  3.4598850211241503`*^9}, {3.45989503629115*^9, 3.4598950677361507`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "LoadJavaClass", "[", "\"\<com.wolfram.jlink.MathLinkFactory\>\"", "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"kl", "=", 
   RowBox[{
   "MathLinkFactory`createKernelLink", "[", 
    "\"\<-linkmode launch -linkname 'c:\\\\\\\\program files\\\\\\\\wolfram \
research\\\\\\\\mathematica\\\\\\\\7.0\\\\\\\\mathkernel.exe'\>\"", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"kl", "@", 
   RowBox[{"discardAnswer", "[", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"LoadJavaClass", "[", "\"\<clojuratica.CLink\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Clojuratica`evaluator", " ", "=", " ", 
  RowBox[{"CLink`getEvaluator", "[", 
   RowBox[{"kl", ",", " ", "\"\<:parallel\>\""}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.4598676954301505`*^9, 3.4598677036801505`*^9}, {
   3.4598714387491503`*^9, 3.4598714872011504`*^9}, {3.4598715372921505`*^9, 
   3.4598716020611506`*^9}, 3.45987163922515*^9, {3.4598716920451508`*^9, 
   3.4598717144771504`*^9}, {3.4598734472311506`*^9, 3.4598734499031506`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\[LeftGuillemet]", 
   RowBox[{"JavaObject", "[", 
    RowBox[{
     RowBox[{"clojuratica", ".", "parallel_evaluator$get"}], "_evaluator", 
     "__", "339", "$flag_parser", "__", "32", "__auto", "___", "_", "348", 
     "$parallel_evaluator", "__", "354"}], "]"}], "\[RightGuillemet]"}],
  JLink`Objects`vm2`JavaObject387872859357185]], "Output",
 CellChangeTimes->{{3.4598717161211505`*^9, 3.4598717217811503`*^9}, 
   3.45987210123215*^9, 3.4598727917541504`*^9, 3.4598730429671507`*^9, 
   3.4598735318651505`*^9, 3.4598866240541506`*^9, 3.4598950817361507`*^9, {
   3.45989520294915*^9, 3.4598952078371506`*^9}, 3.4598953339521503`*^9}]
}, Open  ]],

Cell[TextData[{
 "Note that flags ",
 StyleBox["must",
  FontSlant->"Italic"],
 " be passed in a (possibly empty) string as the final argument to \
CLink`getEvaluator[]."
}], "Text",
 CellChangeTimes->{{3.4598736180031505`*^9, 3.45987366294915*^9}, {
  3.4598737563131504`*^9, 3.4598737665841503`*^9}, {3.4598738139601507`*^9, 
  3.4598738687191505`*^9}, {3.45988128979615*^9, 3.4598813174721503`*^9}, {
  3.45989506996815*^9, 3.4598950768991504`*^9}}],

Cell[TextData[{
 "From this point on, any first-class ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions passed as method arguments in a Clojure[] call will be converted \
to first-class Clojure functions that, when called, are evaluated using a \
parallel evaluator attached to the newly created kernel."
}], "Text",
 CellChangeTimes->{{3.4598736180031505`*^9, 3.45987366294915*^9}, {
  3.4598737563131504`*^9, 3.4598737665841503`*^9}, {3.4598738139601507`*^9, 
  3.4598738687191505`*^9}, {3.45988128979615*^9, 3.4598813174721503`*^9}, {
  3.45989506996815*^9, 3.4598950768991504`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Clojure", "@", 
  RowBox[{"SimpleClass`myMap", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", "x", "}"}], ",", " ", 
      RowBox[{"x", " ", "+", " ", "1"}]}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}]}], "]"}], "    ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "wrapped", " ", "function", " ", "will", " ", "be", " ", "evaluated", " ", 
    "in", " ", "the", " ", "new", " ", "kernel"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{3.4598952311371503`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{{3.4598952319251504`*^9, 3.4598952407021503`*^9}, 
   3.4598953358931503`*^9}]
}, Open  ]],

Cell["You can kill the new kernel with:", "Text",
 CellChangeTimes->{{3.4598953485471506`*^9, 3.4598953620491505`*^9}},
 FormatType->"TextForm"],

Cell[BoxData[
 RowBox[{"kl", "@", 
  RowBox[{"terminateKernel", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.4598953696101503`*^9, 3.4598953820301504`*^9}}],

Cell[TextData[{
 "To restore the default evaluator (a serial evaluator connected to the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernel making the method calls) do the following."
}], "Text",
 CellChangeTimes->{{3.4598736180031505`*^9, 3.45987366294915*^9}, {
  3.4598737563131504`*^9, 3.4598737665841503`*^9}, {3.4598738139601507`*^9, 
  3.4598738740651503`*^9}, {3.4598739169101505`*^9, 3.4598739174441504`*^9}, {
  3.4598813238981504`*^9, 3.4598813241041503`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"LoadJavaClass", "[", "\"\<com.wolfram.jlink.StdLink\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Clojuratica`evaluator", " ", "=", " ", 
  RowBox[{"CLink`getEvaluator", "[", 
   RowBox[{
    RowBox[{"StdLink`getLink", "[", "]"}], ",", " ", "\"\<:serial\>\""}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.4598735477281504`*^9, 3.4598735588191504`*^9}, {
  3.4598736685971503`*^9, 3.4598737102171507`*^9}, {3.45987378014515*^9, 
  3.4598737807571507`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\[LeftGuillemet]", 
   RowBox[{"JavaObject", "[", 
    RowBox[{
     RowBox[{"clojuratica", ".", "serial_evaluator$get"}], "_evaluator", "__",
      "202", "$flag_parser", "__", "32", "__auto", "___", "_", "210", 
     "$serial_evaluator", "__", "212"}], "]"}], "\[RightGuillemet]"}],
  JLink`Objects`vm2`JavaObject142093641056257]], "Output",
 CellChangeTimes->{3.4598737111841507`*^9, 3.4598737815501504`*^9, 
  3.4598952366651506`*^9, 3.45989533725115*^9, 3.4598953851911507`*^9}],

Cell[TextData[{
 "Warning: You must not try to replace :serial with :parallel here. There is \
no way to create a ",
 StyleBox["parallel",
  FontSlant->"Italic"],
 " evaluator connected to the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernel making the method calls. Any calls to such an evaluator will cause ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to freeze up horribly. If you want automatic function-wrapping of method \
arguments, and you want to have those functions evaluated on a parallel \
evaluator, you must launch a separate kernel using \
MathLinkFactory`createKernelLink[] and tie an evaluator to it using \
CLink`getEvaluator[]."
}], "Text",
 CellChangeTimes->{{3.45987388225815*^9, 3.45987412420615*^9}, {
  3.45987417756015*^9, 3.45987424013815*^9}, {3.4598952624171505`*^9, 
  3.45989529117315*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Calling Clojure Methods that then Evaluate ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Expressions"
}], "Subsection",
 CellChangeTimes->{{3.4598676954301505`*^9, 3.4598677036801505`*^9}, {
  3.4598714387491503`*^9, 3.45987146233615*^9}, {3.4598846771031504`*^9, 
  3.4598846987951508`*^9}, {3.4598860595641503`*^9, 3.4598860599671507`*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "If you want your Clojure methods to themselves be able to interact with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", you can create any of the the Clojuratica functions (the evaluator, the \
parser, etc.) in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " and pass them to your Clojure methods. The last section hinted at how you \
might do this. Here is some more detail."
}], "Text",
 CellChangeTimes->{{3.4598847024781504`*^9, 3.4598848034381504`*^9}, {
  3.45988607516615*^9, 3.4598861006101503`*^9}},
 FormatType->"TextForm"],

Cell[TextData[{
 "Here is how you might create an evaluator and parser that use the active ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernel."
}], "Text",
 CellChangeTimes->{{3.4598849039881506`*^9, 3.4598849345021505`*^9}, {
  3.4598850269391503`*^9, 3.4598850309201508`*^9}, {3.4598861102331505`*^9, 
  3.45988611244715*^9}},
 FormatType->"TextForm"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"LoadJavaClass", "[", "\"\<com.wolfram.jlink.StdLink\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LoadJavaClass", "[", "\"\<clojuratica.CLink\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"evaluate", "=", " ", 
   RowBox[{"CLink`getEvaluator", "[", 
    RowBox[{
     RowBox[{"StdLink`getLink", "[", "]"}], ",", " ", "\"\<:serial\>\""}], 
    "]"}]}], "\[IndentingNewLine]", "  ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "first", " ", "argument", " ", "is", " ", "a", " ", "KernelLink"}], ",", 
    " ", 
    RowBox[{
    "second", " ", "argument", " ", "is", " ", "a", " ", "string", " ", 
     "containing", " ", "flags"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"parse", "=", " ", 
  RowBox[{"CLink`getParser", "[", 
   RowBox[{
    RowBox[{"StdLink`getLink", "[", "]"}], ",", " ", "Null", ",", " ", 
    "\"\<\>\""}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"  ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "first", " ", "argument", " ", "is", " ", "a", " ", "KernelLink"}], ",", 
    " ", 
    RowBox[{
    "second", " ", "argument", " ", "is", " ", "a", " ", "function", " ", 
     "wrapper", " ", "or", " ", "Null", " ", "third", " ", "argument", " ", 
     "is", " ", "a", " ", "string", " ", "containing", " ", "flags"}]}], " ", 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.4598849519081507`*^9, 3.4598849728631506`*^9}, {
  3.4598850401181507`*^9, 3.4598850558181505`*^9}, {3.4598851214291506`*^9, 
  3.4598852303051505`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\[LeftGuillemet]", 
   RowBox[{"JavaObject", "[", 
    RowBox[{
     RowBox[{"clojuratica", ".", "serial_evaluator$get"}], "_evaluator", "__",
      "202", "$flag_parser", "__", "32", "__auto", "___", "_", "210", 
     "$serial_evaluator", "__", "212"}], "]"}], "\[RightGuillemet]"}],
  JLink`Objects`vm2`JavaObject134375064731649]], "Output",
 CellChangeTimes->{3.4598852305971503`*^9, 3.45988546242815*^9, 
  3.4598866338851504`*^9, 3.4598953894331503`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\[LeftGuillemet]", 
   RowBox[{"JavaObject", "[", 
    RowBox[{
     RowBox[{"clojuratica", ".", "clojuratica$get_parser"}], "__", "550", 
     "$flag_parser", "__", "32", "__auto", "___", "_", "559", "$parser__", 
     "562"}], "]"}], "\[RightGuillemet]"}],
  JLink`Objects`vm2`JavaObject449455224520705]], "Output",
 CellChangeTimes->{3.4598852305971503`*^9, 3.45988546242815*^9, 
  3.4598866338851504`*^9, 3.4598953894691505`*^9}]
}, Open  ]],

Cell[TextData[{
 "You could then pass these functions to a Clojure method that will use them \
to call back into ",
 StyleBox["Mathematica.",
  FontSlant->"Italic"],
 " The mmaIncrement method of SimpleClass, for instance, expects to be passed \
an evaluator and parser. It returns its first argument plus one."
}], "Text",
 CellChangeTimes->{{3.4598852602461505`*^9, 3.45988532135715*^9}, {
  3.4598861320291505`*^9, 3.4598861514831505`*^9}, {3.4598864755571504`*^9, 
  3.4598864797881503`*^9}},
 FormatType->"TextForm"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Clojure", "@", 
  RowBox[{"SimpleClass`mmaIncrement", "[", 
   RowBox[{"8", ",", " ", "evaluate", ",", " ", "parse"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4598853407621503`*^9, 3.4598853563701506`*^9}, 
   3.4598864734641504`*^9}],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{
  3.4598853721311502`*^9, {3.45988545424415*^9, 3.4598854635071507`*^9}, 
   3.4598866354291506`*^9, 3.4598953931511507`*^9}]
}, Open  ]],

Cell["\<\
Instead of tying your methods back into the active kernel, you could instead \
create a completely new kernel using MathLinkFactory`createKernelLink[] and \
use that kernel to create an evaluator. We did this in the previous section, \
and in general it is the better way of doing things. By creating an \
altogether new kernel you gain the option of using Clojuratica's parallel \
evaluator. (You should not try to create a parallel evaluator attached to the \
active kernel. Things will go badly.)\
\>", "Text",
 CellChangeTimes->{{3.4598857704971504`*^9, 3.4598858966891503`*^9}, {
  3.4598862033001504`*^9, 3.4598862526241503`*^9}, {3.4598864980141506`*^9, 
  3.4598865136791506`*^9}},
 FormatType->"TextForm"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "LoadJavaClass", "[", "\"\<com.wolfram.jlink.MathLinkFactory\>\"", "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"kl", "@", 
    RowBox[{"terminateKernel", "[", "]"}]}], ";"}], "    ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "unload", " ", "the", " ", "kernel", " ", "we", " ", "launched", " ", "in",
     " ", "the", " ", "previous", " ", "section"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"kl", "=", 
   RowBox[{
   "MathLinkFactory`createKernelLink", "[", 
    "\"\<-linkmode launch -linkname 'c:\\\\\\\\program files\\\\\\\\wolfram \
research\\\\\\\\mathematica\\\\\\\\7.0\\\\\\\\mathkernel.exe'\>\"", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"kl", "@", 
   RowBox[{"discardAnswer", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LoadJavaClass", "[", "\"\<clojuratica.CLink\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"evaluate", "=", " ", 
   RowBox[{"CLink`getEvaluator", "[", 
    RowBox[{"kl", ",", " ", "\"\<:parallel\>\""}], "]"}]}], 
  "\[IndentingNewLine]", "  ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "first", " ", "argument", " ", "is", " ", "a", " ", "KernelLink"}], ",", 
    " ", 
    RowBox[{
    "second", " ", "argument", " ", "is", " ", "a", " ", "string", " ", 
     "containing", " ", "flags"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"parse", "=", " ", 
  RowBox[{"CLink`getParser", "[", 
   RowBox[{"kl", ",", " ", "Null", ",", " ", "\"\<\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"  ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "first", " ", "argument", " ", "is", " ", "a", " ", "KernelLink"}], ",", 
    " ", 
    RowBox[{
    "second", " ", "argument", " ", "is", " ", "a", " ", "function", " ", 
     "wrapper", " ", "or", " ", "Null", " ", "third", " ", "argument", " ", 
     "is", " ", "a", " ", "string", " ", "containing", " ", "flags"}]}], " ", 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.4598849519081507`*^9, 3.4598849728631506`*^9}, {
  3.4598850401181507`*^9, 3.4598850558181505`*^9}, {3.4598851214291506`*^9, 
  3.4598852303051505`*^9}, {3.4598865439901505`*^9, 3.4598865751241503`*^9}, {
  3.45988664571815*^9, 3.4598866520111504`*^9}, {3.4598866903271503`*^9, 
  3.4598866956281505`*^9}, {3.4598867419601507`*^9, 3.45988679982215*^9}, {
  3.4598868501081505`*^9, 3.4598868506701508`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\[LeftGuillemet]", 
   RowBox[{"JavaObject", "[", 
    RowBox[{
     RowBox[{"clojuratica", ".", "parallel_evaluator$get"}], "_evaluator", 
     "__", "339", "$flag_parser", "__", "32", "__auto", "___", "_", "348", 
     "$parallel_evaluator", "__", "354"}], "]"}], "\[RightGuillemet]"}],
  JLink`Objects`vm2`JavaObject414361399066625]], "Output",
 CellChangeTimes->{
  3.4598852305971503`*^9, 3.45988546242815*^9, 3.4598865779131503`*^9, {
   3.4598866391861506`*^9, 3.4598866529121504`*^9}, 3.4598866977431507`*^9, {
   3.4598867621511507`*^9, 3.4598867658591504`*^9}, 3.4598868052591505`*^9, 
   3.4598868526011505`*^9, 3.45989540175115*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\[LeftGuillemet]", 
   RowBox[{"JavaObject", "[", 
    RowBox[{
     RowBox[{"clojuratica", ".", "clojuratica$get_parser"}], "__", "550", 
     "$flag_parser", "__", "32", "__auto", "___", "_", "559", "$parser__", 
     "562"}], "]"}], "\[RightGuillemet]"}],
  JLink`Objects`vm2`JavaObject481320593522689]], "Output",
 CellChangeTimes->{
  3.4598852305971503`*^9, 3.45988546242815*^9, 3.4598865779131503`*^9, {
   3.4598866391861506`*^9, 3.4598866529121504`*^9}, 3.4598866977431507`*^9, {
   3.4598867621511507`*^9, 3.4598867658591504`*^9}, 3.4598868052591505`*^9, 
   3.4598868526011505`*^9, 3.4598954017551503`*^9}]
}, Open  ]],

Cell["\<\
The following uses the new parallel evaluator running on the newly created \
kernel.\
\>", "Text",
 CellChangeTimes->{{3.4598868153771505`*^9, 3.4598868719511504`*^9}},
 FormatType->"TextForm"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Clojure", "@", 
  RowBox[{"SimpleClass`mmaIncrement", "[", 
   RowBox[{"8", ",", " ", "evaluate", ",", " ", "parse"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4598853407621503`*^9, 3.4598853563701506`*^9}, 
   3.4598864734641504`*^9}],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{
  3.4598853721311502`*^9, {3.45988545424415*^9, 3.4598854635071507`*^9}, 
   3.4598865871741505`*^9, 3.4598868067341504`*^9, 3.4598954039741507`*^9}],

Cell["That covers the features of Clojuratica. Enjoy!", "Text",
 CellChangeTimes->{{3.4598869013071504`*^9, 3.4598869083891506`*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
CellGrouping->Manual,
WindowSize->{1268, 774},
WindowMargins->{{Automatic, 69}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{Automatic, Automatic},
PrintingOptions->{"PrintCellBrackets"->False,
"PrintMultipleHorizontalPages"->False,
"PrintRegistrationMarks"->False,
"PrintingMargins"->36},
ShowSelection->True,
CellLabelAutoDelete->True,
FrontEndVersion->"7.0 for Microsoft Windows (32-bit) (February 18, 2009)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Report"}, "StandardReport.nb", CharacterEncoding -> 
       "WindowsANSI"]], InitializationCell -> False], 
   Cell[
    StyleData["Text"], FontFamily -> "Times New Roman", FontSize -> 14, 
    FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Subitem"], CellDingbat -> "\[FilledSmallSquare]", FontFamily -> 
    "Times New Roman", FontSize -> 14, FontWeight -> "Plain", FontSlant -> 
    "Plain", FontVariations -> {
     "StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["SubitemParagraph"], FontFamily -> "Times New Roman", FontSize -> 
    14, FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Item"], CellDingbat -> "\[FilledSmallSquare]", FontFamily -> 
    "Times New Roman", FontSize -> 14, FontWeight -> "Plain", FontSlant -> 
    "Plain", FontVariations -> {
     "StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["ItemParagraph"], FontFamily -> "Times New Roman", FontSize -> 
    14, FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}]}, 
  Visible -> False, FrontEndVersion -> 
  "7.0 for Microsoft Windows (32-bit) (February 18, 2009)", StyleDefinitions -> 
  FrontEnd`FileName[{"Report"}, "StandardReport.nb", CharacterEncoding -> 
    "WindowsANSI"]]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Parallel Computation"->{
  Cell[333235, 6120, 185, 3, 73, "Section",
   CellTags->"Parallel Computation"]},
 "Example 1: A Performance Test"->{
  Cell[376095, 6912, 251, 4, 24, "Subsection",
   CellTags->"Example 1: A Performance Test"]},
 "The Mathematica Package"->{
  Cell[413682, 7984, 175, 7, 81, "Title",
   CellTags->"The Mathematica Package"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Parallel Computation", 463388, 9263},
 {"Example 1: A Performance Test", 463507, 9266},
 {"The Mathematica Package", 463632, 9269}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 268820, 4415, 463, "Title"],
Cell[269390, 4439, 167, 3, 29, "Subtitle"],
Cell[269560, 4444, 69, 2, 29, "Subtitle"],
Cell[269632, 4448, 274, 6, 18, "Department"],
Cell[269909, 4456, 141, 2, 81, "Title"],
Cell[CellGroupData[{
Cell[270075, 4462, 142, 2, 73, "Section",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[270220, 4466, 631, 11, 30, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[270854, 4479, 1759, 35, 49, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[272616, 4516, 558, 8, 30, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[273177, 4526, 1225, 24, 42, "Subitem",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[274405, 4552, 1075, 21, 42, "Subitem",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[275483, 4575, 1020, 19, 42, "Subitem",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[276506, 4596, 1474, 28, 43, "Subitem",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[277983, 4626, 1535, 30, 76, "Subitem",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[279521, 4658, 1700, 36, 87, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[281224, 4696, 423, 14, 30, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[281684, 4715, 96, 1, 73, "Section"],
Cell[CellGroupData[{
Cell[281805, 4720, 252, 3, 24, "Subsection"],
Cell[282060, 4725, 1288, 24, 49, "Text"],
Cell[283351, 4751, 1029, 18, 30, "Text"],
Cell[284383, 4771, 1031, 18, 30, "Text"],
Cell[285417, 4791, 1211, 19, 49, "Text"],
Cell[286631, 4812, 1308, 27, 68, "Text"],
Cell[287942, 4841, 430, 8, 30, "Text"],
Cell[288375, 4851, 549, 9, 38, "SubitemParagraph"]
}, Closed]],
Cell[CellGroupData[{
Cell[288961, 4865, 269, 8, 24, "Subsection"],
Cell[289233, 4875, 447, 14, 30, "Text"],
Cell[289683, 4891, 380, 9, 30, "Text"],
Cell[290066, 4902, 1075, 27, 49, "Text"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[291190, 4935, 153, 3, 81, "Title"],
Cell[CellGroupData[{
Cell[291368, 4942, 141, 2, 73, "Section"],
Cell[CellGroupData[{
Cell[291534, 4948, 166, 2, 24, "Subsection"],
Cell[291703, 4952, 711, 15, 49, "Text"],
Cell[292417, 4969, 546, 9, 30, "Text"],
Cell[292966, 4980, 696, 17, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[293699, 5002, 118, 2, 24, "Subsection"],
Cell[293820, 5006, 176, 2, 30, "Text"],
Cell[293999, 5010, 123, 4, 56, "Program"],
Cell[294125, 5016, 841, 21, 87, "Text"],
Cell[294969, 5039, 578, 14, 200, "Program"],
Cell[295550, 5055, 843, 17, 87, "Text"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[296442, 5078, 133, 2, 73, "Section"],
Cell[CellGroupData[{
Cell[296600, 5084, 244, 3, 24, "Subsection"],
Cell[296847, 5089, 274, 9, 31, "Text"],
Cell[297124, 5100, 316, 7, 56, "Program"],
Cell[297443, 5109, 246, 6, 49, "Text"],
Cell[297692, 5117, 246, 5, 56, "Program"],
Cell[297941, 5124, 393, 8, 49, "Text"],
Cell[298337, 5134, 597, 13, 49, "Text"],
Cell[298937, 5149, 551, 11, 49, "Text"],
Cell[299491, 5162, 285, 5, 30, "Text"],
Cell[299779, 5169, 192, 5, 56, "Program"],
Cell[299974, 5176, 41, 1, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[300052, 5182, 250, 4, 24, "Subsection"],
Cell[300305, 5188, 374, 9, 31, "Text"],
Cell[300682, 5199, 1055, 27, 248, "Program"],
Cell[301740, 5228, 855, 17, 106, "Text"],
Cell[302598, 5247, 344, 7, 56, "Program"],
Cell[302945, 5256, 928, 17, 68, "Text"],
Cell[303876, 5275, 406, 11, 104, "Program"],
Cell[304285, 5288, 339, 8, 49, "Text"],
Cell[304627, 5298, 399, 7, 30, "Text"],
Cell[305029, 5307, 309, 9, 104, "Program"],
Cell[305341, 5318, 257, 6, 49, "Text"],
Cell[305601, 5326, 235, 8, 104, "Program"],
Cell[305839, 5336, 267, 7, 49, "Text"],
Cell[306109, 5345, 279, 9, 104, "Program"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[306437, 5360, 238, 4, 73, "Section"],
Cell[CellGroupData[{
Cell[306700, 5368, 398, 6, 24, "Subsection"],
Cell[307101, 5376, 305, 7, 30, "Text"],
Cell[307409, 5385, 271, 7, 72, "Program"],
Cell[307683, 5394, 382, 8, 49, "Text"],
Cell[308068, 5404, 216, 6, 56, "Program"],
Cell[308287, 5412, 499, 12, 49, "Text"],
Cell[308789, 5426, 281, 6, 56, "Program"],
Cell[309073, 5434, 41, 1, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[309151, 5440, 195, 3, 24, "Subsection"],
Cell[309349, 5445, 234, 5, 30, "Text"],
Cell[309586, 5452, 224, 5, 56, "Program"],
Cell[309813, 5459, 385, 9, 49, "Text"],
Cell[310201, 5470, 225, 7, 88, "Program"],
Cell[310429, 5479, 293, 7, 49, "Text"],
Cell[310725, 5488, 466, 10, 72, "Program"],
Cell[311194, 5500, 293, 7, 49, "Text"],
Cell[311490, 5509, 218, 6, 56, "Program"],
Cell[311711, 5517, 651, 14, 68, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[312399, 5536, 309, 5, 24, "Subsection"],
Cell[312711, 5543, 414, 9, 30, "Text"],
Cell[313128, 5554, 270, 6, 30, "Text"],
Cell[313401, 5562, 386, 8, 56, "Program"],
Cell[313790, 5572, 234, 6, 49, "Text"],
Cell[314027, 5580, 330, 7, 72, "Program"],
Cell[314360, 5589, 301, 7, 49, "Text"],
Cell[314664, 5598, 413, 9, 72, "Program"],
Cell[315080, 5609, 366, 8, 49, "Text"],
Cell[315449, 5619, 241, 6, 72, "Program"],
Cell[315693, 5627, 237, 7, 49, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[315967, 5639, 327, 4, 24, "Subsection"],
Cell[316297, 5645, 724, 11, 49, "Text"],
Cell[317024, 5658, 1273, 33, 344, "Program"],
Cell[318300, 5693, 218, 6, 49, "Text"],
Cell[318521, 5701, 382, 7, 56, "Program"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[318952, 5714, 157, 2, 73, "Section"],
Cell[CellGroupData[{
Cell[319134, 5720, 228, 3, 24, "Subsection"],
Cell[319365, 5725, 484, 9, 49, "Text"],
Cell[319852, 5736, 471, 9, 50, "Text"],
Cell[320326, 5747, 199, 2, 40, "Program"],
Cell[320528, 5751, 251, 6, 49, "Text"],
Cell[320782, 5759, 166, 2, 40, "Program"],
Cell[320951, 5763, 357, 9, 49, "Text"],
Cell[321311, 5774, 260, 6, 56, "Program"],
Cell[321574, 5782, 591, 12, 68, "Text"],
Cell[322168, 5796, 621, 15, 152, "Program"],
Cell[322792, 5813, 343, 7, 50, "Text"],
Cell[323138, 5822, 226, 5, 30, "Text"],
Cell[323367, 5829, 149, 4, 56, "Program"],
Cell[323519, 5835, 41, 1, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[323597, 5841, 310, 5, 24, "Subsection"],
Cell[323910, 5848, 525, 8, 49, "Text"],
Cell[324438, 5858, 346, 14, 200, "Program"],
Cell[324787, 5874, 41, 1, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[324865, 5880, 411, 7, 24, "Subsection"],
Cell[325279, 5889, 418, 7, 30, "Text"],
Cell[325700, 5898, 351, 9, 104, "Program"],
Cell[326054, 5909, 422, 8, 49, "Text"],
Cell[326479, 5919, 419, 15, 200, "Program"],
Cell[326901, 5936, 328, 6, 49, "Text"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[327278, 5948, 138, 2, 73, "Section"],
Cell[CellGroupData[{
Cell[327441, 5954, 181, 3, 24, "Subsection"],
Cell[327625, 5959, 268, 6, 30, "Text"],
Cell[327896, 5967, 350, 7, 30, "Text"],
Cell[328249, 5976, 282, 7, 88, "Program"],
Cell[328534, 5985, 298, 7, 49, "Text"],
Cell[328835, 5994, 221, 5, 56, "Program"],
Cell[329059, 6001, 184, 5, 49, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[329280, 6011, 197, 3, 24, "Subsection"],
Cell[329480, 6016, 457, 8, 49, "Text"],
Cell[329940, 6026, 599, 16, 168, "Program"],
Cell[330542, 6044, 479, 10, 50, "Text"],
Cell[331024, 6056, 249, 6, 56, "Program"],
Cell[331276, 6064, 394, 8, 49, "Text"],
Cell[331673, 6074, 210, 8, 104, "Program"],
Cell[331886, 6084, 493, 9, 68, "Text"],
Cell[332382, 6095, 327, 8, 104, "Program"],
Cell[332712, 6105, 474, 9, 68, "Text"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[333235, 6120, 185, 3, 73, "Section",
 CellTags->"Parallel Computation"],
Cell[CellGroupData[{
Cell[333445, 6127, 411, 7, 24, "Subsection"],
Cell[333859, 6136, 239, 5, 30, "Text"],
Cell[334101, 6143, 710, 16, 49, "Text"],
Cell[334814, 6161, 702, 16, 49, "Text"],
Cell[335519, 6179, 701, 15, 68, "Text"],
Cell[336223, 6196, 798, 16, 68, "Text"],
Cell[337024, 6214, 628, 13, 68, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[337689, 6232, 165, 3, 24, "Subsection"],
Cell[337857, 6237, 482, 13, 30, "Text"],
Cell[338342, 6252, 36238, 600, 633, "Text"],
Cell[374583, 6854, 225, 6, 49, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[374845, 6865, 134, 2, 24, "Subsection"],
Cell[374982, 6869, 327, 7, 31, "Text"],
Cell[375312, 6878, 285, 8, 104, "Program"],
Cell[375600, 6888, 200, 6, 49, "Text"],
Cell[375803, 6896, 211, 8, 104, "Program"],
Cell[376017, 6906, 41, 1, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[376095, 6912, 251, 4, 24, "Subsection",
 CellTags->"Example 1: A Performance Test"],
Cell[376349, 6918, 290, 6, 30, "Text"],
Cell[376642, 6926, 713, 15, 49, "Text"],
Cell[377358, 6943, 262, 6, 72, "Program"],
Cell[377623, 6951, 389, 8, 49, "Text"],
Cell[378015, 6961, 485, 14, 168, "Program"],
Cell[378503, 6977, 568, 10, 68, "Text"],
Cell[379074, 6989, 405, 9, 72, "Program"],
Cell[379482, 7000, 557, 10, 68, "Text"],
Cell[380042, 7012, 419, 9, 88, "Program"],
Cell[380464, 7023, 381, 8, 49, "Text"],
Cell[380848, 7033, 264, 5, 30, "Text"],
Cell[381115, 7040, 206, 5, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[381358, 7050, 203, 2, 24, "Subsection"],
Cell[381564, 7054, 292, 5, 30, "Text"],
Cell[381859, 7061, 159, 3, 30, "Text"],
Cell[382021, 7066, 182, 5, 72, "Program"],
Cell[382206, 7073, 249, 6, 49, "Text"],
Cell[382458, 7081, 769, 16, 120, "Program"],
Cell[383230, 7099, 721, 12, 87, "Text"],
Cell[383954, 7113, 154, 2, 30, "Text"],
Cell[384111, 7117, 389, 9, 88, "Program"],
Cell[384503, 7128, 440, 9, 49, "Text"],
Cell[384946, 7139, 222, 5, 56, "Program"],
Cell[385171, 7146, 841, 16, 87, "Text"],
Cell[386015, 7164, 235, 4, 56, "Program"],
Cell[386253, 7170, 184, 3, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[386474, 7178, 161, 2, 24, "Subsection"],
Cell[386638, 7182, 325, 6, 30, "Text"],
Cell[386966, 7190, 410, 10, 136, "Program"],
Cell[387379, 7202, 41, 1, 30, "Text"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[387469, 7209, 234, 6, 73, "Section"],
Cell[CellGroupData[{
Cell[387728, 7219, 233, 3, 24, "Subsection"],
Cell[387964, 7224, 429, 8, 30, "Text"],
Cell[388396, 7234, 616, 14, 49, "Text"],
Cell[389015, 7250, 734, 21, 49, "Text"],
Cell[389752, 7273, 278, 8, 30, "Text"],
Cell[390033, 7283, 324, 8, 30, "Text"],
Cell[390360, 7293, 235, 6, 56, "Program"],
Cell[390598, 7301, 442, 12, 68, "Text"],
Cell[391043, 7315, 567, 12, 49, "Text"],
Cell[391613, 7329, 311, 9, 104, "Program"],
Cell[391927, 7340, 242, 7, 49, "Text"],
Cell[392172, 7349, 272, 6, 56, "Program"],
Cell[392447, 7357, 550, 13, 68, "Text"],
Cell[393000, 7372, 509, 11, 49, "Text"],
Cell[393512, 7385, 287, 9, 104, "Program"],
Cell[393802, 7396, 41, 1, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[393880, 7402, 129, 2, 24, "Subsection"],
Cell[394012, 7406, 275, 5, 30, "Text"],
Cell[394290, 7413, 361, 6, 49, "Text"],
Cell[394654, 7421, 323, 4, 30, "Text"],
Cell[394980, 7427, 640, 19, 232, "Program"],
Cell[395623, 7448, 129, 3, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[395789, 7456, 333, 4, 24, "Subsection"],
Cell[396125, 7462, 602, 11, 49, "Text"],
Cell[396730, 7475, 493, 9, 30, "Text"],
Cell[397226, 7486, 351, 10, 104, "Program"],
Cell[397580, 7498, 770, 17, 68, "Text"],
Cell[398353, 7517, 481, 14, 152, "Program"],
Cell[398837, 7533, 861, 20, 68, "Text"],
Cell[399701, 7555, 665, 15, 49, "Text"],
Cell[400369, 7572, 571, 16, 152, "Program"],
Cell[400943, 7590, 365, 8, 49, "Text"],
Cell[401311, 7600, 300, 12, 152, "Program"],
Cell[401614, 7614, 349, 8, 49, "Text"],
Cell[401966, 7624, 455, 10, 49, "Text"],
Cell[402424, 7636, 229, 3, 30, "Text"],
Cell[402656, 7641, 488, 14, 152, "Program"],
Cell[403147, 7657, 41, 1, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[403225, 7663, 175, 3, 24, "Subsection"],
Cell[403403, 7668, 249, 5, 30, "Text"],
Cell[403655, 7675, 372, 13, 152, "Program"],
Cell[404030, 7690, 204, 6, 49, "Text"],
Cell[404237, 7698, 353, 12, 152, "Program"],
Cell[404593, 7712, 156, 5, 49, "Text"],
Cell[404752, 7719, 273, 9, 104, "Program"],
Cell[405028, 7730, 242, 6, 49, "Text"],
Cell[405273, 7738, 489, 16, 200, "Program"],
Cell[405765, 7756, 41, 1, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[405843, 7762, 169, 2, 24, "Subsection"],
Cell[406015, 7766, 334, 7, 30, "Text"],
Cell[406352, 7775, 200, 5, 56, "Program"],
Cell[406555, 7782, 477, 11, 49, "Text"],
Cell[407035, 7795, 730, 15, 68, "Text"],
Cell[407768, 7812, 309, 7, 72, "Program"],
Cell[408080, 7821, 175, 5, 49, "Text"],
Cell[408258, 7828, 493, 11, 56, "Program"],
Cell[408754, 7841, 307, 6, 49, "Text"],
Cell[409064, 7849, 785, 17, 152, "Program"],
Cell[409852, 7868, 431, 9, 49, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[410320, 7882, 159, 2, 24, "Subsection"],
Cell[410482, 7886, 389, 7, 49, "Text"],
Cell[410874, 7895, 425, 12, 152, "Program"],
Cell[411302, 7909, 420, 10, 49, "Text"],
Cell[411725, 7921, 639, 15, 152, "Program"],
Cell[412367, 7938, 191, 5, 49, "Text"],
Cell[412561, 7945, 608, 21, 248, "Program"],
Cell[413172, 7968, 449, 9, 68, "Text"]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[413682, 7984, 175, 7, 81, "Title",
 CellTags->"The Mathematica Package"],
Cell[CellGroupData[{
Cell[413882, 7995, 122, 2, 73, "Section"],
Cell[CellGroupData[{
Cell[414029, 8001, 114, 2, 24, "Subsection"],
Cell[414146, 8005, 679, 15, 49, "Text"],
Cell[414828, 8022, 834, 16, 49, "Text"],
Cell[415665, 8040, 880, 16, 49, "Text"],
Cell[416548, 8058, 1138, 22, 68, "Text"],
Cell[417689, 8082, 474, 8, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[418200, 8095, 93, 1, 24, "Subsection"],
Cell[418296, 8098, 298, 8, 30, "Text"],
Cell[418597, 8108, 255, 7, 30, "Text"],
Cell[418855, 8117, 182, 3, 40, "Input"],
Cell[419040, 8122, 276, 7, 49, "Text"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[419365, 8135, 152, 2, 73, "Section"],
Cell[CellGroupData[{
Cell[419542, 8141, 225, 3, 24, "Subsection"],
Cell[419770, 8146, 602, 13, 49, "Text"],
Cell[420375, 8161, 1012, 31, 376, "Program"],
Cell[421390, 8194, 332, 7, 49, "Text"],
Cell[421725, 8203, 416, 7, 30, "Text"],
Cell[422144, 8212, 681, 13, 49, "Text"],
Cell[422828, 8227, 530, 12, 30, "Text"],
Cell[423361, 8241, 677, 19, 49, "Text"],
Cell[424041, 8262, 263, 8, 30, "Text"],
Cell[424307, 8272, 148, 3, 40, "Input"],
Cell[424458, 8277, 666, 12, 39, "Output"],
Cell[425127, 8291, 167, 2, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[425331, 8298, 363, 5, 24, "Subsection"],
Cell[425697, 8305, 374, 12, 30, "Text"],
Cell[426074, 8319, 362, 8, 47, "Code",
 Evaluatable->False],
Cell[426439, 8329, 400, 7, 49, "Text"],
Cell[426842, 8338, 389, 9, 47, "Code",
 Evaluatable->False],
Cell[427234, 8349, 248, 7, 30, "Text"],
Cell[427485, 8358, 441, 8, 47, "Code",
 Evaluatable->False],
Cell[427929, 8368, 365, 8, 49, "Text"],
Cell[428297, 8378, 242, 3, 30, "Text"],
Cell[CellGroupData[{
Cell[428564, 8385, 173, 3, 40, "Input"],
Cell[428740, 8390, 305, 5, 39, "Output"]
}, Open  ]],
Cell[429060, 8398, 132, 2, 30, "Text"],
Cell[429195, 8402, 457, 9, 49, "Text"],
Cell[429655, 8413, 319, 8, 40, "Input"],
Cell[429977, 8423, 437, 11, 39, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[430451, 8439, 362, 5, 24, "Subsection"],
Cell[430816, 8446, 485, 12, 49, "Text"],
Cell[431304, 8460, 423, 9, 47, "Code",
 Evaluatable->False],
Cell[431730, 8471, 244, 3, 30, "Text"],
Cell[431977, 8476, 462, 11, 47, "Code",
 Evaluatable->False],
Cell[432442, 8489, 302, 7, 30, "Text"],
Cell[432747, 8498, 571, 11, 47, "Code",
 Evaluatable->False],
Cell[433321, 8511, 433, 8, 49, "Text"],
Cell[433757, 8521, 535, 9, 47, "Code",
 Evaluatable->False],
Cell[434295, 8532, 365, 8, 49, "Text"],
Cell[434663, 8542, 312, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[435000, 8550, 540, 11, 61, "Input"],
Cell[435543, 8563, 377, 6, 39, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[435969, 8575, 265, 8, 24, "Subsection"],
Cell[436237, 8585, 394, 9, 30, "Text"],
Cell[436634, 8596, 382, 7, 49, "Text"],
Cell[437019, 8605, 301, 8, 30, "Text"],
Cell[CellGroupData[{
Cell[437345, 8617, 470, 12, 40, "Input"],
Cell[437818, 8631, 868, 17, 124, "Message"],
Cell[438689, 8650, 609, 11, 21, "Message"],
Cell[439301, 8663, 282, 4, 39, "Output"]
}, Open  ]],
Cell[439598, 8670, 496, 10, 30, "Text"],
Cell[440097, 8682, 382, 6, 40, "Input"],
Cell[440482, 8690, 297, 5, 39, "Output"],
Cell[440782, 8697, 401, 10, 30, "Text"],
Cell[CellGroupData[{
Cell[441208, 8711, 372, 10, 40, "Input"],
Cell[441583, 8723, 150, 3, 39, "Output"]
}, Open  ]],
Cell[441748, 8729, 763, 13, 49, "Text"],
Cell[442514, 8744, 953, 14, 49, "Text"],
Cell[443470, 8760, 1151, 18, 49, "Text"],
Cell[CellGroupData[{
Cell[444646, 8782, 1050, 24, 121, "Input"],
Cell[445699, 8808, 686, 12, 39, "Output"]
}, Open  ]],
Cell[446400, 8823, 452, 10, 30, "Text"],
Cell[446855, 8835, 601, 11, 49, "Text"],
Cell[CellGroupData[{
Cell[447481, 8850, 561, 14, 40, "Input"],
Cell[448045, 8866, 181, 4, 39, "Output"]
}, Open  ]],
Cell[448241, 8873, 144, 2, 30, "Text"],
Cell[448388, 8877, 157, 3, 40, "Input"],
Cell[448548, 8882, 481, 9, 30, "Text"],
Cell[449032, 8893, 505, 11, 61, "Input"],
Cell[449540, 8906, 528, 10, 39, "Output"],
Cell[450071, 8918, 844, 19, 68, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[450952, 8942, 394, 9, 24, "Subsection"],
Cell[451349, 8953, 566, 13, 49, "Text"],
Cell[451918, 8968, 364, 9, 30, "Text"],
Cell[CellGroupData[{
Cell[452307, 8981, 1551, 39, 141, "Input"],
Cell[453861, 9022, 504, 10, 39, "Output"],
Cell[454368, 9034, 478, 10, 39, "Output"]
}, Open  ]],
Cell[454861, 9047, 521, 11, 49, "Text"],
Cell[CellGroupData[{
Cell[455407, 9062, 259, 5, 40, "Input"],
Cell[455669, 9069, 174, 3, 39, "Output"]
}, Open  ]],
Cell[455858, 9075, 724, 12, 68, "Text"],
Cell[CellGroupData[{
Cell[456607, 9091, 2399, 60, 201, "Input"],
Cell[459009, 9153, 689, 13, 39, "Output"],
Cell[459701, 9168, 662, 13, 39, "Output"]
}, Open  ]],
Cell[460378, 9184, 203, 5, 30, "Text"],
Cell[CellGroupData[{
Cell[460606, 9193, 259, 5, 40, "Input"],
Cell[460868, 9200, 198, 3, 39, "Output"],
Cell[461069, 9205, 133, 1, 30, "Text"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
